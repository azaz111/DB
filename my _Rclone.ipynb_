{"cells":[{"cell_type":"markdown","source":["**First Connect your Google Account! So that Rclone can save/fetch its Progress**"],"metadata":{"id":"xU_gKkKgoLW6"}},{"cell_type":"markdown","source":["<b>Options:</b><br>\n","`FORCE_REMOUNT`:<b>Forcefully remount your Google Account's Google Drive.</b><br>\n","`CUSTOM_MOUNT_POINT`:<b>Choose different path for mounting your Google Account's Google Drive.</b><br>\n","`DEBUG_MODE`:<b>To Enable or Disable DEBUG Mode.</b>"],"metadata":{"id":"MGIq_sztgmYu"}},{"cell_type":"code","source":["#@markdown <br><center><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Google_Drive_logo.png/600px-Google_Drive_logo.png\" height=\"50\" alt=\"Gdrive-logo' \"/></center>\n","#@markdown <center><h3>Connect to Google Account</h3></center><br>\n","import sys\n","import requests\n","import pathlib\n","from google.colab import output, drive\n","\n","Update_Error = [\n","\"Unable to check for updates!\",\n","\"MCT Tool is out-dated! please update it to latest version to get new features or bug fixes.\"\n","]\n","\n","Path_Error = [\n","\"Custom Mount Path can't be empty! otherwise disable CUSTOM_MOUNT_PATH\",\n","\"Given Custom Mount Path should be Directory not a particular file.\",\n","\"Given Custom Mount Path not exist!\"\n","]\n","\n","update_from = \"https://www.caduceus.ml/files/MCT-Version.txt\"\n","current_version = \"v4.4.8\"\n","\n","try:\n","  latest_version = requests.get(update_from).text\n","  f = 1\n","except:\n","  print(Update_Error[0])\n","  f = 0\n","\n","if f == 1:\n","  if current_version == latest_version or latest_version == f\"{current_version}\\n\":\n","    print(f\"MCT Tool is updated! {current_version}\")\n","  else:\n","    sys.exit(Update_Error[1])\n","else:\n","  pass\n","\n","MODE = \"MOUNT\" #@param [\"MOUNT\", \"UNMOUNT\"]\n","FORCE_REMOUNT = True #@param {type:\"boolean\"}\n","CUSTOM_MOUNT_POINT = False #@param {type:\"boolean\"}\n","DEBUG_MODE = False #@param {type:\"boolean\"}\n","\n","if CUSTOM_MOUNT_POINT == True:\n","  Custom_Mount_Path = input(\"Please enter Custom Mount Path:\\n\")\n","  if not Custom_Mount_Path:\n","    sys.exit(Path_Error[0])\n","  else:\n","    if pathlib.Path(Custom_Mount_Path).exists():\n","      if pathlib.Path(Custom_Mount_Path).is_dir():\n","        pass\n","      else:\n","        sys.exit(Path_Error[1])\n","    else:\n","      sys.exit(Path_Error[2])\n","else:\n","  Custom_Mount_Path = \"/content/drive\"\n","\n","drive.mount._DEBUG = DEBUG_MODE\n","if MODE == \"MOUNT\":\n","  print(\"Please Wait! Mounting...\")\n","  drive.mount(Custom_Mount_Path, force_remount= FORCE_REMOUNT)\n","  if DEBUG_MODE == False:\n","    output.clear()\n","  else:\n","    pass\n","  print(f\"Mounted at {Custom_Mount_Path}\")\n","elif MODE == \"UNMOUNT\":\n","  try:\n","    print(\"Please Wait! UNMOUNT in progress...\")\n","    drive.flush_and_unmount()\n","  except ValueError:\n","    pass\n","  get_ipython().system_raw(\"rm -rf /root/.config/Google/DriveFS\")"],"metadata":{"cellView":"form","id":"Yuqm_-xBhOEH","executionInfo":{"status":"ok","timestamp":1671000200639,"user_tz":-180,"elapsed":20097,"user":{"displayName":"","userId":""}},"outputId":"469d81e6-54c2-4f74-8f64-ffb19d2c30fe","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["**Secondly, Download Required Files by Running the Below Code:**"],"metadata":{"id":"7vbqfASX1jHx"}},{"cell_type":"markdown","source":["<b>Options:</b><br>\n","`Force_Setup`<b>: Forcefully install Rclone by excluding all other dependencies and download them separately. Useful if any dependency (except Rclone) having temporary setup problem.</b><br>\n","`Custom_sh_file`:<b> Get custom .sh file from external source (URL or File Path) and execute it to install additional dependecies or requirements with or without normal setup.</b>"],"metadata":{"id":"l9gOMerpoUYX"}},{"cell_type":"code","source":["#@markdown <br><center><img src=\"https://www.caduceus.ml/Img/Setup_img.png\" height=\"50\" alt=\"Setup-Logo' \"/></center>\n","#@markdown <center><h3><b>Setup & Configure Environment</b></h3></center><br>\n","import sys\n","import pathlib\n","import time\n","import requests\n","from google.colab import output\n","\n","Backend = [\n","\"https://rclone.org/install.sh\",\n","\"https://www.caduceus.ml/files/beta-install.sh\",\n","\"https://raw.githubusercontent.com/TheCaduceus/thecaduceus.github.io/main/files/beta-install.sh\"\n","]\n","\n","Update_Error = [\n","\"Unable to check for updates!\",\n","\"MCT Tool is out-dated! please update it to latest version to get new features and bug fixes.\"\n","]\n","\n","Sh_File_Error = [\n","\"Custom sh file source can't be blank!\",\n","\"Provided Custom sh file path should of a particular file not directory/folder.\",\n","\"Provided Custom sh file path not exist!\",\n","\"File format should be .sh\",\n","\"Given Custom sh Source URL having connection error.\"\n","]\n","\n","Backend_Error = [\n","\"Back-end Failure: Unable to contact Backend.\"\n","]\n","\n","Input_Error = [\n","\"Input Error: Value should be 1 or 0\"\n","]\n","\n","finish_log = \"/content/Version.log\"\n","\n","update_from = \"https://www.caduceus.ml/files/MCT-Version.txt\"\n","current_version = \"v4.4.8\"\n","\n","try:\n","  latest_version = requests.get(update_from).text\n","  f = 1\n","except:\n","  print(Update_Error[0])\n","  f = 0\n","\n","if f == 1:\n","  if current_version == latest_version or latest_version == f\"{current_version}\\n\":\n","    print(f\"MCT Tool is updated! {current_version}\")\n","  else:\n","    sys.exit(Update_Error[1])\n","else:\n","  pass\n","\n","# Flavor Settings  \n","Stable = \"\"\n","Beta = \"-s beta\"\n","\n","# User Input\n","Install_Rclone_Flavor = Stable #@param [\"Stable\", \"Beta\"] {type:\"raw\"}\n","Force_Setup = False #@param {type:\"boolean\"}\n","Custom_sh_file = False #@param {type:\"boolean\"}\n","\n","if Custom_sh_file == True:\n","  # Install Validators\n","  # Don't add Validators in sh file because Validators are required before even running setup\n","  !pip install validators\n","  # Use 'as' to import otherwise too long it will\n","  from validators import url as validate_url\n","  Custom_sh_Source = input(\"Provide the Custom Install.sh file source, it can be URL or File Path:\\n\")\n","  if not Custom_sh_Source:\n","    sys.exit(Sh_File_Error[0])\n","  else:\n","    pass\n","  is_url = validate_url(Custom_sh_Source)\n","  if is_url == True:\n","    try:\n","      requests.head(Custom_sh_Source).status_code\n","      c = 1\n","    except:\n","      c = 0\n","      sys.exit(Sh_File_Error[4])\n","    if c == 1:\n","      sudo_mode = input(\"Do you want to execute the .sh file as sudo? 1 for Yes and 0 for No:\\n\")\n","      if sudo_mode == \"1\":\n","        !curl {Custom_sh_Source} | sudo bash\n","      elif sudo_mode == \"0\":\n","        !curl {Custom_sh_Source} | bash\n","      else:\n","        sys.exit(Input_Error[0])\n","      normal_setup = input(\"Do you want to also run Normal Setup? 1 for Yes and 0 for No:\\n\")\n","      if normal_setup == \"1\":\n","        pass\n","      elif normal_setup == \"0\":\n","        sys.exit(\"Task Completed!\")\n","      else:\n","        sys.exit(Input_Error[0])\n","    else:\n","      pass\n","  else:\n","    if pathlib.Path(Custom_sh_Source).exists():\n","      # For ultra noobian hehe...\n","      if pathlib.Path(Custom_sh_Source).is_file():\n","        if not pathlib.PurePath(Custom_sh_Source).suffix == \".sh\":\n","          sys.exit(Sh_File_Error[3])\n","        else:\n","          sudo_mode = input(\"Do you want to execute the .sh file as sudo? 1 for Yes and 0 for No:\\n\")\n","          if sudo_mode == \"1\":\n","            !sudo bash {Custom_sh_Source}\n","          elif sudo_mode == \"0\":\n","            !bash {Custom_sh_Source}\n","          else:\n","            sys.exit(Input_Error[0])\n","          normal_setup = input(\"Do you want to also run Normal Setup? 1 for Yes and 0 for No:\\n\")\n","          if normal_setup == \"1\":\n","            pass\n","          elif normal_setup == \"0\":\n","            sys.exit(\"Task Completed!\")\n","          else:\n","            sys.exit(Input_Error[0])\n","      else:\n","        sys.exit(Sh_File_Error[1])\n","    else:\n","      sys.exit(Sh_File_Error[2])\n","        \n","# Force Setup\n","if Force_Setup == True:\n","  if pathlib.Path(finish_log).exists():\n","    !rm {finish_log}\n","    print(\"Starting Force Setup...\")\n","    time.sleep(4)\n","    ! curl {Backend[0]} | sudo bash {Install_Rclone_Flavor}\n","  else:\n","    print(\"Starting Force Setup...\")\n","    time.sleep(4)\n","    ! curl {Backend[0]} | sudo bash {Install_Rclone_Flavor}\n","\n","if pathlib.Path(finish_log).exists():\n","        print(\"Setup files exist and configured already!\")\n","else:\n","  try:\n","    requests.head(Backend[1]).status_code\n","    print(\"Connected to Backend using Route (1)\")\n","    ! curl {Backend[1]} | sudo bash {Install_Rclone_Flavor}\n","    ! curl {Backend[1]} >> {finish_log}\n","    output.clear()\n","    print(\"Setup complete successfully!\")\n","  except:\n","    try:\n","      requests.head(Backend[2]).status_code\n","      print(\"Connected to Back-end using Route (2)\")\n","      ! curl {Backend[2]} | sudo bash {Install_Rclone_Flavor}\n","      ! curl {Backend[2]} >> {finish_log}\n","      output.clear()\n","      print(\"Setup complete successfully!\")\n","    except:\n","      print(Backend_Error[0])"],"metadata":{"cellView":"form","id":"VLvNaehXbk59","executionInfo":{"status":"ok","timestamp":1671000133535,"user_tz":-180,"elapsed":69248,"user":{"displayName":"","userId":""}},"outputId":"542ffb26-8c94-4de3-bf45-a431f05234c0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Setup complete successfully!\n"]}]},{"cell_type":"markdown","source":["<b>Fetch your previous session MCT Tool Configurations:</b><br>\n","```\n","1.Service Accounts\n","2.Rclone config file\n","3.MEGA Credentials\n","4.GDTOT Crypt\n","5.DriveHub/HubDrive Crypt\n","```"],"metadata":{"id":"NOC4UVnbmjcs"}},{"cell_type":"markdown","source":["<b>Options:</b><br>\n","<b>By default, program uses MCT-Config folder located in My Drive to restore configurations.</b><br>\n","`Check_Root_MyDrive`<b>: Scan Root directory of My Drive for usable MCT Configuration files.</b><br>\n","`Custom_Import_Path`<b>: Scan a custom path (or directory) give by user for usable MCT Configuration files.</b><br>\n","`Custom_Export_Path`<b>: Export all your MCT Configuration files to a gives path.</b>"],"metadata":{"id":"sYA6ATyDsrNj"}},{"cell_type":"code","source":["#@markdown <br><center><img src=\"https://1.bp.blogspot.com/-M5PLcSana6M/XgBHF7jUjiI/AAAAAAAAUzs/S24qhuijluwKlzIOnc2gntoI-U83ZsrJACLcBGAsYHQ/s1600/rclone_logo.png\" height=\"50\" alt=\"Rclone-Logo' \"/></center>\n","#@markdown <center><h3><b>Fetch Previous MCT Config from My Drive</b></h3></center><br>\n","import sys\n","import os\n","import requests\n","import pathlib\n","from google.colab import output\n","\n","# Error Messages\n","Path_Error = [\n","\"Path Error: Provided Custom path not found! Check if you mounted/connected it or if you having reading/writing permission?\",\n","\"Path Error: Path can't be blank!\",\n","\"Path Error: One or more required path is missing! Check if you connected Google Account or not?\",\n","\"Path Error: Given Path is not a valid directory.\",\n","\"Path Error: Export Path can't be blank.\"\n","]\n","\n","Input_Error = [\n","\"Input Error: Both Check_Root_MyDrive and Custom_Import_Path can't be True\",\n","\"Input Error: Invalid input parameter! Please enter 0 or 1 as input.\",\n","\"Input Error: Password can't be blank!\"\n","]\n","\n","Restore_Error = [\n","\"Restore Error: MEGA Credentials not found or not valid!\",\n","\"Restore Error: Restore point not exist in your Google Drive, use additional feature of MCT Tool and it will be automatically created.\",\n","\"No Service Accounts available in My Drive to fetch them!\"\n","]\n","\n","Update_Error = [\n","\"Unable to check for updates!\",\n","\"Your MCT-Tool version is out-dated! please update it to latest version for getting new features and bug fixes.\"\n","]\n","\n","Setup_Error = [\n","\"Please download Setup first!\"\n","]\n","\n","GA_Error = [\n","\"Google Drive Error: Google Account is not connected!\"\n","]\n","\n","\n","# Setup Status\n","finish_log = \"/content/Version.log\"\n","\n","update_from = \"https://www.caduceus.ml/files/MCT-Version.txt\"\n","current_version = \"v4.4.8\"\n","\n","try:\n","  latest_version = requests.get(update_from).text\n","  f = 1\n","except:\n","  print(Update_Error[0])\n","  f = 0\n","\n","if f == 1:\n","  if current_version == latest_version or latest_version == f\"{current_version}\\n\":\n","    print(f\"MCT Tool is updated! {current_version}\")\n","  else:\n","    sys.exit(Update_Error[1])\n","else:\n","  pass\n","\n","# User Input\n","#@markdown ---\n","Check_Root_MyDrive = True #@param {type:\"boolean\"} \n","Custom_Import_Path = False #@param {type:\"boolean\"}\n","Custom_Export_Path = False #@param {type:\"boolean\"}\n","\n","# Custom Mount Point\n","try:\n","        CMP = pathlib.PurePath(Custom_Mount_Path)\n","except NameError:\n","        CMP = \"/content/drive\"\n","\n","# Root MyDrive Directory\n","Root_RcloneConfig_Path = f\"{CMP}/MyDrive/rclone.conf\"\n","Root_SA_Path = f\"{CMP}/MyDrive/accounts.zip\"\n","Root_UnzippedSA_Path = f\"{CMP}/MyDrive/accounts/\"\n","Root_GDTOT_Path = f\"{CMP}/MyDrive/GDTOT-Crypt.txt\"\n","Root_HubDrive_Path = f\"{CMP}/MyDrive/HubDrive-Crypt.txt\"\n","Root_MEGAID_Path = f\"{CMP}/MyDrive/MEGA-ID.txt\"\n","Root_MEGAPASS_Path = f\"{CMP}/MyDrive/MEGA-PASS.txt\"\n","\n","# Config Directory\n","Config_dir = f\"{CMP}/MyDrive/\"\n","Save_in = f\"{CMP}/MyDrive/MCT-Config/\"\n","Local_RcloneConfig_Path = \"/root/.config/rclone/rclone.conf\"\n","MyDrive_RcloneConfig_Path = f\"{CMP}/MyDrive/MCT-Config/rclone.conf\"\n","Local_GDTOT_Path = \"/content/GDTOT-Crypt.txt\"\n","MyDrive_GDTOT_Path = f\"{CMP}/MyDrive/MCT-Config/GDTOT-Crypt.txt\"\n","Local_HubDrive_Path = \"/content/HubDrive-Crypt.txt\"\n","MyDrive_HubDrive_Path = f\"{CMP}/MyDrive/MCT-Config/HubDrive-Crypt.txt\"\n","Local_SA_Path = \"/content/accounts.zip\"\n","MyDrive_SA_Path = f\"{CMP}/MyDrive/MCT-Config/accounts.zip\"\n","Saved_in = \"MyDrive->MCT-Config\"\n","Local_MEGAConfig_Path = \"/content/MEGA-PASS.txt\"\n","MyDrive_MEGAConfig_Path = f\"{CMP}/MyDrive/MCT-Config/MEGA-PASS.txt\"\n","Local_MEGAID_Path = \"/content/MEGA-ID.txt\"\n","MyDrive_MEGAID_Path = f\"{CMP}/MyDrive/MCT-Config/MEGA-ID.txt\"\n","\n","if Check_Root_MyDrive == True and Custom_Import_Path == True:\n","        sys.exit(Input_Error[0])\n","\n","# Import Path Checks\n","if Custom_Import_Path == True:\n","        print(\"Please Enter Custom path from which you want to import MCT Configurations:\")\n","        Custom_Path = input()\n","        if Custom_Path == \"\":\n","                sys.exit(Path_Error[1])\n","        else:\n","                if pathlib.Path(Custom_Path).exists():\n","                        if pathlib.Path(Custom_Path).is_dir():\n","                                print(\"Custom Path exist and valid!\")\n","                        else:\n","                                sys.exit(Path_Error[3])\n","                else:\n","                        sys.exit(Path_Error[0])\n","\n","# Export Path Checks\n","if Custom_Export_Path == True:\n","        print(\"Please Enter Custom path to which you want to export MCT Configurations:\")\n","        Export_To = input()\n","        if Export_To == \"\":\n","                sys.exit(Path_Error[4])\n","        else:\n","                if pathlib.Path(Export_To).exists():\n","                        if pathlib.Path(Export_To).is_dir():\n","                                print(\"Export Path exist and valid!\")\n","                        else:\n","                                sys.exit(Path_Error[3])\n","                else:\n","                        sys.exit(Path_Error[0])\n","\n","# Custom Import Directory\n","if Custom_Import_Path == True:\n","  Custom_RcloneConfig_Path = f\"{Custom_Path}/rclone.conf\"\n","  Custom_SA_Path = f\"{Custom_Path}/accounts.zip\"\n","  Custom_UnzippedSA_Path = f\"{Custom_Path}/accounts/\"\n","  Custom_GDTOT_Path = f\"{Custom_Path}/GDTOT-Crypt.txt\"\n","  Custom_HubDrive_Path = f\"{Custom_Path}/HubDrive-Crypt.txt\"\n","  Custom_MEGAID_Path = f\"{Custom_Path}/MEGA-ID.txt\"\n","  Custom_MEGAPASS_Path = f\"{Custom_Path}/MEGA-PASS.txt\"\n","\n","# Check for Setup\n","if pathlib.Path(finish_log).exists():\n","        print(\"\")\n","else:\n","        sys.exit(Setup_Error[0])\n","\n","# Check Google Account (Prevent Duplicate)\n","if pathlib.Path(Config_dir).exists():\n","        print(\"\")\n","else:\n","        sys.exit(GA_Error[0])\n","\n","# Check Custom Path\n","if Custom_Import_Path == True:\n","        # Rclone config file\n","        if pathlib.Path(Custom_RcloneConfig_Path).exists():\n","                print(\"Rclone config folder found in provided custom path. Do you want to copy it to MCT-Config Folder? 0 for No and 1 for Yes\")\n","                Get_Custom = input ()\n","                if Get_Custom == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_RcloneConfig_Path).exists():\n","                                        print(\"Deleting already available rclone.conf in MCT-Config folder to replace it with one available in custom path\")\n","                                        !rclone delete {MyDrive_RcloneConfig_Path}\n","                                        !rclone copy {Custom_RcloneConfig_Path} {Save_in}\n","                                        print(\"Successfully! replaced the rclone.conf file with one available in provided custom path.\")\n","                                else:\n","                                        !rclone copy {Custom_RcloneConfig_Path} {Save_in}\n","                                        print(\"Successfully! copied rclone.conf from custom path to MCT-Config folder.\")\n","                        else:\n","                                !rclone mkdir{Save_in}\n","                                !rclone copy {Custom_RcloneConfig_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied rclone.conf from custom path to MCT-Config folder!\")\n","                elif Get_Custom == \"0\":\n","                        print(\"Skipping transportation of rclone.conf from custom path to MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No rclone.conf file present in given custom path to copy!\")\n","        # Service Accounts (Zip + Extracted form)\n","        if pathlib.Path(Custom_SA_Path).exists() or pathlib.Path(Custom_UnzippedSA_Path).exists():\n","                print(\"Service Accounts found in custom path. Do you want to copy it to MCT-Config Folder? 0 for No and 1 for Yes\")\n","                Get_Custom = input()\n","                if Get_Custom == \"1\":\n","                        if pathlib.Path(Custom_SA_Path).exists() and pathlib.Path(Custom_UnzippedSA_Path).exists():\n","                                print(\"Custom provided path contains both accounts.zip and accounts folder in extracted form! Choose anyone, 0 for accounts.zip or 1 for accounts folder and 2 to skip both\")\n","                                Choose_form = input()\n","                                if Choose_form == \"0\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                !rclone copy {Custom_SA_Path} {Save_in}\n","                                                print(\"Successfully! copied accounts.zip from custom oath to MCT-Config folder.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !rclone copy {Custom_SA_Path} {Save_in}\n","                                                print(\"Successfully! created MCT-Config folder and copied accounts.zip to MCT-Config folder\")\n","                                elif Choose_form == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip in MCT-Config to copy one available in custom path\")\n","                                                        time.sleep(3)\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                        print(\"Successfully! converted accounts folder into zip,replaced already existing accounts.zip and copied to MCT-Config folder!\")\n","                                                else:\n","                                                        !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                        print(\"Successfully! converted accounts folder into zip and copied into MCT-Config folder.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                print(\"Successfully! created MCT-Config folder, converted accounts folder into zip and copied it into MCT-Config folder.\")\n","                                elif Choose_form == \"2\":\n","                                        print(\"Skipping transportation of Service Accounts folder from provided custom path.\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        elif pathlib.Path(Custom_SA_Path).exists():\n","                                print(\"Custom provided Path contains Service Accounts in accounts.zip form! Do you want to copy it to MCT-Config folder? 0 for No and 1 for Yes\")\n","                                Get_Custom = input()\n","                                if Get_Custom == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip from MCT-Config folder to copy accounts.zip available in provided custom path.\")\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !rclone copy {Custom_SA_Path} {Save_in}\n","                                                        print(\"Successfully replaced accounts.zip already available in MCT-Config with one available in custom provided path!\")\n","                                                else:\n","                                                        !rclone f\"{Save_in}accounts\" {Custom_SA_Path}\n","                                                        print(\"Successfully! copied accounts.zip to MCT-Config folder.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !rclone copy {Custom_SA_Path} {Save_in}\n","                                                print(\"Successfully! created MCT-Config folder and copied accounts.zip into MCT-Config folder\")\n","                                elif Get_Custom == \"0\":\n","                                        print(\"Skipping transportation of accounts.zip from custom provided path!\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        elif pathlib.Path(Custom_UnzippedSA_Path).exists():\n","                                print(\"Custom provided path contains Service Accounts in extracted form! Do you want to copy it to MCT-Config folder? 0 for No and 1 for Yes\")\n","                                Get_Custom = input()\n","                                if Get_Custom == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip from MCT-Config folder to copy accounts.zip from custom provided path after zipping it.\")\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                        print(\"Successfully! deleted previous accounts.zip and zipped service accounts available in custom provided path and copied them to MCT-Config folder.\")\n","                                                else:\n","                                                        !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                        print(\"Successfully! copied Service Accounts after converting them into accounts.zip to MCT-Config folder.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !zip f\"{Save_in}accounts\" {Custom_UnzippedSA_Path}\n","                                                print(\"Successfully! created MCT-Config folder and copied Service Accounts into MCT-Config folder after converting into accounts.zip form.\")\n","                                elif Get_Custom == \"0\":\n","                                        print(\"Skipping transportation of Service Accounts (extracted form) to MCT-Config folder...\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        else:\n","                                print(\"An Error occurred while importing Service Accounts from custom provided path: Basically, program first detected that Service Accounts exist in given custom path and while trying to access it does not exist or program don't have valid access level to copy it.\")\n","                elif Get_Custom == \"0\":\n","                        print(\"Skipping transportation of Service Accounts from provided custom path!\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No Service Accounts either in accounts.zip format or extracted format found in given custom path.\")\n","        # MEGA Credentials (Email ID + Password)\n","        if pathlib.Path(Custom_MEGAPASS_Path).exists() and pathlib.Path(Custom_MEGAID_Path).exists():\n","                print(\"MEGA Credentials found in provided custom path, Do you want to copy it to MCT-Config folder? 0 for Yes and 1 for No\")\n","                Get_Custom = input()\n","                if Get_Custom == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_MEGAID_Path).exists() and pathlib.Path(MyDrive_MEGAConfig_Path):\n","                                        print(\"Deleting previous existing MEGA ID and Password to copy new once from custom provided path.\")\n","                                        !rclone delete {MyDrive_MEGAID_Path}\n","                                        !rclone delete {MyDrive_MEGAConfig_Path}\n","                                        !rclone copy {Custom_MEGAPASS_Path} {Save_in}\n","                                        !rclone copy {Custom_MEGAID_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA Credentials (2) and copied credentials from Custom provided directory into MCT-Config folder!\")\n","                                elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                                        print(\"Deleting previous existing MEGA ID to copy new credentials from custom provided path.\")\n","                                        !rclone delete {MyDrive_MEGAID_Path}\n","                                        !rclone copy {Custom_MEGAPASS_Path} {Save_in}\n","                                        !rclone cope {Custom_MEGAID_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA ID (1) and copied credentials from Custom provided path into MCT-Config folder.\")\n","                                elif pathlib.Path(MyDrive_MEGAConfig_Path):\n","                                        print(\"Deleting previous existing MEGA Password to copy new credentials from custom provided path.\")\n","                                        !rclone delete {MyDrive_MEGAConfig_Path}\n","                                        !rclone copy {Custom_MEGAPASS_Path} {Save_in}\n","                                        !rclone copy {Custom_MEGAID_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA Password (1) and copied credentials from Custom provided path into MCT-Config folder.\")\n","                                else:\n","                                        !rclone copy {Custom_MEGAPASS_Path} {Save_in}\n","                                        !rclone copy {Custom_MEGAID_Path} {Save_in}\n","                                        print(\"Successfully! copied the MEGA credentials from Root directory into MCT-Config folder\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Custom_MEGAPASS_Path} {Save_in}\n","                                !rclone copy {Custom_MEGAID_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied MEGA credentials from Root directory of My Drive to MCT-Config folder.\")\n","                elif Get_Custom == \"0\":\n","                        print(\"Skipping Transportation of MEGA Credentials from custom provided path.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        elif pathlib.Path(Custom_MEGAID_Path).exists():\n","                print(\"MEGA ID exist but MEGA Password is missing in Custom provided path! Do you want to save password for that existing ID? 0 for No and 1 for Yes\")\n","                Mitigate_Error = input()\n","                if Mitigate_Error == \"1\":\n","                        with open(Root_MEGAID_Path,\"r\") as file:\n","                                MEGA_ID = file.read().strip()\n","                        print(MEGA_ID)\n","                        print(\"Enter Password for ID existing in custom provided path, written above!\")\n","                        MEGA_PASS = input()\n","                        if MEGA_PASS == \"\":\n","                                sys.exit(Input_Error[2])\n","                        else:\n","                                with open(\"MEGA-PASS.txt\",\"w\") as file:\n","                                        file.write(MEGA_PASS)\n","                                print(\"Successfully! mitigated the missing MEGA Password Error.\")\n","                elif Mitigate_Error == \"0\":\n","                        print(\"Since, Error can't be mitigated! Skipping transportation of MEGA credentials from custom provided path into MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        elif pathlib.Path(Custom_MEGAPASS_Path).exists():\n","                print(\"MEGA Password exist but MEGA ID is missing in custom provided path!\")\n","                print(\"MEGA Password can't be shown due to safety reasons, hence force skipping...\")\n","        else:\n","                print(\"No MEGA Credentials to transport from custom provided path into MCT-Config.\")\n","\n","        # GDTOT Crypt\n","        if pathlib.Path(Custom_GDTOT_Path).exists():\n","                print(\"GDTOT Crypt found in custom provided path! Do you want to copy it into MCT-Config folder? 0 for No and 1 for Yes\")\n","                Get_Custom = input()\n","                if Get_Custom == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_GDTOT_Path).exists():\n","                                        print(\"Deleting previous existing GDTOT Crypt to copy new once from provided custom path...\")\n","                                        !rclone delete {MyDrive_GDTOT_Path}\n","                                        !rclone copy {Custom_GDTOT_Path} {Save_in}\n","                                        print(\"Successfully! replaced previous existing GDTOT Crypt with new one available in custom provided path into MCT-Config folder.\")\n","                                else:\n","                                        !rclone copy {Custom_GDTOT_Path} {Save_in}\n","                                        print(\"Successfully! copied GDTOT Crypt from custom provided path into MCT-Config folder\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Custom_GDTOT_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied GDTOT Crypt from custom provided path into MCT-Config folder.\")\n","                elif Get_Custom == \"0\":\n","                        print(\"Skipping transportation of GDTOT Crypt from custom provided path...\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No GDTOT Crypt found in custom provided path to copy!\")\n","\n","        # HubDrive Crypt\n","        if pathlib.Path(Custom_HubDrive_Path).exists():\n","                print(\"HubDrive Crypt found in custom provided path! Do you want to copy it into MCT-Config folder? 0 for No and 1 for Yes\")\n","                Get_Custom = input()\n","                if Get_Custom == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_HubDrive_Path).exists():\n","                                        print(\"Deleting previous existing HubDrive Crypt to copy new once available in custom provided path...\")\n","                                        !rclone delete {MyDrive_HubDrive_Path}\n","                                        !rclone copy {Custom_HubDrive_Path} {Save_in}\n","                                        print(\"Successfully! replaced previous existing HubDrive Crypt and copied new one available in custom provided path.\")\n","                                else:\n","                                        !rclone copy {Custom_HubDrive_Path} {Save_in}\n","                                        print(\"Successfully! copied HubDrive Crypt from custom provided path.\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Custom_HubDrive_Path} {Save_in}\n","                                print(\"Successfully! create MCT-Config folder and copied HubDrive Crypt into MCT-Config folder.\")\n","                elif Get_Custom == \"0\":\n","                        print(\"Skipping transportation of HubDrive Crypt from custom provided path into MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No HubDrive Crypt found in custom provided path to copy!\")\n","\n","# Check MyDrive root\n","if(Check_Root_MyDrive == True):\n","        # Rclone config file\n","        if pathlib.Path(Root_RcloneConfig_Path).exists():\n","                print(\"Rclone config file found in Root directory of MyDrive. Do you want to copy it to MCT-Config Folder? 0 for No and 1 for Yes\")\n","                Get_Root = input()\n","                if(Get_Root == \"1\"):\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_RcloneConfig_Path).exists():\n","                                        print(\"Deleting already available rclone.conf in MCT-Config to replace it with one available in Root directory\")\n","                                        !rclone delete {MyDrive_RcloneConfig_Path}\n","                                        !rclone copy {Root_RcloneConfig_Path} {Save_in}\n","                                        print(\"Successfully! replaced the rclone.conf file with one available in Root directory and copied it into MCT-Config folder\")\n","                                else:\n","                                        !rclone copy {Root_RcloneConfig_Path} {Save_in}\n","                                        print(\"Successfully copied rclone.conf from Root directory to MCT-Config folder!\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Root_RcloneConfig_Path} {Save_in}\n","                                print(\"Successfully created MCT-Config folder and copied rclone.conf from Root directory to MCT-Config folder!\")\n","                elif(Get_Root == \"0\"):\n","                        print(\"Skipping transportation of rcloe.conf from Root Directory to MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No rclone.conf file present in Root directory of My Drive to be copied to MCT-Config folder.\")\n","        # Service Accounts (Zip + Extracted form)\n","        if pathlib.Path(Root_SA_Path).exists() or pathlib.Path(Root_UnzippedSA_Path).exists():\n","                print(\"Service Accounts found in Root directory of MyDrive. Do you want to copy it to MCT-Config Folder? 0 for No and 1 for Yes\")\n","                Get_Root = input()\n","                if(Get_Root == \"1\"):\n","                        if pathlib.Path(Root_SA_Path).exists() and pathlib.Path(Root_UnzippedSA_Path).exists():\n","                                print(\"Root directory of MyDrive contains both accounts.zip and accounts folder in extracted form! Choose anyone, 0 for accounts.zip or 1 for accounts folder\")\n","                                Choose_form = input()\n","                                if Choose_form == \"0\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                !rclone copy {Root_SA_Path} {Save_in}\n","                                                print(\"Successfully! copied accounts.zip from Root directory to MCT-Config folder in MyDrive.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !rclone copy {Root_SA_Path} {Save_in}\n","                                                print(\"Successfully! created MCT-Config folder and copied accounts.zip from Root directory to MCT-Config folder in MyDrive.\")\n","                                elif Choose_form == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip in MCT-Config to copy from one available in Root directory.\")\n","                                                        time.sleep(3)\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                        print(\"Successfully! converted accounts folder into zip,replaced already existing accounts.zip and copied to MCT-Config folder!\")\n","                                                else:\n","                                                        !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                        print(\"Successfully converted accounts folder into zip and copied into MCT-Config folder.\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                print(\"Successfully created MCT-Config folder, converted accounts folder into zip and copied it into MCT-Config.\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        elif pathlib.Path(Root_SA_Path).exists():\n","                                print(\"Root directory of MyDrive contains Service Accounts in accounts.zip form! Do you want to copy it to MCT-Config folder? 0 for No and 1 for Yes\")\n","                                Get_Root = input()\n","                                if Get_Root == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip in MCT-Config to copy accounts.zip from Root directory...\")\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !rclone copy {Root_SA_Path} {Save_in}\n","                                                        print(\"Successfully replaced accounts.zip already available in MCT-Config with one available in Root directory!\")\n","                                                else:\n","                                                        !rclone copy {Root_SA_Path} {Save_in}\n","                                                        print(\"Successfully copied accounts.zip from Root directory to MCT-Config folder!\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !rclone copy {Root_SA_Path} {Save_in}\n","                                                print(\"Successfully created MCT-Config folder and copied accounts.zip from Root directory to MCT-Config folder.\")\n","                                elif Get_Root == \"0\":\n","                                        print(\"Skipping transportation of Service Accounts (accounts.zip) from Root directory to MCT-Config folder.\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        elif pathlib.Path(Root_UnzippedSA_Path).exists():\n","                                print(\"Service Accounts found in the Root directory of My Drive in extracted form! Do you want to copy them in MCT-Config folder? 0 for No and 1 for Yes\")\n","                                Get_Root = input()\n","                                if Get_Root == \"1\":\n","                                        if pathlib.Path(Save_in).exists():\n","                                                if pathlib.Path(MyDrive_SA_Path).exists():\n","                                                        print(\"Deleting already available accounts.zip in MCT-Config to copy accounts.zip from Root directory...\")\n","                                                        time.sleep(5)\n","                                                        !rclone delete {MyDrive_SA_Path}\n","                                                        !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                        print(\"Successfully converted accounts folder into zip, replaced already existing once and copied it to MCT-Config folder!\")\n","                                                else:\n","                                                        !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                        print(\"Successfully converted accounts folder into zip and copied it into MCT-Config folder!\")\n","                                        else:\n","                                                !rclone mkdir {Save_in}\n","                                                !zip f\"{Save_in}accounts\" {Root_UnzippedSA_Path}\n","                                                print(\"Successfully created MCT-Config folder, converted accounts folder into zip and copied it to MCT-Config folder!\")\n","                                elif Get_Root == \"0\":\n","                                        print(\"Skipping transportation of Service Accounts (Extracted form) from Root directory to MCT-Config folder.\")\n","                                else:\n","                                        sys.exit(Input_Error[1])\n","                        else:\n","                                print(\"No Service accounts either in accounts.zip or in extracted form present in Root directory of MyDrive to copy into MCT-Config folder.\")\n","                elif(Get_Root == \"0\"):\n","                        print(\"Skipping transportation of Service Accounts to MCT-Config folder!\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No Service Accounts available in Root directory of MyDrive to transport to MCT-Config folder.\")\n","        # MEGA Credentials\n","        if pathlib.Path(Root_MEGAID_Path).exists() and pathlib.Path(Root_MEGAPASS_Path).exists():\n","                print(\"MEGA Credentials found in Root directory of MyDrive! Do you want to copy it into MCT-Config? 0 for No and 1 for Yes\")\n","                Get_Root = input()\n","                if(Get_Root == \"1\"):\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_MEGAConfig_Path).exists() and pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                                        print(\"Deleting previous existing MEGA Credentials to replace them with the one available in Root directory of My Drive.\")\n","                                        time.sleep(5)\n","                                        !rclone delete {MyDrive_MEGAID_Path}\n","                                        !rclone delete {MyDrive_MEGAConfig_Path}\n","                                        !rclone copy {Root_MEGAID_Path} {Save_in}\n","                                        !rclone copy {Root_MEGAPASS_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA Credentials (2) and copied credentials from Root directory into MCT-Config folder!\")\n","                                elif pathlib.Path(MyDrive_MEGAConfig_Path).exists():\n","                                        print(\"Deleting previous existing MEGA Password to replace it with the one available in Root directory of My Drive.\")\n","                                        !rclone delete {MyDrive_MEGAConfig_Path}\n","                                        !rclone copy {Root_MEGAID_Path} {Save_in}\n","                                        !rclone copy {Root_MEGAPASS_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA Password (1) and copied credentials from Root directory into MCT-Config folder!\")\n","                                elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                                        print(\"Deleting previous existing MEGA ID to replace it with the one available in Root directory of My Drive.\")\n","                                        !rclone delete {MyDrive_MEGAID_Path}\n","                                        !rclone copy {Root_MEGAID_Path} {Save_in}\n","                                        !rclone copy {Root_MEGAPASS_Path} {Save_in}\n","                                        print(\"Successfully! replaced MEGA ID (1) and copied credentials from Root directory into MCT-Config folder.\")\n","                                else:\n","                                        !rclone copy {Root_MEGAID_Path} {Save_in}\n","                                        !rclone copy {Root_MEGAPASS_Path} {Save_in}\n","                                        print(\"Successfully! copied the MEGA credentials from Root directory into MCT-Config folder\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Root_MEGAID_Path} {Save_in}\n","                                !rclone copy {Root_MEGAPASS_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied MEGA credentials from Root directory of My Drive to MCT-Config folder.\")\n","                elif(Get_Root == \"0\"):\n","                        print(\"Skipping transportation of MEGA credentials to MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        elif pathlib.Path(Root_MEGAID_Path).exists():\n","                print(\"MEGA ID exist but MEGA Password is missing in Root directory of My Drive! Do you want to save password for that existing ID? 0 for No and 1 for Yes\")\n","                Mitigate_Error = input()\n","                if(Mitigate_Error == \"1\"):\n","                        with open(Root_MEGAID_Path,\"r\") as file:\n","                                MEGA_ID = file.read().strip()\n","                        print(MEGA_ID)\n","                        print(\"Enter Password for ID existing in Root directory, written above!\")\n","                        MEGA_PASS = input()\n","                        if MEGA_PASS == \"\":\n","                                sys.exit(Input_Error[2])\n","                        else:\n","                                with open(\"MEGA-PASS.txt\",\"w\") as file:\n","                                        file.write(MEGA_PASS)\n","                        print(\"Successfully! mitigated the missing MEGA Password Error.\")\n","                elif(Mitigate_Error == \"0\"):\n","                        print(\"Since, Error can't be mitigated! Skipping transportation of MEGA credentials from Root directory of My Drive into MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        elif pathlib.Path(Root_MEGAPASS_Path).exists():\n","                print(\"MEGA Password exist but MEGA ID is missing in Root directory of My Drive!\")\n","                print(\"MEGA Password can't be shown due to safety reasons, hence force skipping...\")\n","        else:\n","                print(\"No MEGA Credentials to transport from Root directory of My Drive into MCT-Config.\")\n","        # GDTOT Crypt\n","        if pathlib.Path(Root_GDTOT_Path).exists():\n","                print(\"GDTOT Crypt found in Root directory of My Drive! Do you want to copy it into MCT-Config folder? 0 for No and 1 for Yes\")\n","                Get_Root = input()\n","                if Get_Root == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_GDTOT_Path).exists():\n","                                        print(\"Deleting previous existing GDTOT Crypt from MCT-Config folder to replace with one available in Root directory of My Drive.\")\n","                                        !rclone delete {MyDrive_GDTOT_Path}\n","                                        !rclone copy {Root_GDTOT_Path} {Save_in}\n","                                        print(\"Successfully! replaced GDTOT Crypt and copied into MCT-Config folder!\")\n","                                else:\n","                                        !rclone copy {Root_GDTOT_Path} {Save_in}\n","                                        print(\"Successfully! copied GDTOT Crypt into MCT-Config!\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone {Root_GDTOT_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied GDTOT-Crypt into MCT-Config folder!\")\n","                elif Get_Root == \"0\":\n","                        print(\"Skipping transportation of GDTOT Crypt from Root directory of My Drive to MCT-Config folder.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No GDTOT Crypt to transport from Root directory of My Drive into MCT-Config folder.\")\n","        # HubDrive Crypt\n","        if pathlib.Path(Root_HubDrive_Path).exists():\n","                print(\"HubDrive/DriveHub Crypt found in Root directory of My Drive! Do you want to copy it into MCT-Config folder? 0 for No and 1 for Yes\")\n","                Get_Root == input()\n","                if Get_Root == \"1\":\n","                        if pathlib.Path(Save_in).exists():\n","                                if pathlib.Path(MyDrive_HubDrive_Path).exists():\n","                                        print(\"Deleting previous existing HubDrive or DriveHub Crypt from MCT-Config folder to replace with one available in Root directory of My Drive.\")\n","                                        !rclone delete {MyDrive_HubDrive_Path}\n","                                        !rclone copy {Root_HubDrive_Path} {Save_in}\n","                                        print(\"Successfully! replaced the HubDrive/DriveHub crypt and copied into MCT-Config folder!\")\n","                                        print(\"Import from MCT-Config:\")\n","                                else:\n","                                        !rclone copy {Root_HubDrive_Path} {Save_in}\n","                                        print(\"Successfully! copied HubDrive/DriveHub Crypt from Root directory of My Drive into MCT-Config folder.\")\n","                                        print(\"Import from MCT-Config:\")\n","                        else:\n","                                !rclone mkdir {Save_in}\n","                                !rclone copy {Root_HubDrive_Path} {Save_in}\n","                                print(\"Successfully! created MCT-Config folder and copied HubDrive/DriveHub crypt into MCT-Config folder.\")\n","                                print(\"Import from MCT-Config:\")\n","                elif Get_Root == \"0\":\n","                        print(\"Skipping transportation of HubDrive/DriveHub crypt from the Root directory of My Drive into MCT-Config folder...\")\n","                        print(\"Import from MCT-Config:\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                print(\"No HubDrive/DriveHub Crypt to restore from Root directory of My Drive into MCT-Config folder.\")\n","                print(\"Import from MCT-Config:\")\n","\n","# Check Restore point\n","if pathlib.Path(Save_in).exists():\n","        print(\"Restore point available!\")\n","else:\n","        sys.exit(Restore_Error[1])\n","\n","# Service Accounts\n","if pathlib.Path(Local_SA_Path).exists():\n","        print(\"Service Accounts already exist in local runtime & configured! Do you want to replace them using one available in your Google Drive's My Drive (MCT-Config folder)? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if(Replace_Old == \"1\"):\n","                if pathlib.Path(MyDrive_SA_Path).exists():\n","                        !rclone purge \"/content/accounts/\"\n","                        !rclone delete \"/content/accounts.zip\"\n","                        !rclone copy {MyDrive_SA_Path} \"/content/\"\n","                        !unzip {Local_SA_Path} -d \"/content/\"\n","                        output.clear()\n","                        print(\"Successfully restored & replaced the Service Accounts!\")\n","                else:\n","                        print(Restore_Error[2])\n","        elif(Replace_Old == \"0\"):\n","                print(\"Skipping restoring Service Accounts...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","else:\n","        if pathlib.Path(MyDrive_SA_Path).exists():\n","                !rclone copy {MyDrive_SA_Path} \"/content/\"\n","                !unzip {Local_SA_Path} -d \"/content/\"\n","                output.clear()\n","                print(\"Successfully restored Service Accounts\")\n","        else:\n","                print(\"No Service Accounts in My Drive to restore.\")\n","\n","# Rclone config\n","if pathlib.Path(Local_RcloneConfig_Path).exists():\n","        print(\"Rclone config file already exits in local runtime! Do you want to replace it using one available in Google Drive's My Drive (MCT-Config folder)? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if(Replace_Old == \"1\"):\n","                if pathlib.Path(MyDrive_RcloneConfig_Path).exists():\n","                        !rclone delete {Local_RcloneConfig_Path}\n","                        !rclone copy {MyDrive_RcloneConfig_Path} \"/root/.config/rclone/\"\n","                        print(\"Successfully restored & replaced the Rclone config file!\")\n","                else:\n","                        print(\"No Rclone config file available in My Drive to restore!\")\n","        elif(Replace_Old == \"0\"):\n","                print(\"Skipping restoring Rclone config file.\")\n","        else:\n","                sys.exit(Input_Error[1])\n","else:\n","        if pathlib.Path(MyDrive_RcloneConfig_Path).exists():\n","                !rclone copy {MyDrive_RcloneConfig_Path} \"/root/.config/rclone/\"\n","                print(\"Successfully restored Rclone config file.\")\n","        else:\n","                print(\"No Rclone config file in My Drive to restore.\")\n","\n","# GDTOT-Crypt\n","if pathlib.Path(Local_GDTOT_Path).exists():\n","        print(\"GDTOT Crypt already exist in local runtime! Do you want to replace it using one available in Google Drive's My Drive (MCT-Config folder)? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if(Replace_Old == \"1\"):\n","                if pathlib.Path(MyDrive_GDTOT_Path).exists():\n","                        !rclone delete {Local_GDTOT_Path}\n","                        !rclone copy {MyDrive_GDTOT_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the GDTOT Crypt!\")\n","                else:\n","                        print(\"No GDTOT Crypt available in My Drive to restore!\")\n","        elif(Replace_Old == \"0\"):\n","                print(\"Skipping restoring GDTOT Crypt...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","else:\n","        if pathlib.Path(MyDrive_GDTOT_Path).exists():\n","                !rclone copy {MyDrive_GDTOT_Path} \"/content/\"\n","                print(\"Successfully restored GDTOT Crypt.\")\n","        else:\n","                print(\"No GDTOT Crypt in My Drive to restore.\")\n","\n","# HubDrive/DriveHub Crypt\n","if pathlib.Path(Local_HubDrive_Path).exists():\n","        print(\"HubDrive/DriveHub Crypt already exist in local runtime! Do you want to replace it using one available in your Google Drive's My Drive (MCT-Config folder)? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if(Replace_Old == \"1\"):\n","                if pathlib.Path(MyDrive_HubDrive_Path).exists():\n","                        !rclone delete {Local_HubDrive_Path}\n","                        !rclone copy {MyDrive_HubDrive_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the HubDrive Crypt!\")\n","                else:\n","                        print(\"No HubDrive/DriveHub Crypt available in My Drive to restore!\")\n","        elif(Replace_Old == \"0\"):\n","                print(\"Skipping restoring HubDrive/DriveHub Crypt...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","else:\n","        if pathlib.Path(MyDrive_HubDrive_Path).exists():\n","                !rclone copy {MyDrive_HubDrive_Path} \"/content/\"\n","                print(\"Successfully restored HubDrive/DriveHub Crypt.\")\n","        else:\n","                print(\"No HubDrive/DriveHub Crypt in My Drive to restore.\")\n","\n","# MEGA Credentials\n","if pathlib.Path(Local_MEGAConfig_Path).exists() and pathlib.Path(Local_MEGAID_Path).exists():\n","        print(f\"MEGA Account Credentials already exist in local runtime! Do you want to replace them from one available in your {Saved_in}? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if(Replace_Old == \"1\"):\n","                if pathlib.Path(MyDrive_MEGAConfig_Path).exists() and pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                        !rclone delete {Local_MEGAConfig_Path}\n","                        !rclone delete {Local_MEGAID_Path}\n","                        !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                        !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                        !rclone copy {Local_MEGAConfig_Path} {Save_in}\n","                        !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                elif pathlib.Path(MyDrive_MEGAConfig_Path).exists():\n","                        print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                        !rclone copy {Local_MEGAID_Path} {Save_in}\n","                        !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                else:\n","                        print(\"No MEGA Account Credentials available in your Google Drive's My Drive to restore!\")\n","        elif(Replace_Old == \"0\"):\n","                print(\"Skipping restoring MEGA Credentials...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","elif pathlib.Path(Local_MEGAID_Path).exists():\n","        print(f\"MEGA ID already exist in local runtime! Do you want to replace both MEGA ID and Password from one available in your {Saved_in}? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if Replace_Old == \"1\":\n","                if pathlib.Path(MyDrive_MEGAConfig_Path).exists() and pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                        !rclone delete {Local_MEGAID_Path}\n","                        !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                        !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA ID in {Saved_in}, but MEGA Password is missing! Do you want to save password for existing MEGA ID? 0 for No and 1 for Yes:\")\n","                        Mitigate_Error = input()\n","                        if Mitigate_Error == \"1\":\n","                                with open(MyDrive_MEGAID_Path,\"r\") as file:\n","                                        MEGA_ID = file.read().strip()\n","                                print(MEGA_ID)\n","                                print(\"Enter Password for MEGA ID as shown above:\")\n","                                MEGA_PASS = input()\n","                                if MEGA_PASS == \"\":\n","                                        sys.exit(Input_Error[2])\n","                                else:\n","                                        with open(\"MEGA-PASS.txt\",\"w\") as file:\n","                                                file.write(MEGA_PASS)\n","                                        !rclone copy {Local_MEGAConfig_Path} {Save_in}\n","                                        print(\"Successfully mitigated missing MEGA Password Error.\")\n","                        elif Mitigate_Error == \"0\":\n","                                print(\"Since, missing Password Error can't be mitigated! skipping restoring MEGA Credentials.\")\n","                        else:\n","                                sys.exit(Input_Error[1])\n","                elif pathlib.Path(MyDrive_MEGAConfig_Path).exists():\n","                        print(f\"Found MEGA Password in {Saved_in}, restoring...\")\n","                        !rclone copy {Local_MEGAID_Path} {Save_in}\n","                        !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                else:\n","                        print(\"No MEGA Account Credentials available in your Google Drive's My Drive to restore!\")\n","        elif Replace_Old == \"0\":\n","                print(\"Skipping restoring MEGA Credentials...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","elif pathlib.Path(Local_MEGAConfig_Path).exists():\n","        print(f\"MEGA Password already exist in connected runtime! Do you want to replace both MEGA ID and MEGA Password from one available in your {Saved_in}? 0 for No and 1 for Yes:\")\n","        Replace_Old = input()\n","        if Replace_Old == \"1\":\n","                if pathlib.Path(MyDrive_MEGAConfig_Path).exists() and pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                        !rclone delete {Local_MEGAConfig_Path}\n","                        !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                        !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                        print(f\"Found MEGA ID in {Saved_in}, restoring...\")\n","                        !rclone copy {Local_MEGAConfig_Path} {Save_in}\n","                        !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                        print(\"Successfully restored & replaced the MEGA Credentials!\")\n","                elif pathlib.Path(MyDrive_MEGAConfig_Path).exists():\n","                        print(f\"MEGA ID found in {Saved_in}, but MEGA Password is missing!\")\n","                        print(\"Since MEGA Password can't be shown due to safety reason, skipping restoring...\")\n","                else:\n","                        print(\"No MEGA Account Credentials available in your Google Drive's My Drive to restore!\")\n","        elif Replace_Old == \"0\":\n","                print(\"Skipping restoring MEGA Credentials...\")\n","        else:\n","                sys.exit(Input_Error[1])\n","else:\n","        if pathlib.Path(MyDrive_MEGAConfig_Path).exists() and pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                print(f\"Found MEGA Credentials in {Saved_in}, restoring...\")\n","                !rclone copy {MyDrive_MEGAConfig_Path} \"/content/\"\n","                !rclone copy {MyDrive_MEGAID_Path} \"/content/\"\n","                print(\"Successfully restored & replaced the MEGA Credentials!\")\n","        elif pathlib.Path(MyDrive_MEGAID_Path).exists():\n","                print(f\"MEGA ID found in {Saved_in}, but MEGA Password is missing! Do you want to save password for existing MEGA ID? 0 for No and 1 for Yes:\")\n","                Mitigate_Error = input()\n","                if Mitigate_Error == \"1\":\n","                        with open(MyDrive_MEGAID_Path,\"r\") as file:\n","                                MEGA_ID = file.read().strip()\n","                        print(MEGA_ID)\n","                        print(\"Enter Password for MEGA ID as shown above:\")\n","                        MEGA_PASS = input()\n","                        if MEGA_PASS == \"\":\n","                                sys.exit(Input_Error[2])\n","                        else:\n","                                with open(\"MEGA-PASS.txt\",\"w\") as file:\n","                                        file.write(MEGA_PASS)\n","                                !rclone copy {Local_MEGAConfig_Path} {Save_in}\n","                                print(\"Successfully mitigated missing MEGA Password Error.\")\n","                elif Mitigate_Error == \"0\":\n","                        print(\"Since, missing Password Error can't be mitigated! skipping restoring MEGA Credentials.\")\n","                else:\n","                        sys.exit(Input_Error[1])\n","        elif pathlib.Path(MyDrive_MEGAConfig_Path).exists():\n","                print(f\"MEGA ID found in {Saved_in}, but MEGA Password is missing!\")\n","                print(\"Since MEGA Password can't be shown due to safety reason, skipping restoring...\")\n","        else:\n","                print(\"No MEGA Account Credentials available in your Google Drive's My Drive to restore!\")\n","\n","# Export Configurations\n","if Custom_Export_Path == True:\n","        print(\"Preparing for Export...\")\n","\n","        # Rclone conf file\n","        if pathlib.Path(Local_RcloneConfig_Path).exists():\n","                print(\"Exporting rclone.conf file...\")\n","                !rclone copy {Local_RcloneConfig_Path} {Export_To}\n","                print(\"Exported rclone.conf file.\")\n","        else:\n","                if pathlib.Path(MyDrive_RcloneConfig_Path).exists():\n","                        print(f\"Not found rclone.conf file in connected runtime but available in {Saved_in}, Do you want to export using one available in MyDrive? 0 for No and 1 for Yes\")\n","                        Export_from_MyDrive = input()\n","                        if Export_from_MyDrive == \"1\":\n","                                print(\"Exporting rclone.conf file using MyDrive\")\n","                                !rclone copy {MyDrive_RcloneConfig_Path} {Export_To}\n","                                print(\"Exported rclone.conf file using MyDrive.\")\n","                        elif Export_from_MyDrive == \"0\":\n","                                print(\"Skipping Export of rclone.conf file\")\n","                        else:\n","                                sys.exit(Input_Error[1])\n","                else:\n","                        print(\"Not found rclone.conf file in connected runtime or in MyDrive\")\n","\n","        # Service Accounts\n","        if pathlib.Path(Local_SA_Path).exists():\n","                print(\"Exporting Service Accounts (accounts.zip)...\")\n","                !rclone copy {Local_SA_Path} {Export_To}\n","                print(\"Exported Service Accounts (accounts.zip) in zipped form.\")\n","        else:\n","                if pathlib.Path(MyDrive_SA_Path).exists():\n","                        print(f\"Not found Service Accounts (accounts.zip) in connected runtime but available in {Saved_in}, Do you want to export using one available in MyDrive? 0 for No and 1 for Yes\")\n","                        Export_from_MyDrive = input()\n","                        if Export_from_MyDrive == \"1\":\n","                                print(\"Exporting Service Accounts (accounts.zip) using MyDrive\")\n","                                !rclone copy {MyDrive_SA_Path} {Export_To}\n","                                print(\"Exported Service Accounts (accounts.zip) using MyDrive\")\n","                        elif Export_from_MyDrive == \"0\":\n","                                print(\"Skipping Export of Service Accounts (accounts.zip).\")\n","                        else:\n","                                sys.exit(Input_Error[1])\n","                else:\n","                        print(\"Not found Service Accounts in connected runtime or in MyDrive.\")\n","\n","        # MEGA Credentials\n","        if pathlib.Path(Local_MEGAID_Path).exists() and pathlib.Path(Local_MEGAConfig_Path).exists():\n","                print(\"Exporting MEGA Credentials...\")\n","                !rclone copy {Local_MEGAID_Path} {Export_To}\n","                !rclone copy {Local_MEGAConfig_Path} {Export_To}\n","                print(\"Exported MEGA Credentials.\")\n","        elif pathlib.Path(Local_MEGAID_Path).exists():\n","                print(\"MEGA Credentials can't be exported because only MEGA ID exist and MEGA Password is missing in current connected runtime.\")\n","        elif pathlib.Path(Local_MEGAConfig_Path).exists():\n","                print(\"MEGA Credentials can't be exported because only MEGA Password exist and MEGA ID is missing in current connected runtime.\")\n","        else:\n","                print(\"No MEGA Credentials found in current connected runtime to initiate export.\")\n","\n","        # GDTOT Crypt\n","        if pathlib.Path(Local_GDTOT_Path).exists():\n","                print(\"Exporting GDTOT Crypt...\")\n","                !rclone copy {Local_GDTOT_Path} {Export_To}\n","                print(\"Exported GDTOT Crypt.\")\n","        else:\n","                if pathlib.Path(MyDrive_GDTOT_Path).exists():\n","                        print(f\"GDTOT Crypt not found in connected runtime but available in {Saved_in}, Do you want to export using one available in MyDrive? 0 for No and 1 for Yes\")\n","                        Export_from_MyDrive = input()\n","                        if Export_from_MyDrive == \"1\":\n","                                print(\"Exporting GDTOT Crypt using MyDrive.\")\n","                                !rclone copy {MyDrive_GDTOT_Path} {Export_To}\n","                                print(\"Exported GDTOT Crypt using MyDrive.\")\n","                        elif Export_from_MyDrive == \"0\":\n","                                print(\"Skipping export of GDTOT Crypt.\")\n","                        else:\n","                                sys.exit(Input_Error[1])\n","                else:\n","                        print(\"No GDTOT Crypt found in connected runtime or MyDrive to export.\")\n","\n","        # HubDrive Crypt\n","        if pathlib.Path(Local_HubDrive_Path).exists():\n","                print(\"Exporting HubDrive Crypt...\")\n","                !rclone copy {Local_HubDrive_Path} {Export_To}\n","                print(\"Exported HubDrive Crypt.\")\n","        else:\n","                if pathlib.Path(MyDrive_HubDrive_Path).exists():\n","                        print(f\"HubDrive Crypt not found in connected runtime but available in {Saved_in}, Do you want to export using one available in MyDrive? 0 for No and 1 for Yes\")\n","                        Export_from_MyDrive = input()\n","                        if Export_from_MyDrive == \"1\":\n","                                print(\"Exporting HubDrive Crypt using MyDrive.\")\n","                                !rclone copy {MyDrive_HubDrive_Path} {Export_To}\n","                                print(\"Exported HubDrive Crypt using MyDrive.\")\n","                        elif Export_from_MyDrive == \"0\":\n","                                print(\"Skipping export of HubDrive Crypt.\")\n","                        else:\n","                                sys.exit(Input_Error[1])\n","                else:\n","                        print(\"No HubDrive Crypt found in connected runtime or MyDrive to export.\")\n"],"metadata":{"cellView":"form","id":"PUyDrhZ5mi2F","executionInfo":{"status":"ok","timestamp":1671000227638,"user_tz":-180,"elapsed":27015,"user":{"displayName":"","userId":""}},"outputId":"14636993-5538-4431-f3b9-2c1e66998894","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["MCT Tool is updated! v4.4.8\n","\n","\n","Rclone config file found in Root directory of MyDrive. Do you want to copy it to MCT-Config Folder? 0 for No and 1 for Yes\n","1\n","Deleting already available rclone.conf in MCT-Config to replace it with one available in Root directory\n","2022/12/14 06:43:46 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults\n","2022/12/14 06:43:46 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults\n","Successfully! replaced the rclone.conf file with one available in Root directory and copied it into MCT-Config folder\n","No Service Accounts available in Root directory of MyDrive to transport to MCT-Config folder.\n","No MEGA Credentials to transport from Root directory of My Drive into MCT-Config.\n","No GDTOT Crypt to transport from Root directory of My Drive into MCT-Config folder.\n","No HubDrive/DriveHub Crypt to restore from Root directory of My Drive into MCT-Config folder.\n","Import from MCT-Config:\n","Restore point available!\n","No Service Accounts in My Drive to restore.\n","2022/12/14 06:43:46 NOTICE: Config file \"/root/.config/rclone/rclone.conf\" not found - using defaults\n","Successfully restored Rclone config file.\n","No GDTOT Crypt in My Drive to restore.\n","No HubDrive/DriveHub Crypt in My Drive to restore.\n","No MEGA Account Credentials available in your Google Drive's My Drive to restore!\n"]}]},{"cell_type":"markdown","source":["**Using Service Accounts:<br> Just zip the \"accounts\" folder which have 100 json files and upload it using the below code. Name of zip should be ``accounts.zip``. Then copy the path of json file and use it to create Rclone Config file below. (Optional)** ***(Refer Guide for detailed help)***<br>\n","****\n","**Saving Options:**<br>\n","``Upload_Service_Accounts``**: Upload new Service Accounts.**<br>\n","``Save_Service_Accounts_MyDrive``**: Save new/existing Service Accounts to Google Drive-> My Drive**"],"metadata":{"id":"2GS2DqLNOcQ8"}},{"cell_type":"code","source":["#@markdown <br><center><img src=\"https://pluspng.com/img-png/google-cloud-logo-png-google-cloud-logo-evolution-history-and-meaning-png-1280x720.png\" height=\"150\" alt=\"Rclone-Logo' \"/></center>\n","#@markdown <center><h3><b>Using Service Accounts</b></h3></center><br>\n","import sys \n","import os \n","import requests\n","import pathlib\n","from google.colab import files, output\n","\n","# Custom Mount Point\n","try:\n","        CMP = pathlib.PurePath(Custom_Mount_Path)\n","except NameError:\n","        CMP = \"/content/drive\"\n","\n","# Config Directory\n","Config_dir = f\"{CMP}/MyDrive/\"\n","Save_in = f\"{CMP}/MyDrive/MCT-Config/\"\n","Saved_in = \"MyDrive->MCT-Config\"\n","SA_Path = \"/content/accounts.zip\"\n","\n","Path_Error = [\n","\"Path Error: One or more required path is missing! Check if you connected Google Account or not?\",\n","\"Path Error: Unable to detect accounts.zip! Please make sure your uploaded file name is accounts.zip and it is located in /content directory.\",\n","f\"Path Error: No Service Accounts to copy in {Saved_in}\"\n","]\n","\n","Update_Error = [\n","\"Unable to check for updates!\",\n","\"MCT Tool is out-dated! please update it to latest version to get new features and bug fixes.\"\n","]\n","\n","Input_Error = [\n","\"Input Error: Invalid input parameter!\"\n","]\n","\n","GA_Error = [\n","\"Google Drive Error: Google Account is not connected!\"\n","]\n","\n","update_from = \"https://www.caduceus.ml/files/MCT-Version.txt\"\n","current_version = \"v4.4.8\"\n","\n","try:\n","  latest_version = requests.get(update_from).text\n","  f = 1\n","except:\n","  print(Update_Error[0])\n","  f = 0\n","\n","if f == 1:\n","  if current_version == latest_version or latest_version == f\"{current_version}\\n\":\n","    print(f\"MCT Tool is updated! {current_version}\")\n","  else:\n","    sys.exit(Update_Error[1])\n","else:\n","  pass\n","\n","# Check Google Account (Prevent Duplicate)\n","if pathlib.Path(Config_dir).exists():\n","        pass\n","else:\n","        sys.exit(GA_Error[0])\n","\n","# Configure Directory\n","if pathlib.Path(Save_in).exists():\n","        print(\"Restore point already exist.\") \n","else:\n","        !rclone mkdir {Save_in}\n","        output.clear()\n","\n","def save_sa():\n","\t!rclone copy {SA_Path} {Save_in}\n","\t!unzip {SA_Path}  -d \"/content/\"\n","\toutput.clear()\n","\tprint(f\"Service Accounts saved in {Saved_in}.\")\n","\tprint(\"Successfully unzipped & configured your Service Accounts!\")\n","\n","# Configure Options\n","Upload_Service_Accounts = True #@param {type:\"boolean\"}\n","Save_Service_Accounts_MyDrive = True #@param {type:\"boolean\"}\n","\n","Is_Configured = 0 \n","\n","if Upload_Service_Accounts==True :\n","\tif Save_Service_Accounts_MyDrive==True :\n","\t\tprint(\"Upload accounts.zip\")\n","\t\tfiles.upload()\n","\t\tsave_sa()\n","\t\tIs_Configured = 1\n","\telif Save_Service_Accounts_MyDrive==False:\n","\t\tprint(\"Upload accounts.zip\")\n","\t\tfiles.upload()\n","\t\tif pathlib.Path(SA_Path).exists():\n","\t\t\t!unzip {SA_Path} -d \"/content/\"\n","\t\t\tprint(\"Successfully unzipped & configured your Service Accounts! You had not selected option, hence your Service Accounts will be stored for this session.\")\n","\t\t\tIs_Configured = 1\n","\t\telse:\n","\t\t\tsys.exit(Path_Error[1])\n","\t\t\tIs_Configured = 0\n","\telse:\n","\t\tIs_Configured = 0\n","\t\tsys.exit(Input_Error[0])\n","elif Upload_Service_Accounts==False:\n","\tif Save_Service_Accounts_MyDrive==True :\n","\t\tif pathlib.Path(SA_Path).exists():\n","\t\t\tsave_sa()\n","\t\telse:\n","\t\t\tprint(Path_Error[2])"],"metadata":{"id":"C8PeRSS3DwYw","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Lets Create/Edit/View/Delete your Rclone Config file:<br>``Upload_Config_File``: Upload your already made Rclone config file to use it.<br>``Save_Config_MyDrive``: To save created Rclone Config File in Google Drive's My Drive.<br>``Download_Config``: Download Created Rclone Config file in your Device.**\n"],"metadata":{"id":"GE1KvRAg2db5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"UdtGnf8hudAN"},"outputs":[],"source":["#@markdown <br><center><img src=\"https://1.bp.blogspot.com/-M5PLcSana6M/XgBHF7jUjiI/AAAAAAAAUzs/S24qhuijluwKlzIOnc2gntoI-U83ZsrJACLcBGAsYHQ/s1600/rclone_logo.png\" height=\"50\" alt=\"Rclone-Logo' \"/></center>\n","#@markdown <center><h3><b>Create/Edit/Delete Rclone Config File</b></h3></center><br>\n","from google.colab import files\n","from google.colab import output\n","import sys\n","import time\n","import pathlib\n","\n","# Setup Status\n","finish_log = \"/content/Version.log\"\n","\n","# Error Msgs\n","Setup_Error = \"Please download Setup first!\"\n","GA_Error = \"Google Drive Error: Google Account is not connected!\"\n","Invalid_Input = \"Input Error: Invalid input parameter! Please enter 0 or 1 as input.\"\n","Path_missing = \"Path Error: One or more required path is missing! Check if you connected Google Account or not?\"\n","\n","# Custom Mount Point\n","try:\n","        CMP = pathlib.PurePath(Custom_Mount_Path)\n","except NameError:\n","        CMP = \"/content/drive\"\n","\n","# Config Directory\n","Config_dir = f\"{CMP}/MyDrive/\"\n","Rclone_File_Path = \"/root/.config/rclone/\"\n","Local_RcloneConfig_Path = \"/root/.config/rclone/rclone.conf\"\n","Upload_Config_Path = \"/content/rclone.conf\"\n","Save_in = f\"{CMP}/MyDrive/MCT-Config/\"\n","Saved_in = \"MyDrive->MCT-Config\"\n","\n","# Check for Setup\n","if pathlib.Path(finish_log).exists():\n","        print(\"\")\n","else:\n","        sys.exit(Setup_Error)\n","\n","# Check Google Account\n","if pathlib.Path(Config_dir).exists():\n","  print(\"Google Drive Connected!\")\n","else:\n","  sys.exit(GA_Error)\n","\n","#@markdown ****\n","Upload_Config_File = False #@param {type:\"boolean\"} \n","Save_Config_MyDrive = True #@param {type:\"boolean\"}\n","Download_Config = False #@param {type:\"boolean\"}\n","if Upload_Config_File==True:\n","  if pathlib.Path(Local_RcloneConfig_Path).exists():\n","    print(\"Rclone conf file already exist in this Runtime! Do you want to replace it from the uploaded once? 0 for No and 1 for Yes\")\n","    Delete_existing = input()\n","    if Delete_existing == \"1\":\n","      files.upload()\n","      print(\"Deleting already existing Rclone conf file to replace it with new uploaded once...\")\n","      !rclone delete {Local_RcloneConfig_Path}\n","      if pathlib.Path(Rclone_File_Path).exists():\n","        !rclone copy {Upload_Config_Path} {Rclone_File_Path}\n","        print(\"Successfully replaced the Rclone conf file with new once!\")\n","      else:\n","        !rclone mkdir {Rclone_File_Path}\n","        files.upload()\n","        !rclone copy {Upload_Config_Path} {Rclone_File_Path}\n","        print(f\"Successfully created ({Rclone_File_Path}) and replaced the Rclone conf file with new once!\")\n","    elif Delete_existing == \"0\":\n","      print(\"Replacement Canceled!\")\n","    else:\n","      sys.exit(Invalid_Input)\n","  else:\n","    config_file = files.upload()\n","    !rclone move \"/content/rclone.conf\" \"/root/.config/rclone/\"\n","    print(\"Reading Config File\")\n","    time.sleep(2)\n","if Save_Config_MyDrive == False and Download_Config == False:\n","  print(\"Warning! You have not selected any saving options for Rclone config file. It will be automatically deleted once this Runtime disconnect.\")\n","!rclone config\n","if(Save_Config_MyDrive==True):\n","  if pathlib.Path(Save_in).exists():\n","    !rclone copy {Local_RcloneConfig_Path} {Save_in}\n","    print(f\"Successfully! saved rclone conf file in {Saved_in}\")\n","  else:\n","    !rclone mkdir {Save_in}\n","    !rclone copy {Local_RcloneConfig_Path} {Save_in}\n","    print(f\"Successfully! Created MCT-Config folder and saved rclone conf file in {Saved_in}\")\n","if(Download_Config==True):\n","  print(\"Initiating Download Request to your Browser.\")\n","  files.download(\"/root/.config/rclone/rclone.conf\")"]},{"cell_type":"markdown","source":["**Transfer Tools:**"],"metadata":{"id":"TZIKC3rl1ftr"}},{"cell_type":"markdown","source":["**Connect your Cloud Accounts, between which you want to transfer your Data! Run the Following Code. It will show the names of configured Cloud Accounts  in your Rclone Config file to mount them.**"],"metadata":{"id":"yvyL2d3y56My"}},{"cell_type":"markdown","source":["**Options:**<br>\n","`Custom_Mount_Point`**: To set Custom Mount Point.**<br>\n","`Custom_Cache_Dir`**: To set Custom Cache Directory.**"],"metadata":{"id":"tiN1FZCZchnO"}},{"cell_type":"code","source":["#@markdown <br>\n","#@markdown <center><h3><b>Connect To Cloud Accounts</b></h3></center>\n","#@markdown <br><center><img src=\"https://cdn1.iconfinder.com/data/icons/cloud-system-color-line/64/cluster-512.png\" height=\"100\" alt=\"Rclone-Logo' \"/></center>\n","#@markdown <center><b>Connect your Cloud Accounts (Through Rclone Config file!) between which you want to transfer Data!</b></center>\n","import sys, os \n","import pathlib\n","import uuid\n","import re\n","from google.colab import output\n","\n","Path_Error = [\n","\"Provided Custom Mount Point Path should be of directory/folder not a particular file.\",\n","\"Provided Custom Mount Point Path not exist.\",\n","\"Custom Mount Point Path can't be empty!\",\n","\"Provided Custom Cache Directory Path should be directory/folder not a particular file.\",\n","\"Provided Custom Cache Directory Path not exist.\",\n","\"Custom Cache Directory Path can't be empty!\"\n","]\n","\n","Config_Error = [\n","\"Rclone.conf file not exist!\",\n","\"Given remote name not exist in Rclone.conf file.\"\n","]\n","\n","Input_Error = [\n","\"Input Error: Value should be 1 or 0.\"\n","]\n","\n","config_file = \"/root/.config/rclone/rclone.conf\"\n","\n","def Mount():\n","  os.makedirs(Mount_Point, exist_ok=True)\n","  # Add : to define the entered value as remote\n","  !rclone mount {remote}: {Mount_Point} --user-agent 'Mozilla' --buffer-size 256M --transfers 10 --vfs-cache-mode minimal --vfs-read-chunk-size 500M --vfs-cache-max-size 50G --vfs-cache-max-age 0h0m1s --vfs-cache-poll-interval 0m1s --cache-dir {Cache_dir} --allow-other --daemon\n","  if pathlib.Path(Mount_Point).is_dir():\n","    print(f\"Mounted Successfully! {Mount_Point}\")\n","  else:\n","    print(f\"Unable to Mount! {Mount_Point}\")\n","\n","def UnMount():\n","  if os.system(f\"fusermount -uz {Mount_Point}\") == 0:\n","    !rm -r {Mount_Point}\n","  else:\n","    os.system(f\"fusermount -uz {Mount_Point}\")\n","\n","if pathlib.Path(config_file).exists():\n","  pass\n","else:\n","  sys.exit(Config_Error[0])\n","\n","content = open(config_file).read()\n","avCon = re.findall(r\"^\\[(.+)\\]$\", content, re.M)\n","\n","print(f\"Available Rclone remotes:\")\n","print(*avCon)\n","remote = input(\"Enter Rclone remote name to continue:\\n\")\n","\n","if remote not in avCon:\n","  sys.exit(Config_Error[1])\n","else:\n","  pass\n","\n","# User Input\n","Custom_Mount_Point = False #@param {type:\"boolean\"}\n","Custom_Cache_Dir = False #@param {type:\"boolean\"}\n","\n","# Custom Mount Point\n","if Custom_Mount_Point == True:\n","  Mount_Path = input(\"Enter Custom Mount path:\\n\")\n","  if pathlib.Path(Mount_Path).exists():\n","    if pathlib.Path(Mount_Path).is_dir():\n","      mount_res = pathlib.PurePath(Mount_Path)\n","      Mount_Point = f\"{mount_res}/{remote}\"\n","    else:\n","      sys.exit(Path_Error[0])\n","  elif not Mount_Path:\n","    sys.exit(Path_Error[2])\n","  else:\n","    sys.exit(Path_Error[1])\n","else:\n","  Mount_Point = f\"/content/drives/{remote}\"\n","\n","# Custom Cache Directory\n","if Custom_Cache_Dir == True:\n","  Cache_dir = input(\"Enter Custom Cache Directory path:\\n\")\n","  if pathlib.Path(Cache_dir).exists():\n","    if pathlib.Path(Cache_dir).is_dir():\n","      cache_res = pathlib.PurePath(Cache_dir)\n","      Cache_dir = f\"{cache_res}/{remote}\"\n","    else:\n","      sys.exit(Path_Error[3])\n","  elif not Cache_dir:\n","    sys.exit(Path_Error[5])\n","  else:\n","    sys.exit(Path_Error[4])\n","else:\n","  Cache_dir = \"/content/temp/Rclone\"\n","\n","# CMP and CCD can be same (auto change due to {remote}) but CCD should not be inside CMP or vice-versa\n","# Special Check for this will be implemented\n","\n","Action = input(\"Select Action: 1 for Mount and 0 for Unmount:\\n\")\n","if Action == \"1\":\n","  Mount()\n","elif Action == \"0\":\n","  UnMount()\n","else:\n","  sys.exit(Input_Error[0])\n","\n","# Old died Code (Widget)\n","# --Code--\n","#import os\n","#from IPython.display import HTML, clear_output\n","#import uuid\n","#import ipywidgets as widgets\n","#from google.colab import output\n","#import re\n","\n","#class MakeButton(object):\n","#  def __init__(self, title, callback, style):\n","#    self._title = title\n","#    self._callback = callback\n","#    self._style = style\n","#  def _repr_html_(self):\n","#    callback_id = 'button-' + str(uuid.uuid4())\n","#    output.register_callback(callback_id, self._callback)\n","#    if self._style != \"\":\n","#      style_html = \"p-Widget jupyter-widgets jupyter-button widget-button mod-\" + self._style\n","#    else:\n","#      style_html = \"p-Widget jupyter-widgets jupyter-button widget-button\"\n","#    template = \"\"\"<button class=\"{style_html}\" id=\"{callback_id}\">{title}</button>\n","#        <script>\n","#          document.querySelector(\"#{callback_id}\").onclick = (e) => {{\n","#            google.colab.kernel.invokeFunction('{callback_id}', [], {{}})\n","#            e.preventDefault();\n","#          }};\n","#        </script>\"\"\"\n","#    html = template.format(title=self._title, callback_id=callback_id, style_html=style_html)\n","#    return html\n","#  \n","#def ShowAC():\n","#  clear_output(wait=True)\n","#  display(\n","#      widgets.HBox(\n","#          [widgets.VBox(\n","#              [widgets.HTML(\n","#                  '''<h3 style=\"font-family:Trebuchet MS;color:#4f8bd6;margin-top:0px;\">\n","#                  Rclone available config...</h3>\n","#                  '''\n","#                  ),\n","#               mountNam]\n","#               )\n","#          ]\n","#          )\n","#      )\n","#\n","# display(HTML(\"<br>\"), MakeButton(\"Mount\", MountCMD, \"primary\"),\n","#          MakeButton(\"Unmount\", unmountCMD, \"danger\"))\n","#content = open(\"/root/.config/rclone/rclone.conf\").read()\n","#avCon = re.findall(r\"^\\[(.+)\\]$\", content, re.M)\n","#mountNam = widgets.Dropdown(options=avCon)\n","#cache_path=\"/content/temp/rCloneTemp\"\n","#def MountCMD():\n","#    mPoint = f\"/content/drives/{mountNam.value}\"\n","#    os.makedirs(mPoint, exist_ok=True)\n","#    !rclone mount $mountNam.value: $mPoint --user-agent 'Mozilla' --buffer-size 256M --transfers 10 --vfs-cache-mode minimal --vfs-read-chunk-size 500M --vfs-cache-max-size 50G --vfs-cache-max-age 0h0m1s --vfs-cache-poll-interval 0m1s --cache-dir '/content/temp/rCloneTemp' --allow-other --daemon \n","#\n","#    if os.path.isdir(mPoint)== True:\n","#      print(f\"Mount success! - \\t{mPoint}\")\n","#    else:\n","#      print(f\"Mount failed! - \\t{mPoint}\")\n","#\n","#def unmountCMD():\n","#  mPoint = f\"/content/drives/{mountNam.value}\"\n","#  if os.system(f\"fusermount -uz {mPoint}\") == 0:\n","#    runSh(f\"rm -r {mPoint}\")\n","#    print(f\"Unmounted success! - \\t{mPoint}\")\n","#  else:\n","#    runSh(f\"fusermount -uz {mPoint}\", output=True)\n","#\n","#ShowAC()\n","# EOF"],"metadata":{"cellView":"form","id":"Rgu4rSMi2NMr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Before Transferring your File or Folders! Run the \"Time out Preventer\" to prevent Google Colab from getting time out.**"],"metadata":{"id":"dFyz7bZgJvgI"}},{"cell_type":"code","source":["#@markdown <br><center><img src='https://miro.medium.com/max/2036/1*GW4cqNv-SIQ9BGGhssL1bQ.png' height=\"100\" alt=\"netdata\"/></center>\n","#@title <center><b>Time Out Preventer (Advanced) </b></center></strong>\n","%%capture\n","AUTO_RECONNECT = True #@param {type:\"boolean\"}\n","#@markdown **Run this code to prevent Google Colab from Timeout**\n","from os import makedirs\n","makedirs(\"/root/.config/rclone\", exist_ok = True)\n","if AUTO_RECONNECT:\n","  import IPython\n","  from google.colab import output\n","\n","  display(IPython.display.Javascript('''\n","  function ClickConnect(){\n","    btn = document.querySelector(\"colab-connect-button\")\n","    if (btn != null){\n","      console.log(\"Click colab-connect-button\"); \n","      btn.click() \n","      }\n","    \n","    btn = document.getElementById('ok')\n","    if (btn != null){\n","      console.log(\"Click reconnect\"); \n","      btn.click() \n","      }\n","    }\n","    \n","  setInterval(ClickConnect,60000)\n","  '''))"],"metadata":{"cellView":"form","id":"XWd8I18DJhrN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Now Enter the Source & Destination Address and Notification settings to get notify once your Task got Completed! To get both Address click on File Icon.**"],"metadata":{"id":"hlnd4GxV7Fux"}},{"cell_type":"code","source":["#@markdown <br>\n","#@markdown <center><img src=\"https://forum.rclone.org/uploads/default/original/2X/d/da6ccb2784ff3fa73d9339300530e0aae4d6cebd.png\" alt=\"rclone forum\" width=150></center>\n"," \n","#@markdown ---\n","source = \"\" #@param {type:\"string\"}\n","destination = \"\" #@param {type:\"string\"}\n","mode = \"copy\" #@param [\"copy\", \"copyto\", \"copyurl\", \"move\", \"moveto\", \"check\", \"sync\", \"bisync\", \"cat\", \"mkdir\",\"cleanup\", \"ls\", \"lsd\", \"lsl\", \"test makefile\",\"md5sum\", \"sha1sum\", \"size\", \"genautocomplete\", \"gendocs\", \"tree\",\"obscure\"]\n","dry_run = False #@param {type:\"boolean\"}\n","Extra_args = \"\" #@param {type:\"string\"}\n","#@markdown ---\n","Email_notification = False #@param {type:\"boolean\"}\n","logs = False #@param {type:\"boolean\"}\n","emailID = \"\" #@param {type:\"string\"}\n","password = \"\" #@param {type:\"string\"}\n","Receiver_ID = \"\" #@param {type:\"string\"}\n","#@markdown ---\n","import smtplib \n","########################################\n","args = \"--transfers 20 --checkers 20 --stats-one-line --stats=5s -v --tpslimit 95 --tpslimit-burst 40 \"\n","if mode == \"check\":\n","  args += \"--one-way \"\n","if dry_run == True:\n","    args +=\" --dry-run \"\n","if logs == True:\n","  args += \" --log-file rClone_log.txt \"\n","if Extra_args != \"\":\n","  args +=Extra_args\n","######################################\n","def runrClone():\n","  !rclone --user-agent \"Mozilla\" \"$mode\" \"$source\" \"$destination\" $args\n","  \n","def checkEmail():\n","  if (Email_notification == True and logs == False):\n","    print(\"You will receive only a notification after task has finished.\")\n","    runrClone()\n","    #Send only notification\n","     \n","    s = smtplib.SMTP('smtp.gmail.com', 587) \n","    s.starttls() \n","    s.login(emailID , password)\n","    message = \"Your rClone task has Completed!\"\n","    s.sendmail(emailID, Receiver_ID, message)\n","    print(\"Email Alert Sent!\")  \n","    s.quit()\n","  elif (Email_notification == True and logs == True):\n","    print(\"You will receive a notification with log attached after task has finished.\")\n","    runrClone()\n","    #Sending email notification with logs\n","    \n","    from email.mime.multipart import MIMEMultipart \n","    from email.mime.text import MIMEText \n","    from email.mime.base import MIMEBase \n","    from email import encoders \n","\n","    fromaddr = emailID\n","    toaddr = Receiver_ID\n","    msg = MIMEMultipart() \n","    # storing the senders email address \n","    msg['From'] = fromaddr \n","    # storing the receivers email address \n","    msg['To'] = toaddr \n","    # storing the subject \n","    msg['Subject'] = \"Colab has Finished Running your Cell\"\n","    # string to store the body of the mail \n","    body = \"Your rClone Task has Completed!\"\n","\n","    msg.attach(MIMEText(body, 'plain'))\n","    filename = \"rClone_log.txt\"\n","    attachment = open(\"/content/rClone_log.txt\", \"rb\")\n","    p = MIMEBase('application', 'octet-stream') \n","    p.set_payload((attachment).read()) \n","    # encode into base64 \n","    encoders.encode_base64(p) \n"," \n","    p.add_header('Content-Disposition', \"attachment; filename= %s\" % filename) \n","    msg.attach(p)  \n","    s = smtplib.SMTP('smtp.gmail.com', 587) \n","    s.starttls() \n","    s.login(fromaddr, password) \n","    text = msg.as_string() \n","    s.sendmail(fromaddr, toaddr, text)\n","    print(\"Email Alert Sent with log!\")  \n","    s.quit() \n","  elif (Email_notification == False and logs == False):\n","    print(\"You will not receive any notification!!!.\")\n","    runrClone()\n","checkEmail()"],"metadata":{"cellView":"form","id":"KdX4-pL86jyw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Delete your Files/Folder/Directory from below!<br>``Delete`` This Mode will delete the content of folder or single file.<br>``Purge`` To delete whole Directory and leaving nothing behind.<br>``rmdir`` Completely Delete the given path.<br>``rmdirs`` Remove any empty directories under the path.**"],"metadata":{"id":"MszqFrsLw8cD"}},{"cell_type":"code","source":["import time\n","import sys\n","import pathlib\n","\n","# Error messages\n","Path_Error = [ \n","\"Path Error: Path can't be empty.\",\n","\"Path Error: Given path not exist.\"\n","]\n","\n","# User Input\n","Action = \"delete\" #@param [\"delete\", \"purge\", \"rmdir\", \"rmdirs\"]\n","Path = \"\" #@param {type:\"string\"} \n","Arguments = \"\" #@param {type:\"string\"}\n","\n","if pathlib.Path(Path).exists :\n","\tprint(\"Action Selected:\" + Action)\n","\tprint(\"Selected Wrong Action? You have 10 Seconds to cancel this Task.\")\n","\ttime.sleep(10)\n","\t!rclone {Action} {Path} {Arguments}\n","\tprint(\"Task completed!\")\n","else:\n","\tif not Path:\n","\t\tsys.exit(Path_Error[0])\n","\telse:\n","\t\tsys.exit(Path_Error[1])"],"metadata":{"cellView":"form","id":"ba5oxu8T5fwt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###**Special Add-ons:**"],"metadata":{"id":"hBOFYEu5Dtyl"}},{"cell_type":"markdown","source":["**Time to combine the power of Rclone with various Engines to make your hard work into effective & joyful.**"],"metadata":{"id":"RnzeE3AWzmbq"}},{"cell_type":"markdown","source":["**<font color=\"yellow\">1.You can put Source and Destination between \" \" to avoid wrong token Error. (Optional)</font>**"],"metadata":{"id":"s9mZkVmSYft7"}},{"cell_type":"code","source":["import sys\n","import requests\n","import pathlib\n","from google.colab import output\n","\n","Update_Error = [\n","\"Unable to check for updates!\",\n","\"MCT Tool is out-dated! please update it to latest version to get new features or bug fixes.\"\n","]\n","\n","update_from = \"https://www.caduceus.ml/files/MCT-Version.txt\"\n","current_version = \"v4.4.8\"\n","\n","try:\n","  latest_version = requests.get(update_from).text\n","  f = 1\n","except:\n","  print(Update_Error[0])\n","  f = 0\n","\n","if f == 1:\n","  if current_version == latest_version or latest_version == f\"{current_version}\\n\":\n","    print(f\"MCT Tool is updated! {current_version}\")\n","  else:\n","    sys.exit(Update_Error[1])\n","else:\n","  pass\n","\n","# Setup Status\n","finish_log = \"/content/Version.log\"\n","\n","# Custom Mount Point\n","try:\n","        CMP = pathlib.PurePath(Custom_Mount_Path)\n","except NameError:\n","        CMP = \"/content/drive\"\n","\n","# Config Directory\n","Config_dir = f\"{CMP}/MyDrive/\"\n","Save_in = f\"{CMP}/MyDrive/MCT-Config/\"\n","Saved_in = \"MyDrive->MCT-Config\"\n","\n","# Error Messages\n","Setup_Error = [\n","\"Please download Setup first!\"\n","]\n","\n","MEGA_Error = [\n","\"MEGA ID or Password can't be blank!\",\n","\"MEGA Credentials not found or not valid!\"\n","]\n","\n","GA_Error = [\n","\"Google Drive Error: Google Account is not connected!\"\n","]\n","\n","Input_Error = [\n","\"Input Error: Invalid input parameter! Please enter 0 or 1 as input.\",\n","\"Input_Error: Source field can't be empty.\"\n","]\n","\n","Path_Error = [\n","\"Path Error: One or more required path is missing! Check if you connected Google Account or not?\"\n","]\n","\n","Source_Error = [\n","\"Given Source path not exist!\"\n","]\n","\n","Destination_Error = [\n","\"Given Destination path not exist!\",\n","\"Destination field is empty, hence downloaded files will be moved to downloads folder.\"\n","]\n","\n","UUP_Error = [\n","\"(uup_download_linux.sh) file not exist in given Source path.\"\n","]\n","\n","# Check Google Account\n","if pathlib.Path(Config_dir).exists():\n","        print(\"Google Drive Connected!\")\n","        output.clear()\n","else:\n","        sys.exit(GA_Error[0])\n","\n","# Check for Setup\n","if pathlib.Path(finish_log).exists():\n","        print(\"\")\n","else:\n","        sys.exit(Setup_Error[0])\n","\n","# LibTorrent Initialization\n","import libtorrent as lt\n","ses = lt.session()\n","ses.listen_on(6881, 6891)\n","downloads = []\n","\n","# Configure Directory\n","if pathlib.Path(Save_in).exists():\n","        print(\"Restore point already exist.\") \n","else:\n","        !rclone mkdir {Save_in}\n","        output.clear()\n","\n","# User Input\n","Source = \"\" #@param {type:\"string\"} \n","Mode = \"YouTube Videos/Playlist & Other Sites\" #@param [\"Direct Download Links\", \"Download Links from txt file\", \"YouTube Videos/Playlist & Other Sites\", \"Magnet Links\", \"Torrent Files\", \"Upload file to Anonfiles (20GB Limit)\",\"Mirror GDTOT Links\",\"Mirror HubDrive/DriveHub Links\", \"Mirror MEGA Link\", \"UUP DUMP\"]\n","Destination = \"\" #@param {type:\"string\"} \n","Extra_args = \"\" #@param {type:\"string\"}\n","args = Extra_args\n","\n","# UUP Dump\n","sh_file = \"uup_download_linux.sh\"\n","UUP_Dir = f\"{Source}/{sh_file}\"\n","\n","# Functions\n","def GDTOT_Crypt():\n","        Old_Input = False\n","        while not Old_Input:\n","                print(\"Enter New GDTOT Crypt:\")\n","                gd_crypt = input()\n","                with open(\"GDTOT-Crypt.txt\",\"w\") as file:\n","                        file.write(gd_crypt)\n","                !rclone copy \"/content/GDTOT-Crypt.txt\" {Save_in}\n","                print(f\"Saved GDTOT Crypt in {Saved_in}.\")\n","                Old_Input = True\n","        return gd_crypt\n","\n","def HubDrive_Crypt():\n","        Old_Input = False\n","        while not Old_Input:\n","                print(\"Enter New HubDrive Crypt:\")\n","                hb_crypt = input()\n","                with open(\"HubDrive-Crypt.txt\",\"w\") as file:\n","                        file.write(hb_crypt)\n","                !rclone copy \"/content/HubDrive-Crypt.txt\" {Save_in}\n","                print(f\"Saved HubDrive Crypt in {Saved_in}.\")\n","                Old_Input = True\n","        return hb_crypt\n","\n","def Download_Mega():\n","        import sys, os, urllib.request\n","        import time\n","        import subprocess\n","        import contextlib\n","        from IPython.display import clear_output\n","        HOME = os.path.expanduser(\"~\")\n","        if not os.path.exists(f\"{HOME}/.ipython/ocr.py\"):\n","                hCode = \"https://raw.githubusercontent.com/biplobsd/\" \\\n","                \"OneClickRun/master/res/ocr.py\"\n","                urllib.request.urlretrieve(hCode, f\"{HOME}/.ipython/ocr.py\")\n","        from ocr import (\n","                runSh,\n","                loadingAn,\n","        )\n","        URL = Source\n","        OUTPUT_PATH = Destination\n","        if not OUTPUT_PATH:\n","                os.makedirs(\"downloads\", exist_ok=True)\n","                OUTPUT_PATH = \"downloads\"\n","        newlines = ['\\n', '\\r\\n', '\\r']\n","        def unbuffered(proc, stream='stdout'):\n","                stream = getattr(proc, stream)\n","                with contextlib.closing(stream):\n","                        while True:\n","                                out = []\n","                                last = stream.read(1)\n","                                if last == '' and proc.poll() is not None:\n","                                        break\n","                                while last not in newlines:\n","                                        if last == '' and proc.poll() is not None:\n","                                                break\n","                                        out.append(last)\n","                                        last = stream.read(1)\n","                                out = ''.join(out)\n","                                yield out\n","        def transfare():\n","                import codecs\n","                decoder = codecs.getincrementaldecoder(\"UTF-8\")()\n","                cmd = [\"mega-get\", URL, OUTPUT_PATH]\n","                proc = subprocess.Popen(\n","                        cmd,\n","                        stdout=subprocess.PIPE,\n","                        stderr=subprocess.STDOUT,\n","                        universal_newlines=True,\n","                )\n","                for line in unbuffered(proc):\n","                        print(line)\n","\n","        transfare()\n","\n","def Save_Credentials():\n","        Old_Input = False\n","        while not Old_Input:\n","                print(\"Enter MEGA Email ID or Username:\")\n","                MEGA_ID = input()\n","                if MEGA_ID == \"\":\n","                        print(MEGA_Error[0][0])\n","                        Save_Credentials()\n","                MEGA_PASS = input()\n","                if MEGA_PASS == \"\":\n","                        print(MEGA_Error[0][0])\n","                        Save_Credentials()\n","                with open(\"MEGA-ID.txt\",\"w\") as file:\n","                        file.write(MEGA_ID)\n","                with open(\"MEGA-PASS.txt\",\"w\") as file:\n","                        file.write(MEGA_PASS)\n","                !rclone copy \"/content/MEGA-ID.txt\" {Save_in}\n","                !rclone copy \"/content/MEGA-PASS.txt\" {Save_in}\n","                print(f\"Saved MEGA ID & Password in {Saved_in}.\")\n","                Get_Credentials()\n","                Old_Input = True\n","        return MEGA_ID, MEGA_PASS\n","\n","def Get_Credentials():\n","        from functools import wraps\n","        import errno\n","        import os\n","        import signal\n","        import subprocess\n","        import shlex\n","        class TimeoutError(Exception):\n","                pass\n","        def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):\n","                def decorator(func):\n","                        def _handle_timeout(signum, frame):\n","                                raise TimeoutError(error_message)\n","                        def wrapper(*args, **kwargs):\n","                                signal.signal(signal.SIGALRM, _handle_timeout)\n","                                signal.alarm(seconds)\n","                                try:\n","                                        result = func(*args, **kwargs)\n","                                finally:\n","                                        signal.alarm(0)\n","                                return result\n","                        return wraps(func)(wrapper)\n","                return decorator\n","        if not os.path.exists(\"/root/.ipython/ocr.py\"):\n","                from subprocess import run\n","                from shlex import split\n","                shellCmd = \"wget -qq https://raw.githubusercontent.com/biplobsd/OneClickRun/master/res/ocr.py \\\n","                -O /root/.ipython/ocr.py\"\n","                run(split(shellCmd))\n","        from ocr import runSh\n","        @timeout(10)\n","        def runShT(args):\n","                return runSh(args, output=True)\n","        if not os.path.exists(\"/usr/bin/mega-cmd\"):\n","                print(\"MEGA not installed!\")\n","        else:\n","                !pkill mega-cmd\n","        with open(\"MEGA-ID.txt\",\"r\") as file:\n","                MEGA_ID = file.read().strip()\n","        with open(\"MEGA-PASS.txt\",\"r\") as file:\n","                MEGA_PASS = file.read().strip()\n","        USERNAME = MEGA_ID\n","        PASSWORD = MEGA_PASS\n","        if not (USERNAME == \"\" or PASSWORD == \"\"):\n","                try:\n","                        runShT(f\"mega-login {USERNAME} {PASSWORD}\")\n","                except TimeoutError:\n","                        runSh('mega-whoami', output=True)\n","                Download_Mega()\n","        else:\n","                sys.exit(MEGA_Error[0][1])\n","        \n"," \n","# Task Completed Message\n","output = \"Task Completed Successfully!\"\n","\n","# Work\n","if(Mode==\"Direct Download Links\"):\n","  %cd {Destination}\n","  !aria2c {Source} {args}\n","  print(output)\n","if(Mode==\"Download Links from txt file\"):\n","  %cd {Destination}\n","  !aria2c -i {Source} {args}\n","if(Mode==\"YouTube Videos/Playlist & Other Sites\"):\n","  %cd {Destination}\n","  print(\"Using yt-dlp, video will be downloaded in max quality.\")\n","  !yt-dlp {Source} {args}\n","  print(output)\n","if(Mode==\"Magnet Links\"):\n","  params = {\"save_path\": str(Destination)}\n","\n","  while True:\n","        magnet_link = input(\"Enter Magnet Link Or Type Exit: \")\n","        if magnet_link.lower() == \"exit\":\n","                break\n","        downloads.append(\n","                lt.add_magnet_uri(ses, magnet_link, params)\n","        )\n","  import time\n","  from IPython.display import display\n","  import ipywidgets as widgets\n","\n","  state_str = [\n","        \"queued\",\n","        \"checking\",\n","        \"downloading metadata\",\n","        \"downloading\",\n","        \"finished\",\n","        \"seeding\",\n","        \"allocating\",\n","        \"checking fastresume\",\n","  ]\n","\n","  layout = widgets.Layout(width=\"auto\")\n","  style = {\"description_width\": \"initial\"}\n","  download_bars = [\n","        widgets.FloatSlider(\n","                step=0.01, disabled=True, layout=layout, style=style\n","        )\n","        for _ in downloads\n","  ]\n","  display(*download_bars)\n","\n","  while downloads:\n","        next_shift = 0\n","        for index, download in enumerate(downloads[:]):\n","                bar = download_bars[index + next_shift]\n","                if not download.is_seed():\n","                        s = download.status()\n","\n","                        bar.description = \" \".join(\n","                                [\n","                                        download.name(),\n","                                        str(s.download_rate / 1000),\n","                                        \"kB/s\",\n","                                        state_str[s.state],\n","                                ]\n","                        )\n","                        bar.value = s.progress * 100\n","                else:\n","                        next_shift -= 1\n","                        ses.remove_torrent(download)\n","                        downloads.remove(download)\n","                        bar.close() # Not Working\n","                        download_bars.remove(bar)\n","                        print(download.name(), \"complete\")\n","        time.sleep(1)\n","if(Mode==\"Torrent Files\"):\n","  from google.colab import files\n","\n","  source = files.upload()\n","  params = {\n","        \"save_path\": str(Destination),\n","        \"ti\": lt.torrent_info(list(source.keys())[0]),\n","  }\n","  downloads.append(ses.add_torrent(params))\n","  import time\n","  from IPython.display import display\n","  import ipywidgets as widgets\n","\n","  state_str = [\n","        \"queued\",\n","        \"checking\",\n","        \"downloading metadata\",\n","        \"downloading\",\n","        \"finished\",\n","        \"seeding\",\n","        \"allocating\",\n","        \"checking fastresume\",\n","  ]\n","\n","  layout = widgets.Layout(width=\"auto\")\n","  style = {\"description_width\": \"initial\"}\n","  download_bars = [\n","        widgets.FloatSlider(\n","                step=0.01, disabled=True, layout=layout, style=style\n","        )\n","        for _ in downloads\n","  ]\n","  display(*download_bars)\n","\n","  while downloads:\n","        next_shift = 0\n","        for index, download in enumerate(downloads[:]):\n","                bar = download_bars[index + next_shift]\n","                if not download.is_seed():\n","                        s = download.status()\n","\n","                        bar.description = \" \".join(\n","                                [\n","                                        download.name(),\n","                                        str(s.download_rate / 1000),\n","                                        \"kB/s\",\n","                                        state_str[s.state],\n","                                ]\n","                        )\n","                        bar.value = s.progress * 100\n","                else:\n","                        next_shift -= 1\n","                        ses.remove_torrent(download)\n","                        downloads.remove(download)\n","                        bar.close() # Seems to be not working in Colab (see https://github.com/googlecolab/colabtools/issues/726#issue-486731758)\n","                        download_bars.remove(bar)\n","                        print(download.name(), \"complete\")\n","        time.sleep(1)\n","if(Mode==\"Mirror GDTOT Links\"):\n","  import re\n","  import base64\n","  import requests\n","  from urllib.parse import urlparse, parse_qs\n","  if pathlib.Path(\"GDTOT-Crypt.txt\").exists():\n","        Old_Input = False\n","        while not Old_Input:\n","                print(\"Do you want to use saved GDTOT crypt? 0 for No & 1 for Yes\")\n","                Use_Old = input()\n","                if(Use_Old==\"1\"):\n","                        with open(\"GDTOT-Crypt.txt\",\"r\") as file:\n","                                gd_crypt = file.read().strip()\n","                        Old_Input = True\n","                elif(Use_Old==\"0\"):\n","                        gd_crypt = GDTOT_Crypt()\n","                        Old_Input = True\n","                else:\n","                        print(Input_Error[0])\n","  else:\n","        gd_crypt = GDTOT_Crypt()\n","\n","# ==========================================\n","  URL = Source\n","  print(\"Bypassing Link...\")\n","  def parse_info(res):\n","        title = re.findall(\">(.*?)<\\/h5>\", res.text)[0]\n","        info = re.findall('<td\\salign=\"right\">(.*?)<\\/td>', res.text)\n","        parsed_info = {\n","                'error': True,\n","                'message': 'Link Invalid.',\n","                'title': title,\n","                'size': info[0],\n","                'date': info[1]\n","        }\n","        return parsed_info\n","\n","# ==========================================\n","\n","  def gdtot_dl(url):\n","        client = requests.Session()\n","        client.cookies.update({ 'crypt': gd_crypt })\n","        res = client.get(url)\n","\n","        info = parse_info(res)\n","        info['src_url'] = url\n","\n","        res = client.get(f\"https://new.gdtot.top/dld?id={url.split('/')[-1]}\")\n","    \n","        try:\n","                url = re.findall('URL=(.*?)\"', res.text)[0]\n","        except:\n","                info['message'] = 'The requested URL could not be retrieved.',\n","                return info\n","\n","        params = parse_qs(urlparse(url).query)\n","    \n","        if 'msgx' in params:\n","                info['message'] = params['msgx'][0]\n","    \n","        if 'gd' not in params or not params['gd'] or params['gd'][0] == 'false':\n","                return info\n","    \n","        try:\n","                decoded_id = base64.b64decode(str(params['gd'][0])).decode('utf-8')\n","                gdrive_url = f'https://drive.google.com/open?id={decoded_id}'\n","                info['message'] = 'Success.'\n","        except:\n","                info['error'] = True\n","                return info\n","\n","        info['gdrive_link'] = gdrive_url\n","    \n","        return info\n","    \n","# ==========================================\n","\n","  info = gdtot_dl(URL)\n","  print(info)\n","if(Mode==\"Upload file to Anonfiles (20GB Limit)\"):\n","        ANONFILES_API = \"https://api.anonfiles.com/upload\"\n","        x = requests.post(ANONFILES_API, files = {'file': open(Source,'rb')},)\n","        print(\"Download link: \" + x.json()[\"data\"][\"file\"][\"url\"][\"full\"])\n","if(Mode==\"Mirror HubDrive/DriveHub Links\"):\n","        import re\n","        import requests\n","        from urllib.parse import urlparse\n","        if pathlib.Path(\"HubDrive-Crypt.txt\").exists():\n","                Old_Input = False\n","                while not Old_Input:\n","                        print(\"Do you want to use saved HubDrive crypt? 0 for No & 1 for Yes\")\n","                        Use_Old = input()\n","                        if(Use_Old==\"1\"):\n","                                with open(\"HubDrive-Crypt.txt\",\"r\") as file:\n","                                        hb_crypt = file.read().strip()\n","                                Use_Old = True\n","                        elif(Use_Old==\"0\"):\n","                                hb_crypt = HubDrive_Crypt()\n","                                Use_Old = True\n","                        else:\n","                                print(Input_Error[0])\n","        else:\n","                hb_crypt = HubDrive_Crypt()\n","\n","        url = Source\n","        hd_crypt = \"\"\n","        def parse_info(res):\n","                info_parsed = {}\n","                title = re.findall('>(.*?)<\\/h4>', res.text)[0]\n","                info_chunks = re.findall('>(.*?)<\\/td>', res.text)\n","                info_parsed['title'] = title\n","                for i in range(0, len(info_chunks), 2):\n","                        info_parsed[info_chunks[i]] = info_chunks[i+1]\n","                return info_parsed\n","\n","        def hubdrive_dl(url):\n","                client = requests.Session()\n","                client.cookies.update({'crypt': hd_crypt})\n","                res = client.get(url)\n","                info_parsed = parse_info(res)\n","                info_parsed['error'] = False\n","                up = urlparse(url)\n","                req_url = f\"{up.scheme}://{up.netloc}/ajax.php?ajax=download\"\n","                file_id = url.split('/')[-1]\n","                data = { 'id': file_id }\n","                headers = {\n","                    'x-requested-with': 'XMLHttpRequest'\n","                }\n","\n","                try:\n","                        res=client.post(req_url, headers=headers, data=data).json()['file']\n","                except: return {'error': True, 'src_url': url}\n","\n","                gd_id = re.findall('gd=(.*)', res, re.DOTALL)[0]\n","                info_parsed['gdrive_url'] = f\"https://drive.google.com/open?id={gd_id}\"\n","                info_parsed['src_url'] = url\n","\n","                return info_parsed\n","\n","        print(hubdrive_dl(url))\n","if(Mode==\"Mirror MEGA Link\"):\n","        print(\"Do you want to use your Mega Premium Accounts? 0 for No and 1 for Yes\")\n","        Use_Premium = input()\n","        if(Use_Premium==\"1\"):\n","                if pathlib.Path(\"MEGA-PASS.txt\").exists():\n","                        Old_Input = False\n","                        while not Old_Input:\n","                                print(\"Do you want to use saved MEGA Credentials? 0 for No & 1 for Yes\")\n","                                Use_Old = input()\n","                                if(Use_Old==\"1\"):\n","                                        with open(\"MEGA-ID.txt\",\"r\") as file:\n","                                                MEGA_ID = file.read().strip()\n","                                        with open(\"MEGA-PASS.txt\",\"r\") as file:\n","                                                MEGA_PASS = file.read().strip()\n","                                        Get_Credentials()\n","                                        Old_Input = True\n","                                elif(Use_Old==\"0\"):\n","                                        MEGA_ID, MEGA_PASS = Save_Credentials()\n","                                        Get_Credentials()\n","                                        Download_Mega()\n","                                        Old_Input = True\n","                                else:\n","                                        sys.exit(Input_Error[0])\n","                else:\n","                        MEGA_ID, MEGA_PASS = Save_Credentials()\n","        elif(Use_Premium==\"0\"):\n","                if(Source != \"\"):\n","                        if(Destination != \"\"):\n","                                Download_Mega()\n","                        else:\n","                                print(Destination_Error[1])\n","                                Download_Mega()\n","                else:\n","                        sys.exit(Input_Error[1])\n","        else:\n","                sys.exit(Input_Error[0])\n","\n","if Mode == \"UUP DUMP\":\n","        if pathlib.Path(Source).exists():\n","                if pathlib.Path(Destination).exists():\n","                        if pathlib.Path(Destination).is_dir() or pathlib.Path(Destination).is_mount():\n","                                if pathlib.Path(Source).is_file():\n","                                        %cd {Destination}\n","                                        !bash {Source}\n","                                        print(\"Task completed successfully!\")\n","                                else:\n","                                        if pathlib.Path(UUP_Dir).exists():\n","                                                %cd {Destination}\n","                                                !bash {UUP_Dir}\n","                                                print(\"Task completed successfully!\")\n","                                        else:\n","                                                sys.exit(UUP_Error[0])\n","                        else:\n","                                sys.exit(Dest_is_file)\n","                else:\n","                        sys.exit(Destination_Error[0])\n","        else:\n","                sys.exit(Source_Error[0])"],"metadata":{"cellView":"form","id":"FM-cwQR0D3xm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###**Packing & Extraction:**"],"metadata":{"id":"psDoa98YIwLw"}},{"cell_type":"markdown","source":["**<font color=\"yellow\">1.Put Custom Name + Source Path + Destination between \"\" to avoid wrong token Error.</font><br><font color=\"red\">2.Never put \"/\" at the end of Source_Path or Destination_Path.**"],"metadata":{"id":"e31QFePzK04k"}},{"cell_type":"code","source":["import sys, pathlib\n","from google.colab import output\n","\n","# Setup Status\n","finish_log = \"/content/Version.log\"\n","\n","# Error Messages\n","Setup_Error = [\n","\"Please download Setup first!\"\n","]\n","\n","Source_Error = [\n","\"Source field can't be empty!\",\n","\"Given Source path not exist!\"\n","]\n","\n","Destination_Error = [\n","\"Destination path can't be empty!\",\n","\"Given Destination path not exist\"\n","]\n","\n","Action_Error = [\n","\"Select a supported operation to perform!\"\n","]\n","\n","# Check for Setup\n","if pathlib.Path(finish_log).exists():\n","        pass\n","else:\n","        sys.exit(Setup_Error[0])\n","\n","# User Input\n","Action = \"Zip\" #@param [\"Zip\", \"UnZip with or without Password\", \"RaR\", \"RaR with Password\", \"UnRaR\", \"UnRaR with Password\", \"Tar\", \"UnTar\", \"Tar.gz\", \"UnTar.gz\", \"Tar.bz2\", \"UnTar.bz2\", \"Extract 7z\"]\n","Packed_Output_File_Name = \"\" #@param {type:\"string\"}\n","Source_Path = \"\" #@param {type:\"string\"}\n","Destination_Path = \"\" #@param {type:\"string\"}\n","\n","# Checks\n","if not Action:\n","  sys.exit(Action_Error[0])\n","else:\n","  pass\n","if not Source_Path:\n","  sys.exit(Source_Error[0])\n","else:\n","  if pathlib.Path(Source_Path).exists():\n","    SP = pathlib.PurePath(Source_Path)\n","  else:\n","    sys.exit(Source_Error[1])\n","if not Destination_Path:\n","  sys.exit(Destination_Error[0])\n","else:\n","  if pathlib.Path(Destination_Path).exists():\n","    DP = pathlib.PurePath(Destination_Path)\n","  else:\n","    sys.exit(Destination_Error[1])\n","if not Packed_Output_File_Name:\n","  Packed_Output_File_Name = \"CUSTOM_NAME\"\n","else:\n","  pass\n","\n","# Packing + Custom Name\n","Pack_Dest = f\"{DP}/{Packed_Output_File_Name}.zip\"\n","Tar_Dest = f\"{DP}/{Packed_Output_File_Name}.tar\"\n","Targz_Dest = f\"{DP}/{Packed_Output_File_Name}.tar.gz\"\n","Tarbz_Dest = f\"{DP}/{Packed_Output_File_Name}.tar.bz\"\n","\n","# Similarity\n","UnPack_Dest = DP\n","sz_Dest = DP\n","\n","# Task Completed Message\n","output = \"Task Completed Successfully!\"\n","\n","# Process\n","if Action==\"Zip\":\n","  !zip {Pack_Dest} {SP}\n","  print(output)\n","elif Action==\"UnZip with or without Password\":\n","  !unzip {SP} -d {UnPack_Dest}\n","  print(output)\n","elif Action==\"RaR\":\n","  !rar a {Pack_Dest} {SP}\n","  print(output)\n","elif Action==\"RaR with Password\":\n","  !rar a -p {Pack_Dest} {SP}\n","  print(output)\n","elif Action==\"UnRaR\":\n","  !unrar x {SP} {UnPack_Dest}\n","  print(output)\n","elif Action==\"UnRaR with Password\":\n","  !unrar x -Y {SP} {UnPack_Dest}\n","  print(output)\n","elif Action==\"Tar\":\n","  !tar -cvf {Tar_Dest} {SP}\n","  print(output)\n","elif Action==\"UnTar\" :\n","  !tar -xvf {SP} -C {UnPack_Dest}\n","  print(output)\n","elif Action==\"Tar.gz\":\n","  !tar -czvf {Targz_Dest} {SP}\n","  print(output)\n","elif Action==\"UnTar.gz\":\n","  !tar -xzvf {SP} -C {UnPack_Dest}\n","  print(output)\n","elif Action==\"Tar.bz2\":\n","  !tar -cjvf {Tarbz_Dest} {SP}\n","  print(output)\n","elif Action==\"UnTar.bz2\":\n","  !tar -xjvf {SP} -C {UnPack_Dest}\n","  print(output)\n","elif Action==\"Extract 7z\":\n","  !7z x {SP} -o{sz_Dest}\n","else:\n","  print(\"Invalid Operation!\")"],"metadata":{"id":"qSBmZu-iIv0V","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Advanced Task: Run Commands**"],"metadata":{"id":"3-GPORzzZXPF"}},{"cell_type":"markdown","source":["**You can run any supported Command below after downloading its setup from above!<br>List of Commands:**\n","```\n","# Putting '!' before any command is mandatory!\n","---\n","!rclone config - Enter an interactive configuration session.\n","!rclone copy - Copy files from source to dest, skipping already copied.\n","!rclone sync - Make source and dest identical, modifying destination only.\n","!rclone move - Move files from source to dest.\n","!rclone delete - Remove the contents of path.\n","!rclone purge - Remove the path and all of its contents.\n","!rclone mkdir - Make the path if it doesn't already exist.\n","!rclone rmdir - Remove the path.\n","!rclone rmdirs - Remove any empty directories under the path.\n","!rclone check - Check if the files in the source and destination match.\n","!rclone ls - List all the objects in the path with size and path.\n","!rclone lsd - List all directories/containers/buckets in the path.\n","!rclone lsl - List all the objects in the path with size, modification time and path.\n","!rclone md5sum - Produce an md5sum file for all the objects in the path.\n","!rclone sha1sum - Produce a sha1sum file for all the objects in the path.\n","!rclone size - Return the total size and number of objects in remote:path.\n","!rclone version - Show the version number.\n","!rclone cleanup - Clean up the remote if possible.\n","!rclone dedupe - Interactively find duplicate files and delete/rename them.\n","!rclone authorize - Remote authorization.\n","!rclone cat - Concatenate any files and send them to stdout.\n","!rclone copyto - Copy files from source to dest, skipping already copied.\n","!rclone genautocomplete - Output shell completion scripts for rclone.\n","!rclone gendocs - Output markdown docs for rclone to the directory supplied.\n","!rclone listremotes - List all the remotes in the config file.\n","!rclone mount - Mount the remote as a mountpoint.\n","!rclone moveto - Move file or directory from source to dest.\n","!rclone obscure - Obscure password for use in the rclone.conf\n","!rclone cryptcheck - Check the integrity of an encrypted remote.\n","!rclone about - Get quota information from the remote.\n","---\n","!yt-dlp [OPTIONS] [URL-1 URL-2 URL-3]\n","---\n","!aria2c <torrent/magnet/url>\n","```"],"metadata":{"id":"FlNn7fXbWtHz"}},{"cell_type":"markdown","source":["**Write your Code Below:**"],"metadata":{"id":"x6Dxey_8bGUJ"}},{"cell_type":"markdown","source":["**Code Read**"],"metadata":{"id":"LF3tVGmLCGxL"}},{"cell_type":"code","source":["f=open('/root/rclone1.log' , 'r')\n","print(f.read())  #<--Write Code before #"],"metadata":{"id":"k7N-XUplWuwF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671004220180,"user_tz":-180,"elapsed":334,"user":{"displayName":"","userId":""}},"outputId":"00af1850-fd2f-4044-d392-785a4767b2f2"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["2022/12/14 06:44:55 INFO  : Starting transaction limiter: max 12 transactions/s with burst 1\n","2022/12/14 06:45:23 INFO  : Signal received: interrupt\n","2022/12/14 06:45:23 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 06:45:23 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 06:45:23 INFO  : Exiting...\n","2022/12/14 06:57:26 INFO  : Starting transaction limiter: max 12 transactions/s with burst 1\n","2022/12/14 06:58:15 INFO  : Signal received: interrupt\n","2022/12/14 06:58:15 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 06:58:15 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 06:58:15 INFO  : Exiting...\n","2022/12/14 06:58:29 INFO  : Starting transaction limiter: max 12 transactions/s with burst 1\n","2022/12/14 06:58:29 DEBUG : rclone: Version \"v1.60.1\" starting with parameters [\"rclone\" \"copy\" \"dbox_2:plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt\" \"dbox_1:\" \"--drive-stop-on-upload-limit\" \"--transfers\" \"1\" \"--progress-terminal-title\" \"-vv\" \"--tpslimit\" \"12\" \"--log-file\" \"/root/rclone1.log\"]\n","2022/12/14 06:58:29 DEBUG : Creating backend with remote \"dbox_2:plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt\"\n","2022/12/14 06:58:29 DEBUG : Using config file from \"/root/.config/rclone/rclone.conf\"\n","2022/12/14 06:58:29 DEBUG : fs cache: adding new entry for parent of \"dbox_2:plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt\", \"dbox_2:\"\n","2022/12/14 06:58:29 DEBUG : Creating backend with remote \"dbox_1:\"\n","2022/12/14 06:58:29 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Need to transfer - File not found at Destination\n","2022/12/14 06:58:31 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 1/2163\n","2022/12/14 06:58:33 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 2/2163\n","2022/12/14 06:58:36 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 3/2163\n","2022/12/14 06:58:38 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 4/2163\n","2022/12/14 06:58:41 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 5/2163\n","2022/12/14 06:58:43 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 6/2163\n","2022/12/14 06:58:45 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 7/2163\n","2022/12/14 06:58:47 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 8/2163\n","2022/12/14 06:58:48 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 9/2163\n","2022/12/14 06:58:50 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 10/2163\n","2022/12/14 06:58:52 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 11/2163\n","2022/12/14 06:58:55 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 12/2163\n","2022/12/14 06:58:57 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 13/2163\n","2022/12/14 06:59:00 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 14/2163\n","2022/12/14 06:59:02 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 15/2163\n","2022/12/14 06:59:04 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 16/2163\n","2022/12/14 06:59:07 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 17/2163\n","2022/12/14 06:59:09 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 18/2163\n","2022/12/14 06:59:11 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 19/2163\n","2022/12/14 06:59:14 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 20/2163\n","2022/12/14 06:59:16 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 21/2163\n","2022/12/14 06:59:19 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 22/2163\n","2022/12/14 06:59:21 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 23/2163\n","2022/12/14 06:59:24 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 24/2163\n","2022/12/14 06:59:26 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 25/2163\n","2022/12/14 06:59:27 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 26/2163\n","2022/12/14 06:59:29 INFO  : \n","Transferred:   \t    1.219 GiB / 101.362 GiB, 1%, 22.083 MiB/s, ETA 1h17m23s\n","Transferred:            0 / 1, 0%\n","Elapsed time:       1m0.4s\n","Transferring:\n"," * plot-k32-2022-07-30-09…e8f1c39a2ab9e5d9e8.txt:  1% /101.362Gi, 21.972Mi/s, 1h17m47s\n","\n","2022/12/14 06:59:29 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 27/2163\n","2022/12/14 06:59:31 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 28/2163\n","2022/12/14 06:59:34 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 29/2163\n","2022/12/14 06:59:37 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 30/2163\n","2022/12/14 06:59:39 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 31/2163\n","2022/12/14 06:59:41 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 32/2163\n","2022/12/14 06:59:43 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 33/2163\n","2022/12/14 06:59:45 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 34/2163\n","2022/12/14 06:59:48 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 35/2163\n","2022/12/14 06:59:50 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 36/2163\n","2022/12/14 06:59:51 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 37/2163\n","2022/12/14 06:59:53 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 38/2163\n","2022/12/14 06:59:55 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 39/2163\n","2022/12/14 06:59:57 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 40/2163\n","2022/12/14 07:00:00 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 41/2163\n","2022/12/14 07:00:01 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 42/2163\n","2022/12/14 07:00:03 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 43/2163\n","2022/12/14 07:00:06 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 44/2163\n","2022/12/14 07:00:08 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 45/2163\n","2022/12/14 07:00:11 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 46/2163\n","2022/12/14 07:00:13 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 47/2163\n","2022/12/14 07:00:16 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 48/2163\n","2022/12/14 07:00:18 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 49/2163\n","2022/12/14 07:00:20 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 50/2163\n","2022/12/14 07:00:22 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 51/2163\n","2022/12/14 07:00:24 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 52/2163\n","2022/12/14 07:00:26 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 53/2163\n","2022/12/14 07:00:29 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 54/2163\n","2022/12/14 07:00:29 INFO  : \n","Transferred:   \t    2.490 GiB / 101.362 GiB, 2%, 21.246 MiB/s, ETA 1h19m25s\n","Transferred:            0 / 1, 0%\n","Elapsed time:       2m0.4s\n","Transferring:\n"," * plot-k32-2022-07-30-09…e8f1c39a2ab9e5d9e8.txt:  2% /101.362Gi, 20.893Mi/s, 1h20m45s\n","\n","2022/12/14 07:00:31 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 55/2163\n","2022/12/14 07:00:34 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 56/2163\n","2022/12/14 07:00:37 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 57/2163\n","2022/12/14 07:00:38 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 58/2163\n","2022/12/14 07:00:41 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 59/2163\n","2022/12/14 07:00:43 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 60/2163\n","2022/12/14 07:00:45 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 61/2163\n","2022/12/14 07:00:47 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 62/2163\n","2022/12/14 07:00:49 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 63/2163\n","2022/12/14 07:00:52 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 64/2163\n","2022/12/14 07:00:53 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 65/2163\n","2022/12/14 07:00:56 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 66/2163\n","2022/12/14 07:00:58 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 67/2163\n","2022/12/14 07:01:00 DEBUG : plot-k32-2022-07-30-09-20-4a17f8460c44fe711393ac7a65785f4855789bdf819c5de8f1c39a2ab9e5d9e8.txt: Uploading chunk 68/2163\n","2022/12/14 07:01:00 INFO  : Signal received: interrupt\n","2022/12/14 07:01:00 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 07:01:00 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 07:01:00 INFO  : Exiting...\n","2022/12/14 07:18:29 INFO  : Starting transaction limiter: max 12 transactions/s with burst 1\n","2022/12/14 07:18:29 DEBUG : rclone: Version \"v1.60.1\" starting with parameters [\"rclone\" \"copy\" \"dbox_2:\" \"dbox_1:\" \"--drive-stop-on-upload-limit\" \"--transfers\" \"1\" \"--progress-terminal-title\" \"-vv\" \"--tpslimit\" \"12\" \"--log-file\" \"/root/rclone1.log\"]\n","2022/12/14 07:18:29 DEBUG : Creating backend with remote \"dbox_2:\"\n","2022/12/14 07:18:29 DEBUG : Using config file from \"/root/.config/rclone/rclone.conf\"\n","2022/12/14 07:18:29 DEBUG : Creating backend with remote \"dbox_1:\"\n","2022/12/14 07:18:36 DEBUG : Dropbox root '': Waiting for checks to finish\n","2022/12/14 07:18:36 DEBUG : Dropbox root '': Waiting for transfers to finish\n","2022/12/14 07:18:38 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 1/2163\n","2022/12/14 07:18:42 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 2/2163\n","2022/12/14 07:18:46 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 3/2163\n","2022/12/14 07:18:49 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 4/2163\n","2022/12/14 07:18:53 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 5/2163\n","2022/12/14 07:18:59 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 6/2163\n","2022/12/14 07:19:03 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 7/2163\n","2022/12/14 07:19:06 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 8/2163\n","2022/12/14 07:19:10 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 9/2163\n","2022/12/14 07:19:14 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 10/2163\n","2022/12/14 07:19:17 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 11/2163\n","2022/12/14 07:19:20 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 12/2163\n","2022/12/14 07:19:24 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 13/2163\n","2022/12/14 07:19:27 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 14/2163\n","2022/12/14 07:19:29 INFO  : \n","Transferred:   \t  663.996 MiB / 4.454 TiB, 0%, 13.494 MiB/s, ETA 4d7m20s\n","Transferred:            0 / 45, 0%\n","Elapsed time:       1m0.0s\n","Transferring:\n"," * plot-k32-2022-07-07-09…0f9937708ce1198e5d.txt:  0% /101.361Gi, 13.534Mi/s, 2h7m0s\n","\n","2022/12/14 07:19:30 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 15/2163\n","2022/12/14 07:19:33 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 16/2163\n","2022/12/14 07:19:36 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 17/2163\n","2022/12/14 07:19:40 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 18/2163\n","2022/12/14 07:19:43 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 19/2163\n","2022/12/14 07:19:47 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 20/2163\n","2022/12/14 07:19:51 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 21/2163\n","2022/12/14 07:19:54 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 22/2163\n","2022/12/14 07:19:59 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 23/2163\n","2022/12/14 07:20:02 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 24/2163\n","2022/12/14 07:20:06 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 25/2163\n","2022/12/14 07:20:09 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 26/2163\n","2022/12/14 07:20:12 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 27/2163\n","2022/12/14 07:20:15 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 28/2163\n","2022/12/14 07:20:19 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 29/2163\n","2022/12/14 07:20:22 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 30/2163\n","2022/12/14 07:20:26 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 31/2163\n","2022/12/14 07:20:29 INFO  : \n","Transferred:   \t    1.453 GiB / 4.454 TiB, 0%, 13.592 MiB/s, ETA 3d23h25m6s\n","Transferred:            0 / 45, 0%\n","Elapsed time:       2m0.0s\n","Transferring:\n"," * plot-k32-2022-07-07-09…0f9937708ce1198e5d.txt:  1% /101.361Gi, 13.813Mi/s, 2h3m26s\n","\n","2022/12/14 07:20:29 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 32/2163\n","2022/12/14 07:20:32 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 33/2163\n","2022/12/14 07:20:37 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 34/2163\n","2022/12/14 07:20:40 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 35/2163\n","2022/12/14 07:20:43 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 36/2163\n","2022/12/14 07:20:46 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 37/2163\n","2022/12/14 07:20:50 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 38/2163\n","2022/12/14 07:20:54 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 39/2163\n","2022/12/14 07:20:58 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 40/2163\n","2022/12/14 07:21:01 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 41/2163\n","2022/12/14 07:21:05 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 42/2163\n","2022/12/14 07:21:08 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 43/2163\n","2022/12/14 07:21:12 DEBUG : plot-k32-2022-07-07-09-11-e7a9bc0045d4d16019974995a3dd803e266a204e2524120f9937708ce1198e5d.txt: Uploading chunk 44/2163\n","2022/12/14 07:21:13 INFO  : Signal received: interrupt\n","2022/12/14 07:21:13 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 07:21:13 INFO  : Dropbox root '': Committing uploads - please wait...\n","2022/12/14 07:21:13 INFO  : Exiting...\n","\n"]}]},{"cell_type":"markdown","source":["**Code 1**"],"metadata":{"id":"fURLLGiKYcTh"}},{"cell_type":"code","source":["!rclone ls osnova_1:  #<--Write Code before #"],"metadata":{"id":"-ckButGdYidJ","executionInfo":{"status":"ok","timestamp":1671005653705,"user_tz":-180,"elapsed":824,"user":{"displayName":"","userId":""}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["**Code 2**"],"metadata":{"id":"1OpnhcI0CKcm"}},{"cell_type":"code","source":["!rclone copy dbox_2: dbox_1: --drive-stop-on-upload-limit --transfers 1 --progress-terminal-title -vv --tpslimit 12 --log-file /root/rclone1.log #<--Write Code before #"],"metadata":{"id":"74atFIRKB12M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671002475107,"user_tz":-180,"elapsed":165068,"user":{"displayName":"","userId":""}},"outputId":"3cde862e-df30-4006-a31b-31a422b51521"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b]0;ETA: 4d7m20s\u0007\u001b]0;ETA: 3d23h25m6s\u0007"]}]},{"cell_type":"markdown","source":["**Powered By:<br>**\n","```\n","---\n","Base\n","---\n","NoteBook: v4.4.8\n","Python: v3.10\n","Rclone: v1.59.1\n","Installer: v4.4.5 (R-1591)\n","---\n","Zip Handlers\n","---\n","7-Zip: v22.07.15\n","WinRAR: v6.11\n","---\n","Add-Ons\n","---\n","yt-dlp: v2022.08.19\n","aria2: v1.36.0\n","---\n","Torrent Manager\n","---\n","LibTorrent: v2.0.7\n","\n","```"],"metadata":{"id":"CIBvCpUk6kr6"}},{"cell_type":"code","source":["import subprocess\n","from datetime import datetime, timedelta\n","com=f'rclone copy osnova_4: dbox_4: --drive-stop-on-upload-limit --transfers 5 -P -v --tpslimit 12 --log-file rclone1.log'\n","print(com)\n","comls= com.split(' ')\n","process = subprocess.Popen(comls, stdout=subprocess.PIPE, universal_newlines=True)\n","x=0\n","tr=''\n","pr=''\n","ti=''\n","er='None'\n","while True:\n","    line = process.stdout.readline()\n","    #print(line)\n","    if line.find('Transferred')>-1 and line.find('%,')>-1:\n","       tr=line.split('Transferred')[1][3:-2]\n","    elif line.find('Transferred')>-1 and line.find('%,')==-1:\n","       pr=line.split('Transferred')[1][12:-2]\n","    elif line.find('Elapsed time:')>-1:\n","       ti=line[10:-2]\n","    elif not line:\n","       print('Завершено')\n","       er='OK'\n","    x+=1\n","    if x == 80:\n","        now = datetime.now() + timedelta(minutes=480)\n","        print(f'data {now.strftime(\"%d-%m-%Y %H:%M\")} | Work : {tr} | peredano : {pr} | time_wok {ti}')\n","        x=0\n"],"metadata":{"outputId":"3e064400-104f-4fbc-b480-92dd3ae7dc4b","colab":{"base_uri":"https://localhost:8080/"},"id":"1e4i3I0Gi1FK"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["rclone copy osnova_4: dbox_4: --drive-stop-on-upload-limit --transfers 5 -P -v --tpslimit 12 --log-file rclone1.log\n","data 14-12-2022 16:16 | Work :  \t  206.988 MiB / 1.979 TiB, 0%, 49.908 MiB/s, ETA 11h33m3 | peredano :  0 / 20, 0 | time_wok me:         6.5\n","data 14-12-2022 16:16 | Work :  \t  466.551 MiB / 1.979 TiB, 0%, 53.720 MiB/s, ETA 10h43m48 | peredano :  0 / 20, 0 | time_wok me:        11.0\n","data 14-12-2022 16:16 | Work :  \t  776.516 MiB / 1.979 TiB, 0%, 58.910 MiB/s, ETA 9h46m59 | peredano :  0 / 20, 0 | time_wok me:        15.5\n","data 14-12-2022 16:17 | Work :  \t    1.009 GiB / 1.979 TiB, 0%, 60.231 MiB/s, ETA 9h34m2 | peredano :  0 / 20, 0 | time_wok me:        20.0\n","data 14-12-2022 16:17 | Work :  \t    1.290 GiB / 1.979 TiB, 0%, 61.432 MiB/s, ETA 9h22m44 | peredano :  0 / 20, 0 | time_wok me:        24.5\n","data 14-12-2022 16:17 | Work :  \t    1.572 GiB / 1.979 TiB, 0%, 62.359 MiB/s, ETA 9h14m18 | peredano :  0 / 20, 0 | time_wok me:        29.0\n","data 14-12-2022 16:17 | Work :  \t    1.849 GiB / 1.979 TiB, 0%, 62.367 MiB/s, ETA 9h14m9 | peredano :  0 / 20, 0 | time_wok me:        33.5\n","data 14-12-2022 16:17 | Work :  \t    2.157 GiB / 1.979 TiB, 0%, 64.103 MiB/s, ETA 8h59m4 | peredano :  0 / 20, 0 | time_wok me:        38.0\n","data 14-12-2022 16:17 | Work :  \t    2.456 GiB / 1.979 TiB, 0%, 65.106 MiB/s, ETA 8h50m41 | peredano :  0 / 20, 0 | time_wok me:        42.5\n","data 14-12-2022 16:17 | Work :  \t    2.738 GiB / 1.979 TiB, 0%, 65.485 MiB/s, ETA 8h47m32 | peredano :  0 / 20, 0 | time_wok me:        46.5\n","data 14-12-2022 16:17 | Work :  \t    3.036 GiB / 1.979 TiB, 0%, 65.136 MiB/s, ETA 8h50m17 | peredano :  0 / 20, 0 | time_wok me:        51.0\n","data 14-12-2022 16:17 | Work :  \t    3.329 GiB / 1.979 TiB, 0%, 65.239 MiB/s, ETA 8h49m22 | peredano :  0 / 20, 0 | time_wok me:        55.5\n","data 14-12-2022 16:17 | Work :  \t    3.592 GiB / 1.979 TiB, 0%, 65.758 MiB/s, ETA 8h45m7 | peredano :  0 / 20, 0 | time_wok me:       1m0.0\n","data 14-12-2022 16:17 | Work :  \t    3.893 GiB / 1.979 TiB, 0%, 66.652 MiB/s, ETA 8h38 | peredano :  0 / 20, 0 | time_wok me:       1m4.5\n","data 14-12-2022 16:17 | Work :  \t    4.163 GiB / 1.979 TiB, 0%, 66.067 MiB/s, ETA 8h42m31 | peredano :  0 / 20, 0 | time_wok me:       1m9.0\n","data 14-12-2022 16:17 | Work :  \t    4.459 GiB / 1.979 TiB, 0%, 64.604 MiB/s, ETA 8h54m16 | peredano :  0 / 20, 0 | time_wok me:      1m13.5\n","data 14-12-2022 16:17 | Work :  \t    4.767 GiB / 1.979 TiB, 0%, 67.120 MiB/s, ETA 8h34m10 | peredano :  0 / 20, 0 | time_wok me:      1m18.0\n","data 14-12-2022 16:18 | Work :  \t    5.041 GiB / 1.979 TiB, 0%, 66.771 MiB/s, ETA 8h36m47 | peredano :  0 / 20, 0 | time_wok me:      1m22.5\n","data 14-12-2022 16:18 | Work :  \t    5.323 GiB / 1.979 TiB, 0%, 65.278 MiB/s, ETA 8h48m32 | peredano :  0 / 20, 0 | time_wok me:      1m26.5\n","data 14-12-2022 16:18 | Work :  \t    5.632 GiB / 1.979 TiB, 0%, 64.973 MiB/s, ETA 8h50m56 | peredano :  0 / 20, 0 | time_wok me:      1m31.0\n","data 14-12-2022 16:18 | Work :  \t    5.925 GiB / 1.979 TiB, 0%, 66.767 MiB/s, ETA 8h36m35 | peredano :  0 / 20, 0 | time_wok me:      1m35.5\n","data 14-12-2022 16:18 | Work :  \t    6.186 GiB / 1.979 TiB, 0%, 67.042 MiB/s, ETA 8h34m24 | peredano :  0 / 20, 0 | time_wok me:      1m40.0\n","data 14-12-2022 16:18 | Work :  \t    6.456 GiB / 1.979 TiB, 0%, 66.924 MiB/s, ETA 8h35m15 | peredano :  0 / 20, 0 | time_wok me:      1m44.5\n","data 14-12-2022 16:18 | Work :  \t    6.747 GiB / 1.979 TiB, 0%, 66.018 MiB/s, ETA 8h42m14 | peredano :  0 / 20, 0 | time_wok me:      1m49.0\n","data 14-12-2022 16:18 | Work :  \t    7.058 GiB / 1.979 TiB, 0%, 66.772 MiB/s, ETA 8h36m16 | peredano :  0 / 20, 0 | time_wok me:      1m53.5\n","data 14-12-2022 16:18 | Work :  \t    7.355 GiB / 1.979 TiB, 0%, 67.415 MiB/s, ETA 8h31m16 | peredano :  0 / 20, 0 | time_wok me:      1m58.0\n","data 14-12-2022 16:18 | Work :  \t    7.631 GiB / 1.979 TiB, 0%, 66.624 MiB/s, ETA 8h37m16 | peredano :  0 / 20, 0 | time_wok me:       2m2.5\n","data 14-12-2022 16:18 | Work :  \t    7.930 GiB / 1.979 TiB, 0%, 65.896 MiB/s, ETA 8h42m54 | peredano :  0 / 20, 0 | time_wok me:       2m6.5\n","data 14-12-2022 16:18 | Work :  \t    8.208 GiB / 1.979 TiB, 0%, 65.308 MiB/s, ETA 8h47m32 | peredano :  0 / 20, 0 | time_wok me:      2m11.0\n","data 14-12-2022 16:18 | Work :  \t    8.521 GiB / 1.979 TiB, 0%, 66.957 MiB/s, ETA 8h34m28 | peredano :  0 / 20, 0 | time_wok me:      2m15.5\n","data 14-12-2022 16:19 | Work :  \t    8.776 GiB / 1.979 TiB, 0%, 66.887 MiB/s, ETA 8h34m56 | peredano :  0 / 20, 0 | time_wok me:      2m20.0\n","data 14-12-2022 16:19 | Work :  \t    9.055 GiB / 1.979 TiB, 0%, 66.481 MiB/s, ETA 8h38 | peredano :  0 / 20, 0 | time_wok me:      2m24.5\n","data 14-12-2022 16:19 | Work :  \t    9.352 GiB / 1.979 TiB, 0%, 65.942 MiB/s, ETA 8h42m10 | peredano :  0 / 20, 0 | time_wok me:      2m29.0\n","data 14-12-2022 16:19 | Work :  \t    9.656 GiB / 1.979 TiB, 0%, 65.857 MiB/s, ETA 8h42m45 | peredano :  0 / 20, 0 | time_wok me:      2m33.5\n","data 14-12-2022 16:19 | Work :  \t    9.943 GiB / 1.979 TiB, 0%, 66.952 MiB/s, ETA 8h34m8 | peredano :  0 / 20, 0 | time_wok me:      2m38.0\n","data 14-12-2022 16:19 | Work :  \t   10.230 GiB / 1.979 TiB, 1%, 65.832 MiB/s, ETA 8h42m48 | peredano :  0 / 20, 0 | time_wok me:      2m42.5\n","data 14-12-2022 16:19 | Work :  \t   10.518 GiB / 1.979 TiB, 1%, 66.516 MiB/s, ETA 8h37m22 | peredano :  0 / 20, 0 | time_wok me:      2m46.5\n","data 14-12-2022 16:19 | Work :  \t   10.790 GiB / 1.979 TiB, 1%, 66.133 MiB/s, ETA 8h40m17 | peredano :  0 / 20, 0 | time_wok me:      2m51.0\n","data 14-12-2022 16:19 | Work :  \t   11.091 GiB / 1.979 TiB, 1%, 65.689 MiB/s, ETA 8h43m44 | peredano :  0 / 20, 0 | time_wok me:      2m55.5\n","data 14-12-2022 16:19 | Work :  \t   11.350 GiB / 1.979 TiB, 1%, 65.809 MiB/s, ETA 8h42m42 | peredano :  0 / 20, 0 | time_wok me:       3m0.0\n","data 14-12-2022 16:19 | Work :  \t   11.645 GiB / 1.979 TiB, 1%, 64.971 MiB/s, ETA 8h49m22 | peredano :  0 / 20, 0 | time_wok me:       3m4.5\n","data 14-12-2022 16:19 | Work :  \t   11.921 GiB / 1.979 TiB, 1%, 65.826 MiB/s, ETA 8h42m25 | peredano :  0 / 20, 0 | time_wok me:       3m9.0\n","data 14-12-2022 16:19 | Work :  \t   12.203 GiB / 1.979 TiB, 1%, 65.337 MiB/s, ETA 8h46m15 | peredano :  0 / 20, 0 | time_wok me:      3m13.5\n","data 14-12-2022 16:19 | Work :  \t   12.487 GiB / 1.979 TiB, 1%, 65.028 MiB/s, ETA 8h48m41 | peredano :  0 / 20, 0 | time_wok me:      3m18.0\n","data 14-12-2022 16:20 | Work :  \t   12.747 GiB / 1.979 TiB, 1%, 63.540 MiB/s, ETA 9h1 | peredano :  0 / 20, 0 | time_wok me:      3m22.5\n","data 14-12-2022 16:20 | Work :  \t   13.044 GiB / 1.979 TiB, 1%, 64.190 MiB/s, ETA 8h55m26 | peredano :  0 / 20, 0 | time_wok me:      3m26.5\n","data 14-12-2022 16:20 | Work :  \t   13.333 GiB / 1.979 TiB, 1%, 64.848 MiB/s, ETA 8h49m55 | peredano :  0 / 20, 0 | time_wok me:      3m31.0\n","data 14-12-2022 16:20 | Work :  \t   13.614 GiB / 1.979 TiB, 1%, 64.865 MiB/s, ETA 8h49m43 | peredano :  0 / 20, 0 | time_wok me:      3m35.5\n","data 14-12-2022 16:20 | Work :  \t   13.864 GiB / 1.979 TiB, 1%, 64.458 MiB/s, ETA 8h53 | peredano :  0 / 20, 0 | time_wok me:      3m40.0\n","data 14-12-2022 16:20 | Work :  \t   14.142 GiB / 1.979 TiB, 1%, 65.562 MiB/s, ETA 8h43m57 | peredano :  0 / 20, 0 | time_wok me:      3m44.5\n","data 14-12-2022 16:20 | Work :  \t   14.398 GiB / 1.979 TiB, 1%, 62.815 MiB/s, ETA 9h6m47 | peredano :  0 / 20, 0 | time_wok me:      3m49.0\n","data 14-12-2022 16:20 | Work :  \t   14.706 GiB / 1.979 TiB, 1%, 64.460 MiB/s, ETA 8h52m45 | peredano :  0 / 20, 0 | time_wok me:      3m53.5\n","data 14-12-2022 16:20 | Work :  \t   15.012 GiB / 1.979 TiB, 1%, 65.728 MiB/s, ETA 8h42m24 | peredano :  0 / 20, 0 | time_wok me:      3m58.0\n","data 14-12-2022 16:20 | Work :  \t   15.297 GiB / 1.979 TiB, 1%, 66.056 MiB/s, ETA 8h39m44 | peredano :  0 / 20, 0 | time_wok me:       4m2.5\n","data 14-12-2022 16:20 | Work :  \t   15.559 GiB / 1.979 TiB, 1%, 64.287 MiB/s, ETA 8h53m58 | peredano :  0 / 20, 0 | time_wok me:       4m6.5\n","data 14-12-2022 16:20 | Work :  \t   15.851 GiB / 1.979 TiB, 1%, 65.287 MiB/s, ETA 8h45m42 | peredano :  0 / 20, 0 | time_wok me:      4m11.0\n","data 14-12-2022 16:20 | Work :  \t   16.156 GiB / 1.979 TiB, 1%, 65.078 MiB/s, ETA 8h47m19 | peredano :  0 / 20, 0 | time_wok me:      4m15.5\n","data 14-12-2022 16:21 | Work :  \t   16.411 GiB / 1.979 TiB, 1%, 65.845 MiB/s, ETA 8h41m6 | peredano :  0 / 20, 0 | time_wok me:      4m20.0\n","data 14-12-2022 16:21 | Work :  \t   16.691 GiB / 1.979 TiB, 1%, 65.577 MiB/s, ETA 8h43m10 | peredano :  0 / 20, 0 | time_wok me:      4m24.5\n","data 14-12-2022 16:21 | Work :  \t   16.972 GiB / 1.979 TiB, 1%, 64.767 MiB/s, ETA 8h49m38 | peredano :  0 / 20, 0 | time_wok me:      4m29.0\n","data 14-12-2022 16:21 | Work :  \t   17.271 GiB / 1.979 TiB, 1%, 64.887 MiB/s, ETA 8h48m34 | peredano :  0 / 20, 0 | time_wok me:      4m33.5\n","data 14-12-2022 16:21 | Work :  \t   17.571 GiB / 1.979 TiB, 1%, 66.517 MiB/s, ETA 8h35m32 | peredano :  0 / 20, 0 | time_wok me:      4m38.0\n","data 14-12-2022 16:21 | Work :  \t   17.841 GiB / 1.979 TiB, 1%, 66.528 MiB/s, ETA 8h35m23 | peredano :  0 / 20, 0 | time_wok me:      4m42.5\n","data 14-12-2022 16:21 | Work :  \t   18.131 GiB / 1.979 TiB, 1%, 65.037 MiB/s, ETA 8h47m8 | peredano :  0 / 20, 0 | time_wok me:      4m46.5\n","data 14-12-2022 16:21 | Work :  \t   18.424 GiB / 1.979 TiB, 1%, 64.862 MiB/s, ETA 8h48m28 | peredano :  0 / 20, 0 | time_wok me:      4m51.0\n","data 14-12-2022 16:21 | Work :  \t   18.730 GiB / 1.979 TiB, 1%, 66.775 MiB/s, ETA 8h33m15 | peredano :  0 / 20, 0 | time_wok me:      4m55.5\n","data 14-12-2022 16:21 | Work :  \t   18.985 GiB / 1.979 TiB, 1%, 66.795 MiB/s, ETA 8h33m2 | peredano :  0 / 20, 0 | time_wok me:       5m0.0\n","data 14-12-2022 16:21 | Work :  \t   19.260 GiB / 1.979 TiB, 1%, 66.539 MiB/s, ETA 8h34m56 | peredano :  0 / 20, 0 | time_wok me:       5m4.5\n","data 14-12-2022 16:21 | Work :  \t   19.543 GiB / 1.979 TiB, 1%, 65.640 MiB/s, ETA 8h41m55 | peredano :  0 / 20, 0 | time_wok me:       5m9.0\n","data 14-12-2022 16:21 | Work :  \t   19.852 GiB / 1.979 TiB, 1%, 64.521 MiB/s, ETA 8h50m53 | peredano :  0 / 20, 0 | time_wok me:      5m13.5\n","data 14-12-2022 16:21 | Work :  \t   20.147 GiB / 1.979 TiB, 1%, 66.845 MiB/s, ETA 8h32m21 | peredano :  0 / 20, 0 | time_wok me:      5m18.0\n","data 14-12-2022 16:22 | Work :  \t   20.426 GiB / 1.979 TiB, 1%, 66.654 MiB/s, ETA 8h33m45 | peredano :  0 / 20, 0 | time_wok me:      5m22.5\n","data 14-12-2022 16:22 | Work :  \t   20.690 GiB / 1.979 TiB, 1%, 65.165 MiB/s, ETA 8h45m25 | peredano :  0 / 20, 0 | time_wok me:      5m26.5\n","data 14-12-2022 16:22 | Work :  \t   20.999 GiB / 1.979 TiB, 1%, 64.165 MiB/s, ETA 8h53m32 | peredano :  0 / 20, 0 | time_wok me:      5m31.0\n","data 14-12-2022 16:22 | Work :  \t   21.301 GiB / 1.979 TiB, 1%, 66.614 MiB/s, ETA 8h33m50 | peredano :  0 / 20, 0 | time_wok me:      5m35.5\n","data 14-12-2022 16:22 | Work :  \t   21.558 GiB / 1.979 TiB, 1%, 66.223 MiB/s, ETA 8h36m48 | peredano :  0 / 20, 0 | time_wok me:      5m40.0\n","data 14-12-2022 16:22 | Work :  \t   21.825 GiB / 1.979 TiB, 1%, 65.419 MiB/s, ETA 8h43m5 | peredano :  0 / 20, 0 | time_wok me:      5m44.5\n","data 14-12-2022 16:22 | Work :  \t   22.129 GiB / 1.979 TiB, 1%, 66.302 MiB/s, ETA 8h36m3 | peredano :  0 / 20, 0 | time_wok me:      5m49.0\n","data 14-12-2022 16:22 | Work :  \t   22.419 GiB / 1.979 TiB, 1%, 65.761 MiB/s, ETA 8h40m12 | peredano :  0 / 20, 0 | time_wok me:      5m53.5\n","data 14-12-2022 16:22 | Work :  \t   22.696 GiB / 1.979 TiB, 1%, 65.604 MiB/s, ETA 8h41m23 | peredano :  0 / 20, 0 | time_wok me:      5m58.0\n","data 14-12-2022 16:22 | Work :  \t   23.042 GiB / 1.979 TiB, 1%, 68.428 MiB/s, ETA 8h19m47 | peredano :  0 / 20, 0 | time_wok me:       6m2.5\n","data 14-12-2022 16:22 | Work :  \t   23.447 GiB / 1.979 TiB, 1%, 74.637 MiB/s, ETA 7h38m7 | peredano :  0 / 20, 0 | time_wok me:       6m6.5\n","data 14-12-2022 16:22 | Work :  \t   23.804 GiB / 1.979 TiB, 1%, 75.569 MiB/s, ETA 7h32m23 | peredano :  0 / 20, 0 | time_wok me:      6m11.0\n","data 14-12-2022 16:22 | Work :  \t   24.183 GiB / 1.979 TiB, 1%, 78.828 MiB/s, ETA 7h13m36 | peredano :  0 / 20, 0 | time_wok me:      6m15.5\n","data 14-12-2022 16:23 | Work :  \t   24.512 GiB / 1.979 TiB, 1%, 80.076 MiB/s, ETA 7h6m46 | peredano :  0 / 20, 0 | time_wok me:      6m20.0\n","data 14-12-2022 16:23 | Work :  \t   24.919 GiB / 1.979 TiB, 1%, 82.060 MiB/s, ETA 6h56m22 | peredano :  0 / 20, 0 | time_wok me:      6m24.5\n","data 14-12-2022 16:23 | Work :  \t   25.247 GiB / 1.979 TiB, 1%, 81.815 MiB/s, ETA 6h57m32 | peredano :  0 / 20, 0 | time_wok me:      6m29.0\n","data 14-12-2022 16:23 | Work :  \t   25.644 GiB / 1.979 TiB, 1%, 83.666 MiB/s, ETA 6h48m13 | peredano :  0 / 20, 0 | time_wok me:      6m33.5\n","data 14-12-2022 16:23 | Work :  \t   26.028 GiB / 1.979 TiB, 1%, 85.058 MiB/s, ETA 6h41m28 | peredano :  0 / 20, 0 | time_wok me:      6m38.0\n","data 14-12-2022 16:23 | Work :  \t   26.384 GiB / 1.979 TiB, 1%, 82.537 MiB/s, ETA 6h53m39 | peredano :  0 / 20, 0 | time_wok me:      6m42.5\n","data 14-12-2022 16:23 | Work :  \t   26.744 GiB / 1.979 TiB, 1%, 83.614 MiB/s, ETA 6h48m15 | peredano :  0 / 20, 0 | time_wok me:      6m46.5\n","data 14-12-2022 16:23 | Work :  \t   27.146 GiB / 1.979 TiB, 1%, 84.958 MiB/s, ETA 6h41m43 | peredano :  0 / 20, 0 | time_wok me:      6m51.0\n","data 14-12-2022 16:23 | Work :  \t   27.502 GiB / 1.979 TiB, 1%, 83.995 MiB/s, ETA 6h46m15 | peredano :  0 / 20, 0 | time_wok me:      6m55.5\n","data 14-12-2022 16:23 | Work :  \t   27.797 GiB / 1.979 TiB, 1%, 82.530 MiB/s, ETA 6h53m24 | peredano :  0 / 20, 0 | time_wok me:       7m0.0\n","data 14-12-2022 16:23 | Work :  \t   28.163 GiB / 1.979 TiB, 1%, 81.853 MiB/s, ETA 6h56m45 | peredano :  0 / 20, 0 | time_wok me:       7m4.5\n","data 14-12-2022 16:23 | Work :  \t   28.528 GiB / 1.979 TiB, 1%, 82.125 MiB/s, ETA 6h55m17 | peredano :  0 / 20, 0 | time_wok me:       7m9.0\n","data 14-12-2022 16:23 | Work :  \t   28.882 GiB / 1.979 TiB, 1%, 82.347 MiB/s, ETA 6h54m6 | peredano :  0 / 20, 0 | time_wok me:      7m13.5\n","data 14-12-2022 16:23 | Work :  \t   29.232 GiB / 1.979 TiB, 1%, 80.730 MiB/s, ETA 7h2m19 | peredano :  0 / 20, 0 | time_wok me:      7m18.0\n","data 14-12-2022 16:24 | Work :  \t   29.596 GiB / 1.979 TiB, 1%, 82.143 MiB/s, ETA 6h54m58 | peredano :  0 / 20, 0 | time_wok me:      7m22.5\n","data 14-12-2022 16:24 | Work :  \t   29.994 GiB / 1.979 TiB, 1%, 83.764 MiB/s, ETA 6h46m51 | peredano :  0 / 20, 0 | time_wok me:      7m26.5\n","data 14-12-2022 16:24 | Work :  \t   30.366 GiB / 1.979 TiB, 1%, 84.266 MiB/s, ETA 6h44m22 | peredano :  0 / 20, 0 | time_wok me:      7m31.0\n","data 14-12-2022 16:24 | Work :  \t   30.746 GiB / 1.979 TiB, 2%, 85.157 MiB/s, ETA 6h40m3 | peredano :  0 / 20, 0 | time_wok me:      7m35.5\n","data 14-12-2022 16:24 | Work :  \t   31.068 GiB / 1.979 TiB, 2%, 84.640 MiB/s, ETA 6h42m26 | peredano :  0 / 20, 0 | time_wok me:      7m40.0\n","data 14-12-2022 16:24 | Work :  \t   31.428 GiB / 1.979 TiB, 2%, 83.714 MiB/s, ETA 6h46m49 | peredano :  0 / 20, 0 | time_wok me:      7m44.5\n","data 14-12-2022 16:24 | Work :  \t   31.804 GiB / 1.979 TiB, 2%, 84.001 MiB/s, ETA 6h45m21 | peredano :  0 / 20, 0 | time_wok me:      7m49.0\n","data 14-12-2022 16:24 | Work :  \t   32.184 GiB / 1.979 TiB, 2%, 85.755 MiB/s, ETA 6h36m59 | peredano :  0 / 20, 0 | time_wok me:      7m53.5\n","data 14-12-2022 16:24 | Work :  \t   32.550 GiB / 1.979 TiB, 2%, 83.502 MiB/s, ETA 6h47m37 | peredano :  0 / 20, 0 | time_wok me:      7m58.0\n","data 14-12-2022 16:24 | Work :  \t   32.911 GiB / 1.979 TiB, 2%, 84.795 MiB/s, ETA 6h41m20 | peredano :  0 / 20, 0 | time_wok me:       8m2.5\n","data 14-12-2022 16:24 | Work :  \t   33.267 GiB / 1.979 TiB, 2%, 83.529 MiB/s, ETA 6h47m20 | peredano :  0 / 20, 0 | time_wok me:       8m6.5\n","data 14-12-2022 16:24 | Work :  \t   33.606 GiB / 1.979 TiB, 2%, 82.133 MiB/s, ETA 6h54m11 | peredano :  0 / 20, 0 | time_wok me:      8m11.0\n","data 14-12-2022 16:24 | Work :  \t   34.015 GiB / 1.979 TiB, 2%, 84.174 MiB/s, ETA 6h44m4 | peredano :  0 / 20, 0 | time_wok me:      8m15.5\n","data 14-12-2022 16:25 | Work :  \t   34.333 GiB / 1.979 TiB, 2%, 83.331 MiB/s, ETA 6h48m5 | peredano :  0 / 20, 0 | time_wok me:      8m20.0\n","data 14-12-2022 16:25 | Work :  \t   34.739 GiB / 1.979 TiB, 2%, 84.649 MiB/s, ETA 6h41m39 | peredano :  0 / 20, 0 | time_wok me:      8m24.5\n","data 14-12-2022 16:25 | Work :  \t   35.066 GiB / 1.979 TiB, 2%, 82.879 MiB/s, ETA 6h50m9 | peredano :  0 / 20, 0 | time_wok me:      8m29.0\n","data 14-12-2022 16:25 | Work :  \t   35.462 GiB / 1.979 TiB, 2%, 84.125 MiB/s, ETA 6h44 | peredano :  0 / 20, 0 | time_wok me:      8m33.5\n","data 14-12-2022 16:25 | Work :  \t   35.824 GiB / 1.979 TiB, 2%, 85.058 MiB/s, ETA 6h39m30 | peredano :  0 / 20, 0 | time_wok me:      8m38.0\n","data 14-12-2022 16:25 | Work :  \t   36.181 GiB / 1.979 TiB, 2%, 82.560 MiB/s, ETA 6h51m31 | peredano :  0 / 20, 0 | time_wok me:      8m42.5\n","data 14-12-2022 16:25 | Work :  \t   36.528 GiB / 1.979 TiB, 2%, 82.783 MiB/s, ETA 6h50m20 | peredano :  0 / 20, 0 | time_wok me:      8m46.5\n","data 14-12-2022 16:25 | Work :  \t   36.907 GiB / 1.979 TiB, 2%, 83.204 MiB/s, ETA 6h48m11 | peredano :  0 / 20, 0 | time_wok me:      8m51.0\n","data 14-12-2022 16:25 | Work :  \t   37.285 GiB / 1.979 TiB, 2%, 84.106 MiB/s, ETA 6h43m43 | peredano :  0 / 20, 0 | time_wok me:      8m55.5\n","data 14-12-2022 16:25 | Work :  \t   37.607 GiB / 1.979 TiB, 2%, 84.034 MiB/s, ETA 6h44 | peredano :  0 / 20, 0 | time_wok me:       9m0.0\n","data 14-12-2022 16:25 | Work :  \t   37.973 GiB / 1.979 TiB, 2%, 83.387 MiB/s, ETA 6h47m4 | peredano :  0 / 20, 0 | time_wok me:       9m4.5\n","data 14-12-2022 16:25 | Work :  \t   38.337 GiB / 1.979 TiB, 2%, 83.704 MiB/s, ETA 6h45m27 | peredano :  0 / 20, 0 | time_wok me:       9m9.0\n","data 14-12-2022 16:25 | Work :  \t   38.690 GiB / 1.979 TiB, 2%, 83.550 MiB/s, ETA 6h46m8 | peredano :  0 / 20, 0 | time_wok me:      9m13.5\n","data 14-12-2022 16:25 | Work :  \t   39.081 GiB / 1.979 TiB, 2%, 83.900 MiB/s, ETA 6h44m21 | peredano :  0 / 20, 0 | time_wok me:      9m18.0\n","data 14-12-2022 16:26 | Work :  \t   39.467 GiB / 1.979 TiB, 2%, 84.397 MiB/s, ETA 6h41m54 | peredano :  0 / 20, 0 | time_wok me:      9m22.5\n","data 14-12-2022 16:26 | Work :  \t   39.845 GiB / 1.979 TiB, 2%, 85.390 MiB/s, ETA 6h37m9 | peredano :  0 / 20, 0 | time_wok me:      9m26.5\n","data 14-12-2022 16:26 | Work :  \t   40.229 GiB / 1.979 TiB, 2%, 85.981 MiB/s, ETA 6h34m20 | peredano :  0 / 20, 0 | time_wok me:      9m31.0\n","data 14-12-2022 16:26 | Work :  \t   40.588 GiB / 1.979 TiB, 2%, 85.016 MiB/s, ETA 6h38m44 | peredano :  0 / 20, 0 | time_wok me:      9m35.5\n","data 14-12-2022 16:26 | Work :  \t   40.923 GiB / 1.979 TiB, 2%, 84.754 MiB/s, ETA 6h39m54 | peredano :  0 / 20, 0 | time_wok me:      9m40.0\n","data 14-12-2022 16:26 | Work :  \t   41.297 GiB / 1.979 TiB, 2%, 84.765 MiB/s, ETA 6h39m47 | peredano :  0 / 20, 0 | time_wok me:      9m44.5\n","data 14-12-2022 16:26 | Work :  \t   41.676 GiB / 1.979 TiB, 2%, 85.409 MiB/s, ETA 6h36m41 | peredano :  0 / 20, 0 | time_wok me:      9m49.0\n","data 14-12-2022 16:26 | Work :  \t   42.057 GiB / 1.979 TiB, 2%, 84.790 MiB/s, ETA 6h39m30 | peredano :  0 / 20, 0 | time_wok me:      9m53.5\n","data 14-12-2022 16:26 | Work :  \t   42.443 GiB / 1.979 TiB, 2%, 86.642 MiB/s, ETA 6h30m54 | peredano :  0 / 20, 0 | time_wok me:      9m58.0\n","data 14-12-2022 16:26 | Work :  \t   42.783 GiB / 1.979 TiB, 2%, 85.439 MiB/s, ETA 6h36m20 | peredano :  0 / 20, 0 | time_wok me:      10m2.5\n","data 14-12-2022 16:26 | Work :  \t   43.157 GiB / 1.979 TiB, 2%, 84.557 MiB/s, ETA 6h40m23 | peredano :  0 / 20, 0 | time_wok me:      10m6.5\n","data 14-12-2022 16:26 | Work :  \t   43.510 GiB / 1.979 TiB, 2%, 84.323 MiB/s, ETA 6h41m26 | peredano :  0 / 20, 0 | time_wok me:     10m11.0\n","data 14-12-2022 16:26 | Work :  \t   43.874 GiB / 1.979 TiB, 2%, 82.697 MiB/s, ETA 6h49m15 | peredano :  0 / 20, 0 | time_wok me:     10m15.5\n","data 14-12-2022 16:27 | Work :  \t   44.208 GiB / 1.979 TiB, 2%, 83.066 MiB/s, ETA 6h47m21 | peredano :  0 / 20, 0 | time_wok me:     10m20.0\n","data 14-12-2022 16:27 | Work :  \t   44.578 GiB / 1.979 TiB, 2%, 83.769 MiB/s, ETA 6h43m52 | peredano :  0 / 20, 0 | time_wok me:     10m24.5\n","data 14-12-2022 16:27 | Work :  \t   44.901 GiB / 1.979 TiB, 2%, 81.189 MiB/s, ETA 6h56m38 | peredano :  0 / 20, 0 | time_wok me:     10m29.0\n","data 14-12-2022 16:27 | Work :  \t   45.271 GiB / 1.979 TiB, 2%, 81.607 MiB/s, ETA 6h54m25 | peredano :  0 / 20, 0 | time_wok me:     10m33.5\n","data 14-12-2022 16:27 | Work :  \t   45.651 GiB / 1.979 TiB, 2%, 82.779 MiB/s, ETA 6h48m28 | peredano :  0 / 20, 0 | time_wok me:     10m38.0\n","data 14-12-2022 16:27 | Work :  \t   46.036 GiB / 1.979 TiB, 2%, 83.968 MiB/s, ETA 6h42m37 | peredano :  0 / 20, 0 | time_wok me:     10m42.5\n","data 14-12-2022 16:27 | Work :  \t   46.406 GiB / 1.979 TiB, 2%, 83.964 MiB/s, ETA 6h42m33 | peredano :  0 / 20, 0 | time_wok me:     10m46.5\n","data 14-12-2022 16:27 | Work :  \t   46.776 GiB / 1.979 TiB, 2%, 84.881 MiB/s, ETA 6h38m8 | peredano :  0 / 20, 0 | time_wok me:     10m51.0\n","data 14-12-2022 16:27 | Work :  \t   47.166 GiB / 1.979 TiB, 2%, 84.630 MiB/s, ETA 6h39m14 | peredano :  0 / 20, 0 | time_wok me:     10m55.5\n","data 14-12-2022 16:27 | Work :  \t   47.490 GiB / 1.979 TiB, 2%, 84.538 MiB/s, ETA 6h39m36 | peredano :  0 / 20, 0 | time_wok me:      11m0.0\n","data 14-12-2022 16:27 | Work :  \t   47.868 GiB / 1.979 TiB, 2%, 84.880 MiB/s, ETA 6h37m55 | peredano :  0 / 20, 0 | time_wok me:      11m4.5\n","data 14-12-2022 16:27 | Work :  \t   48.187 GiB / 1.979 TiB, 2%, 81.377 MiB/s, ETA 6h54m59 | peredano :  0 / 20, 0 | time_wok me:      11m9.0\n","data 14-12-2022 16:27 | Work :  \t   48.579 GiB / 1.979 TiB, 2%, 83.676 MiB/s, ETA 6h43m30 | peredano :  0 / 20, 0 | time_wok me:     11m13.5\n","data 14-12-2022 16:27 | Work :  \t   48.912 GiB / 1.979 TiB, 2%, 81.217 MiB/s, ETA 6h55m38 | peredano :  0 / 20, 0 | time_wok me:     11m18.0\n","data 14-12-2022 16:28 | Work :  \t   49.309 GiB / 1.979 TiB, 2%, 82.091 MiB/s, ETA 6h51m8 | peredano :  0 / 20, 0 | time_wok me:     11m22.5\n","data 14-12-2022 16:28 | Work :  \t   49.677 GiB / 1.979 TiB, 2%, 84.685 MiB/s, ETA 6h38m28 | peredano :  0 / 20, 0 | time_wok me:     11m26.5\n","data 14-12-2022 16:28 | Work :  \t   50.044 GiB / 1.979 TiB, 2%, 84.639 MiB/s, ETA 6h38m37 | peredano :  0 / 20, 0 | time_wok me:     11m31.0\n","data 14-12-2022 16:28 | Work :  \t   50.426 GiB / 1.979 TiB, 2%, 84.279 MiB/s, ETA 6h40m14 | peredano :  0 / 20, 0 | time_wok me:     11m35.5\n","data 14-12-2022 16:28 | Work :  \t   50.764 GiB / 1.979 TiB, 3%, 84.601 MiB/s, ETA 6h38m39 | peredano :  0 / 20, 0 | time_wok me:     11m40.0\n","data 14-12-2022 16:28 | Work :  \t   51.126 GiB / 1.979 TiB, 3%, 84.739 MiB/s, ETA 6h37m55 | peredano :  0 / 20, 0 | time_wok me:     11m44.5\n","data 14-12-2022 16:28 | Work :  \t   51.491 GiB / 1.979 TiB, 3%, 83.523 MiB/s, ETA 6h43m38 | peredano :  0 / 20, 0 | time_wok me:     11m49.0\n","data 14-12-2022 16:28 | Work :  \t   51.875 GiB / 1.979 TiB, 3%, 83.265 MiB/s, ETA 6h44m49 | peredano :  0 / 20, 0 | time_wok me:     11m53.5\n","data 14-12-2022 16:28 | Work :  \t   52.234 GiB / 1.979 TiB, 3%, 84.278 MiB/s, ETA 6h39m52 | peredano :  0 / 20, 0 | time_wok me:     11m58.0\n","data 14-12-2022 16:28 | Work :  \t   52.627 GiB / 1.979 TiB, 3%, 84.272 MiB/s, ETA 6h39m49 | peredano :  0 / 20, 0 | time_wok me:      12m2.5\n","data 14-12-2022 16:28 | Work :  \t   53.001 GiB / 1.979 TiB, 3%, 85.668 MiB/s, ETA 6h33m14 | peredano :  0 / 20, 0 | time_wok me:      12m6.5\n","data 14-12-2022 16:28 | Work :  \t   53.355 GiB / 1.979 TiB, 3%, 85.856 MiB/s, ETA 6h32m18 | peredano :  0 / 20, 0 | time_wok me:     12m11.0\n","data 14-12-2022 16:28 | Work :  \t   53.765 GiB / 1.979 TiB, 3%, 86.378 MiB/s, ETA 6h29m51 | peredano :  0 / 20, 0 | time_wok me:     12m15.5\n","data 14-12-2022 16:29 | Work :  \t   54.083 GiB / 1.979 TiB, 3%, 85.396 MiB/s, ETA 6h34m16 | peredano :  0 / 20, 0 | time_wok me:     12m20.0\n","data 14-12-2022 16:29 | Work :  \t   54.474 GiB / 1.979 TiB, 3%, 86.332 MiB/s, ETA 6h29m55 | peredano :  0 / 20, 0 | time_wok me:     12m24.5\n","data 14-12-2022 16:29 | Work :  \t   54.835 GiB / 1.979 TiB, 3%, 85.255 MiB/s, ETA 6h34m46 | peredano :  0 / 20, 0 | time_wok me:     12m29.0\n","data 14-12-2022 16:29 | Work :  \t   55.235 GiB / 1.979 TiB, 3%, 85.710 MiB/s, ETA 6h32m36 | peredano :  0 / 20, 0 | time_wok me:     12m33.5\n","data 14-12-2022 16:29 | Work :  \t   55.606 GiB / 1.979 TiB, 3%, 86.797 MiB/s, ETA 6h27m36 | peredano :  0 / 20, 0 | time_wok me:     12m38.0\n","data 14-12-2022 16:29 | Work :  \t   55.971 GiB / 1.979 TiB, 3%, 85.418 MiB/s, ETA 6h33m48 | peredano :  0 / 20, 0 | time_wok me:     12m42.5\n","data 14-12-2022 16:29 | Work :  \t   56.320 GiB / 1.979 TiB, 3%, 84.528 MiB/s, ETA 6h37m52 | peredano :  0 / 20, 0 | time_wok me:     12m46.5\n","data 14-12-2022 16:29 | Work :  \t   56.732 GiB / 1.979 TiB, 3%, 85.313 MiB/s, ETA 6h34m7 | peredano :  0 / 20, 0 | time_wok me:     12m51.0\n","data 14-12-2022 16:29 | Work :  \t   57.098 GiB / 1.979 TiB, 3%, 85.489 MiB/s, ETA 6h33m14 | peredano :  0 / 20, 0 | time_wok me:     12m55.5\n","data 14-12-2022 16:29 | Work :  \t   57.401 GiB / 1.979 TiB, 3%, 84.272 MiB/s, ETA 6h38m51 | peredano :  0 / 20, 0 | time_wok me:      13m0.0\n","data 14-12-2022 16:29 | Work :  \t   57.753 GiB / 1.979 TiB, 3%, 83.784 MiB/s, ETA 6h41m6 | peredano :  0 / 20, 0 | time_wok me:      13m4.5\n","data 14-12-2022 16:29 | Work :  \t   58.143 GiB / 1.979 TiB, 3%, 84.258 MiB/s, ETA 6h38m46 | peredano :  0 / 20, 0 | time_wok me:      13m9.0\n","data 14-12-2022 16:29 | Work :  \t   58.512 GiB / 1.979 TiB, 3%, 83.631 MiB/s, ETA 6h41m41 | peredano :  0 / 20, 0 | time_wok me:     13m13.5\n","data 14-12-2022 16:29 | Work :  \t   58.891 GiB / 1.979 TiB, 3%, 84.229 MiB/s, ETA 6h38m45 | peredano :  0 / 20, 0 | time_wok me:     13m18.0\n","data 14-12-2022 16:30 | Work :  \t   59.272 GiB / 1.979 TiB, 3%, 84.192 MiB/s, ETA 6h38m51 | peredano :  0 / 20, 0 | time_wok me:     13m22.5\n","data 14-12-2022 16:30 | Work :  \t   59.619 GiB / 1.979 TiB, 3%, 84.197 MiB/s, ETA 6h38m46 | peredano :  0 / 20, 0 | time_wok me:     13m26.5\n","data 14-12-2022 16:30 | Work :  \t   60.023 GiB / 1.979 TiB, 3%, 84.780 MiB/s, ETA 6h35m56 | peredano :  0 / 20, 0 | time_wok me:     13m31.0\n","data 14-12-2022 16:30 | Work :  \t   60.342 GiB / 1.979 TiB, 3%, 82.095 MiB/s, ETA 6h48m49 | peredano :  0 / 20, 0 | time_wok me:     13m35.5\n","data 14-12-2022 16:30 | Work :  \t   60.685 GiB / 1.979 TiB, 3%, 83.422 MiB/s, ETA 6h42m15 | peredano :  0 / 20, 0 | time_wok me:     13m40.0\n","data 14-12-2022 16:30 | Work :  \t   61.077 GiB / 1.979 TiB, 3%, 84.642 MiB/s, ETA 6h36m22 | peredano :  0 / 20, 0 | time_wok me:     13m44.5\n","data 14-12-2022 16:30 | Work :  \t   61.429 GiB / 1.979 TiB, 3%, 84.087 MiB/s, ETA 6h38m55 | peredano :  0 / 20, 0 | time_wok me:     13m49.0\n","data 14-12-2022 16:30 | Work :  \t   61.790 GiB / 1.979 TiB, 3%, 84.014 MiB/s, ETA 6h39m11 | peredano :  0 / 20, 0 | time_wok me:     13m53.5\n","data 14-12-2022 16:30 | Work :  \t   62.158 GiB / 1.979 TiB, 3%, 83.199 MiB/s, ETA 6h43m2 | peredano :  0 / 20, 0 | time_wok me:     13m58.0\n","data 14-12-2022 16:30 | Work :  \t   62.523 GiB / 1.979 TiB, 3%, 84.982 MiB/s, ETA 6h34m30 | peredano :  0 / 20, 0 | time_wok me:      14m2.5\n","data 14-12-2022 16:30 | Work :  \t   62.901 GiB / 1.979 TiB, 3%, 84.174 MiB/s, ETA 6h38m12 | peredano :  0 / 20, 0 | time_wok me:      14m6.5\n","data 14-12-2022 16:30 | Work :  \t   63.279 GiB / 1.979 TiB, 3%, 84.295 MiB/s, ETA 6h37m33 | peredano :  0 / 20, 0 | time_wok me:     14m11.0\n","data 14-12-2022 16:30 | Work :  \t   63.658 GiB / 1.979 TiB, 3%, 84.833 MiB/s, ETA 6h34m58 | peredano :  0 / 20, 0 | time_wok me:     14m15.5\n","data 14-12-2022 16:31 | Work :  \t   64.003 GiB / 1.979 TiB, 3%, 85.480 MiB/s, ETA 6h31m54 | peredano :  0 / 20, 0 | time_wok me:     14m20.0\n","data 14-12-2022 16:31 | Work :  \t   64.381 GiB / 1.979 TiB, 3%, 86.241 MiB/s, ETA 6h28m22 | peredano :  0 / 20, 0 | time_wok me:     14m24.5\n","data 14-12-2022 16:31 | Work :  \t   64.750 GiB / 1.979 TiB, 3%, 85.192 MiB/s, ETA 6h33m5 | peredano :  0 / 20, 0 | time_wok me:     14m29.0\n","data 14-12-2022 16:31 | Work :  \t   65.103 GiB / 1.979 TiB, 3%, 84.598 MiB/s, ETA 6h35m46 | peredano :  0 / 20, 0 | time_wok me:     14m33.5\n","data 14-12-2022 16:31 | Work :  \t   65.469 GiB / 1.979 TiB, 3%, 84.170 MiB/s, ETA 6h37m42 | peredano :  0 / 20, 0 | time_wok me:     14m38.0\n","data 14-12-2022 16:31 | Work :  \t   65.830 GiB / 1.979 TiB, 3%, 82.895 MiB/s, ETA 6h43m45 | peredano :  0 / 20, 0 | time_wok me:     14m42.5\n","data 14-12-2022 16:31 | Work :  \t   66.215 GiB / 1.979 TiB, 3%, 84.062 MiB/s, ETA 6h38m4 | peredano :  0 / 20, 0 | time_wok me:     14m46.5\n","data 14-12-2022 16:31 | Work :  \t   66.584 GiB / 1.979 TiB, 3%, 83.930 MiB/s, ETA 6h38m37 | peredano :  0 / 20, 0 | time_wok me:     14m51.0\n","data 14-12-2022 16:31 | Work :  \t   66.954 GiB / 1.979 TiB, 3%, 84.531 MiB/s, ETA 6h35m42 | peredano :  0 / 20, 0 | time_wok me:     14m55.5\n","data 14-12-2022 16:31 | Work :  \t   67.304 GiB / 1.979 TiB, 3%, 85.877 MiB/s, ETA 6h29m26 | peredano :  0 / 20, 0 | time_wok me:      15m0.0\n","data 14-12-2022 16:31 | Work :  \t   67.664 GiB / 1.979 TiB, 3%, 86.004 MiB/s, ETA 6h28m47 | peredano :  0 / 20, 0 | time_wok me:      15m4.5\n","data 14-12-2022 16:31 | Work :  \t   68.016 GiB / 1.979 TiB, 3%, 82.959 MiB/s, ETA 6h42m59 | peredano :  0 / 20, 0 | time_wok me:      15m9.0\n","data 14-12-2022 16:31 | Work :  \t   68.372 GiB / 1.979 TiB, 3%, 81.886 MiB/s, ETA 6h48m11 | peredano :  0 / 20, 0 | time_wok me:     15m13.5\n","data 14-12-2022 16:31 | Work :  \t   68.723 GiB / 1.979 TiB, 3%, 82.565 MiB/s, ETA 6h44m46 | peredano :  0 / 20, 0 | time_wok me:     15m18.0\n","data 14-12-2022 16:32 | Work :  \t   69.129 GiB / 1.979 TiB, 3%, 84.164 MiB/s, ETA 6h36m59 | peredano :  0 / 20, 0 | time_wok me:     15m22.5\n","data 14-12-2022 16:32 | Work :  \t   69.488 GiB / 1.979 TiB, 3%, 83.970 MiB/s, ETA 6h37m50 | peredano :  0 / 20, 0 | time_wok me:     15m26.5\n","data 14-12-2022 16:32 | Work :  \t   69.832 GiB / 1.979 TiB, 3%, 84.014 MiB/s, ETA 6h37m33 | peredano :  0 / 20, 0 | time_wok me:     15m31.0\n","data 14-12-2022 16:32 | Work :  \t   70.209 GiB / 1.979 TiB, 3%, 82.812 MiB/s, ETA 6h43m15 | peredano :  0 / 20, 0 | time_wok me:     15m35.5\n","data 14-12-2022 16:32 | Work :  \t   70.560 GiB / 1.979 TiB, 3%, 84.273 MiB/s, ETA 6h36m11 | peredano :  0 / 20, 0 | time_wok me:     15m40.0\n","data 14-12-2022 16:32 | Work :  \t   70.912 GiB / 1.979 TiB, 3%, 83.939 MiB/s, ETA 6h37m42 | peredano :  0 / 20, 0 | time_wok me:     15m44.5\n","data 14-12-2022 16:32 | Work :  \t   71.279 GiB / 1.979 TiB, 4%, 83.983 MiB/s, ETA 6h37m25 | peredano :  0 / 20, 0 | time_wok me:     15m49.0\n","data 14-12-2022 16:32 | Work :  \t   71.648 GiB / 1.979 TiB, 4%, 83.728 MiB/s, ETA 6h38m33 | peredano :  0 / 20, 0 | time_wok me:     15m53.5\n","data 14-12-2022 16:32 | Work :  \t   72.015 GiB / 1.979 TiB, 4%, 83.726 MiB/s, ETA 6h38m29 | peredano :  0 / 20, 0 | time_wok me:     15m58.0\n","data 14-12-2022 16:32 | Work :  \t   72.347 GiB / 1.979 TiB, 4%, 81.122 MiB/s, ETA 6h51m12 | peredano :  0 / 20, 0 | time_wok me:      16m2.5\n","data 14-12-2022 16:32 | Work :  \t   72.688 GiB / 1.979 TiB, 4%, 81.043 MiB/s, ETA 6h51m32 | peredano :  0 / 20, 0 | time_wok me:      16m6.5\n","data 14-12-2022 16:32 | Work :  \t   73.078 GiB / 1.979 TiB, 4%, 81.695 MiB/s, ETA 6h48m10 | peredano :  0 / 20, 0 | time_wok me:     16m11.0\n","data 14-12-2022 16:32 | Work :  \t   73.465 GiB / 1.979 TiB, 4%, 83.669 MiB/s, ETA 6h38m27 | peredano :  0 / 20, 0 | time_wok me:     16m15.5\n","data 14-12-2022 16:33 | Work :  \t   73.789 GiB / 1.979 TiB, 4%, 84.061 MiB/s, ETA 6h36m32 | peredano :  0 / 20, 0 | time_wok me:     16m20.0\n","data 14-12-2022 16:33 | Work :  \t   74.142 GiB / 1.979 TiB, 4%, 83.113 MiB/s, ETA 6h40m59 | peredano :  0 / 20, 0 | time_wok me:     16m24.5\n","data 14-12-2022 16:33 | Work :  \t   74.471 GiB / 1.979 TiB, 4%, 80.604 MiB/s, ETA 6h53m23 | peredano :  0 / 20, 0 | time_wok me:     16m29.0\n","data 14-12-2022 16:33 | Work :  \t   74.816 GiB / 1.979 TiB, 4%, 80.797 MiB/s, ETA 6h52m20 | peredano :  0 / 20, 0 | time_wok me:     16m33.5\n","data 14-12-2022 16:33 | Work :  \t   75.162 GiB / 1.979 TiB, 4%, 79.564 MiB/s, ETA 6h58m39 | peredano :  0 / 20, 0 | time_wok me:     16m38.0\n","data 14-12-2022 16:33 | Work :  \t   75.522 GiB / 1.979 TiB, 4%, 80.726 MiB/s, ETA 6h52m33 | peredano :  0 / 20, 0 | time_wok me:     16m42.5\n","data 14-12-2022 16:33 | Work :  \t   75.923 GiB / 1.979 TiB, 4%, 82.878 MiB/s, ETA 6h41m45 | peredano :  0 / 20, 0 | time_wok me:     16m46.5\n","data 14-12-2022 16:33 | Work :  \t   76.298 GiB / 1.979 TiB, 4%, 83.191 MiB/s, ETA 6h40m10 | peredano :  0 / 20, 0 | time_wok me:     16m51.0\n","data 14-12-2022 16:33 | Work :  \t   76.691 GiB / 1.979 TiB, 4%, 85.568 MiB/s, ETA 6h28m58 | peredano :  0 / 20, 0 | time_wok me:     16m55.5\n","data 14-12-2022 16:33 | Work :  \t   77.013 GiB / 1.979 TiB, 4%, 84.737 MiB/s, ETA 6h32m43 | peredano :  0 / 20, 0 | time_wok me:      17m0.0\n","data 14-12-2022 16:33 | Work :  \t   77.401 GiB / 1.979 TiB, 4%, 84.912 MiB/s, ETA 6h31m50 | peredano :  0 / 20, 0 | time_wok me:      17m4.5\n","data 14-12-2022 16:33 | Work :  \t   77.776 GiB / 1.979 TiB, 4%, 85.611 MiB/s, ETA 6h28m33 | peredano :  0 / 20, 0 | time_wok me:      17m9.0\n","data 14-12-2022 16:33 | Work :  \t   78.137 GiB / 1.979 TiB, 4%, 84.788 MiB/s, ETA 6h32m15 | peredano :  0 / 20, 0 | time_wok me:     17m13.5\n","data 14-12-2022 16:33 | Work :  \t   78.529 GiB / 1.979 TiB, 4%, 86.497 MiB/s, ETA 6h24m26 | peredano :  0 / 20, 0 | time_wok me:     17m18.0\n","data 14-12-2022 16:34 | Work :  \t   78.888 GiB / 1.979 TiB, 4%, 85.596 MiB/s, ETA 6h28m24 | peredano :  0 / 20, 0 | time_wok me:     17m22.5\n","data 14-12-2022 16:34 | Work :  \t   79.263 GiB / 1.979 TiB, 4%, 84.813 MiB/s, ETA 6h31m55 | peredano :  0 / 20, 0 | time_wok me:     17m26.5\n","data 14-12-2022 16:34 | Work :  \t   79.651 GiB / 1.979 TiB, 4%, 85.606 MiB/s, ETA 6h28m12 | peredano :  0 / 20, 0 | time_wok me:     17m31.0\n","data 14-12-2022 16:34 | Work :  \t   80.024 GiB / 1.979 TiB, 4%, 85.640 MiB/s, ETA 6h27m58 | peredano :  0 / 20, 0 | time_wok me:     17m35.5\n","data 14-12-2022 16:34 | Work :  \t   80.364 GiB / 1.979 TiB, 4%, 86.620 MiB/s, ETA 6h23m31 | peredano :  0 / 20, 0 | time_wok me:     17m40.0\n","data 14-12-2022 16:34 | Work :  \t   80.676 GiB / 1.979 TiB, 4%, 85.104 MiB/s, ETA 6h30m17 | peredano :  0 / 20, 0 | time_wok me:     17m44.5\n","data 14-12-2022 16:34 | Work :  \t   81.077 GiB / 1.979 TiB, 4%, 83.969 MiB/s, ETA 6h35m29 | peredano :  0 / 20, 0 | time_wok me:     17m49.0\n","data 14-12-2022 16:34 | Work :  \t   81.461 GiB / 1.979 TiB, 4%, 85.126 MiB/s, ETA 6h30m2 | peredano :  0 / 20, 0 | time_wok me:     17m53.5\n","data 14-12-2022 16:34 | Work :  \t   81.832 GiB / 1.979 TiB, 4%, 84.628 MiB/s, ETA 6h32m15 | peredano :  0 / 20, 0 | time_wok me:     17m58.0\n","data 14-12-2022 16:34 | Work :  \t   82.204 GiB / 1.979 TiB, 4%, 85.482 MiB/s, ETA 6h28m15 | peredano :  0 / 20, 0 | time_wok me:      18m2.5\n","data 14-12-2022 16:34 | Work :  \t   82.587 GiB / 1.979 TiB, 4%, 85.757 MiB/s, ETA 6h26m56 | peredano :  0 / 20, 0 | time_wok me:      18m6.5\n","data 14-12-2022 16:34 | Work :  \t   82.947 GiB / 1.979 TiB, 4%, 84.480 MiB/s, ETA 6h32m43 | peredano :  0 / 20, 0 | time_wok me:     18m11.0\n","data 14-12-2022 16:34 | Work :  \t   83.288 GiB / 1.979 TiB, 4%, 82.620 MiB/s, ETA 6h41m29 | peredano :  0 / 20, 0 | time_wok me:     18m15.5\n","data 14-12-2022 16:35 | Work :  \t   83.631 GiB / 1.979 TiB, 4%, 83.893 MiB/s, ETA 6h35m19 | peredano :  0 / 20, 0 | time_wok me:     18m20.0\n","data 14-12-2022 16:35 | Work :  \t   83.981 GiB / 1.979 TiB, 4%, 82.462 MiB/s, ETA 6h42m7 | peredano :  0 / 20, 0 | time_wok me:     18m24.5\n","data 14-12-2022 16:35 | Work :  \t   84.335 GiB / 1.979 TiB, 4%, 83.295 MiB/s, ETA 6h38m1 | peredano :  0 / 20, 0 | time_wok me:     18m29.0\n","data 14-12-2022 16:35 | Work :  \t   84.722 GiB / 1.979 TiB, 4%, 83.583 MiB/s, ETA 6h36m34 | peredano :  0 / 20, 0 | time_wok me:     18m33.5\n","data 14-12-2022 16:35 | Work :  \t   85.092 GiB / 1.979 TiB, 4%, 84.686 MiB/s, ETA 6h31m20 | peredano :  0 / 20, 0 | time_wok me:     18m38.0\n","data 14-12-2022 16:35 | Work :  \t   85.464 GiB / 1.979 TiB, 4%, 83.847 MiB/s, ETA 6h35m10 | peredano :  0 / 20, 0 | time_wok me:     18m42.5\n","data 14-12-2022 16:35 | Work :  \t   85.818 GiB / 1.979 TiB, 4%, 83.435 MiB/s, ETA 6h37m3 | peredano :  0 / 20, 0 | time_wok me:     18m46.5\n","data 14-12-2022 16:35 | Work :  \t   86.219 GiB / 1.979 TiB, 4%, 84.002 MiB/s, ETA 6h34m17 | peredano :  0 / 20, 0 | time_wok me:     18m51.0\n","data 14-12-2022 16:35 | Work :  \t   86.593 GiB / 1.979 TiB, 4%, 85.306 MiB/s, ETA 6h28m11 | peredano :  0 / 20, 0 | time_wok me:     18m55.5\n","data 14-12-2022 16:35 | Work :  \t   86.921 GiB / 1.979 TiB, 4%, 84.932 MiB/s, ETA 6h29m50 | peredano :  0 / 20, 0 | time_wok me:      19m0.0\n","data 14-12-2022 16:35 | Work :  \t   87.276 GiB / 1.979 TiB, 4%, 84.607 MiB/s, ETA 6h31m15 | peredano :  0 / 20, 0 | time_wok me:      19m4.5\n","data 14-12-2022 16:35 | Work :  \t   87.637 GiB / 1.979 TiB, 4%, 83.587 MiB/s, ETA 6h35m57 | peredano :  0 / 20, 0 | time_wok me:      19m9.0\n","data 14-12-2022 16:35 | Work :  \t   88.016 GiB / 1.979 TiB, 4%, 83.250 MiB/s, ETA 6h37m29 | peredano :  0 / 20, 0 | time_wok me:     19m13.5\n","data 14-12-2022 16:35 | Work :  \t   88.391 GiB / 1.979 TiB, 4%, 84.725 MiB/s, ETA 6h30m29 | peredano :  0 / 20, 0 | time_wok me:     19m18.0\n","data 14-12-2022 16:36 | Work :  \t   88.777 GiB / 1.979 TiB, 4%, 84.529 MiB/s, ETA 6h31m19 | peredano :  0 / 20, 0 | time_wok me:     19m22.5\n","data 14-12-2022 16:36 | Work :  \t   89.140 GiB / 1.979 TiB, 4%, 84.631 MiB/s, ETA 6h30m46 | peredano :  0 / 20, 0 | time_wok me:     19m26.5\n","data 14-12-2022 16:36 | Work :  \t   89.521 GiB / 1.979 TiB, 4%, 83.694 MiB/s, ETA 6h35m4 | peredano :  0 / 20, 0 | time_wok me:     19m31.0\n","data 14-12-2022 16:36 | Work :  \t   89.892 GiB / 1.979 TiB, 4%, 85.282 MiB/s, ETA 6h27m38 | peredano :  0 / 20, 0 | time_wok me:     19m35.5\n","data 14-12-2022 16:36 | Work :  \t   90.187 GiB / 1.979 TiB, 4%, 83.033 MiB/s, ETA 6h38m4 | peredano :  0 / 20, 0 | time_wok me:     19m40.0\n","data 14-12-2022 16:36 | Work :  \t   90.598 GiB / 1.979 TiB, 4%, 84.106 MiB/s, ETA 6h32m55 | peredano :  0 / 20, 0 | time_wok me:     19m44.5\n","data 14-12-2022 16:36 | Work :  \t   90.967 GiB / 1.979 TiB, 4%, 84.921 MiB/s, ETA 6h29m4 | peredano :  0 / 20, 0 | time_wok me:     19m49.0\n","data 14-12-2022 16:36 | Work :  \t   91.355 GiB / 1.979 TiB, 5%, 85.015 MiB/s, ETA 6h28m33 | peredano :  0 / 20, 0 | time_wok me:     19m53.5\n","data 14-12-2022 16:36 | Work :  \t   91.710 GiB / 1.979 TiB, 5%, 85.171 MiB/s, ETA 6h27m46 | peredano :  0 / 20, 0 | time_wok me:     19m58.0\n","data 14-12-2022 16:36 | Work :  \t   92.073 GiB / 1.979 TiB, 5%, 84.737 MiB/s, ETA 6h29m41 | peredano :  0 / 20, 0 | time_wok me:      20m2.5\n","data 14-12-2022 16:36 | Work :  \t   92.460 GiB / 1.979 TiB, 5%, 84.465 MiB/s, ETA 6h30m52 | peredano :  0 / 20, 0 | time_wok me:      20m6.5\n","data 14-12-2022 16:36 | Work :  \t   92.825 GiB / 1.979 TiB, 5%, 84.212 MiB/s, ETA 6h31m58 | peredano :  0 / 20, 0 | time_wok me:     20m11.0\n","data 14-12-2022 16:36 | Work :  \t   93.196 GiB / 1.979 TiB, 5%, 85.115 MiB/s, ETA 6h27m44 | peredano :  0 / 20, 0 | time_wok me:     20m15.5\n","data 14-12-2022 16:37 | Work :  \t   93.525 GiB / 1.979 TiB, 5%, 84.138 MiB/s, ETA 6h32m10 | peredano :  0 / 20, 0 | time_wok me:     20m20.0\n","data 14-12-2022 16:37 | Work :  \t   93.870 GiB / 1.979 TiB, 5%, 84.556 MiB/s, ETA 6h30m9 | peredano :  0 / 20, 0 | time_wok me:     20m24.5\n","data 14-12-2022 16:37 | Work :  \t   94.268 GiB / 1.979 TiB, 5%, 84.891 MiB/s, ETA 6h28m32 | peredano :  0 / 20, 0 | time_wok me:     20m29.0\n","data 14-12-2022 16:37 | Work :  \t   94.629 GiB / 1.979 TiB, 5%, 84.336 MiB/s, ETA 6h31m1 | peredano :  0 / 20, 0 | time_wok me:     20m33.5\n","data 14-12-2022 16:37 | Work :  \t   94.982 GiB / 1.979 TiB, 5%, 83.243 MiB/s, ETA 6h36m5 | peredano :  0 / 20, 0 | time_wok me:     20m38.0\n","data 14-12-2022 16:37 | Work :  \t   95.354 GiB / 1.979 TiB, 5%, 83.624 MiB/s, ETA 6h34m12 | peredano :  0 / 20, 0 | time_wok me:     20m42.5\n","data 14-12-2022 16:37 | Work :  \t   95.703 GiB / 1.979 TiB, 5%, 83.055 MiB/s, ETA 6h36m50 | peredano :  0 / 20, 0 | time_wok me:     20m46.5\n","data 14-12-2022 16:37 | Work :  \t   96.070 GiB / 1.979 TiB, 5%, 83.173 MiB/s, ETA 6h36m12 | peredano :  0 / 20, 0 | time_wok me:     20m51.0\n","data 14-12-2022 16:37 | Work :  \t   96.445 GiB / 1.979 TiB, 5%, 83.583 MiB/s, ETA 6h34m10 | peredano :  0 / 20, 0 | time_wok me:     20m55.5\n","data 14-12-2022 16:37 | Work :  \t   96.722 GiB / 1.979 TiB, 5%, 81.032 MiB/s, ETA 6h46m31 | peredano :  0 / 20, 0 | time_wok me:      21m0.0\n","data 14-12-2022 16:37 | Work :  \t   97.099 GiB / 1.979 TiB, 5%, 81.617 MiB/s, ETA 6h43m32 | peredano :  0 / 20, 0 | time_wok me:      21m4.5\n","data 14-12-2022 16:37 | Work :  \t   97.435 GiB / 1.979 TiB, 5%, 80.866 MiB/s, ETA 6h47m12 | peredano :  0 / 20, 0 | time_wok me:      21m9.0\n","data 14-12-2022 16:37 | Work :  \t   97.816 GiB / 1.979 TiB, 5%, 81.158 MiB/s, ETA 6h45m40 | peredano :  0 / 20, 0 | time_wok me:     21m13.5\n","data 14-12-2022 16:37 | Work :  \t   98.179 GiB / 1.979 TiB, 5%, 82.837 MiB/s, ETA 6h37m22 | peredano :  0 / 20, 0 | time_wok me:     21m18.0\n","data 14-12-2022 16:38 | Work :  \t   98.547 GiB / 1.979 TiB, 5%, 83.483 MiB/s, ETA 6h34m13 | peredano :  0 / 20, 0 | time_wok me:     21m22.5\n","data 14-12-2022 16:38 | Work :  \t   98.938 GiB / 1.979 TiB, 5%, 84.141 MiB/s, ETA 6h31m3 | peredano :  0 / 20, 0 | time_wok me:     21m26.5\n","data 14-12-2022 16:38 | Work :  \t   99.314 GiB / 1.979 TiB, 5%, 84.621 MiB/s, ETA 6h28m45 | peredano :  0 / 20, 0 | time_wok me:     21m31.0\n","data 14-12-2022 16:38 | Work :  \t   99.708 GiB / 1.979 TiB, 5%, 85.234 MiB/s, ETA 6h25m53 | peredano :  0 / 20, 0 | time_wok me:     21m35.5\n","data 14-12-2022 16:38 | Work :  \t  100.046 GiB / 1.979 TiB, 5%, 86.420 MiB/s, ETA 6h20m31 | peredano :  0 / 20, 0 | time_wok me:     21m40.0\n","data 14-12-2022 16:38 | Work :  \t  100.380 GiB / 1.979 TiB, 5%, 85.479 MiB/s, ETA 6h24m39 | peredano :  0 / 20, 0 | time_wok me:     21m44.5\n","data 14-12-2022 16:38 | Work :  \t  100.786 GiB / 1.979 TiB, 5%, 85.907 MiB/s, ETA 6h22m39 | peredano :  0 / 20, 0 | time_wok me:     21m49.0\n","data 14-12-2022 16:38 | Work :  \t  101.140 GiB / 1.979 TiB, 5%, 84.854 MiB/s, ETA 6h27m19 | peredano :  0 / 20, 0 | time_wok me:     21m53.5\n","data 14-12-2022 16:38 | Work :  \t  101.489 GiB / 1.979 TiB, 5%, 83.700 MiB/s, ETA 6h32m36 | peredano :  0 / 20, 0 | time_wok me:     21m58.0\n","data 14-12-2022 16:38 | Work :  \t  101.862 GiB / 1.979 TiB, 5%, 83.156 MiB/s, ETA 6h35m5 | peredano :  0 / 20, 0 | time_wok me:      22m2.5\n","data 14-12-2022 16:38 | Work :  \t  102.243 GiB / 1.979 TiB, 5%, 84.644 MiB/s, ETA 6h28m4 | peredano :  0 / 20, 0 | time_wok me:      22m6.5\n","data 14-12-2022 16:38 | Work :  \t  102.633 GiB / 1.979 TiB, 5%, 84.977 MiB/s, ETA 6h26m28 | peredano :  0 / 20, 0 | time_wok me:     22m11.0\n","data 14-12-2022 16:38 | Work :  \t  103.004 GiB / 1.979 TiB, 5%, 85.900 MiB/s, ETA 6h22m14 | peredano :  0 / 20, 0 | time_wok me:     22m15.5\n","data 14-12-2022 16:39 | Work :  \t  103.325 GiB / 1.979 TiB, 5%, 84.886 MiB/s, ETA 6h26m44 | peredano :  0 / 20, 0 | time_wok me:     22m20.0\n","data 14-12-2022 16:39 | Work :  \t  103.705 GiB / 1.979 TiB, 5%, 85.451 MiB/s, ETA 6h24m6 | peredano :  0 / 20, 0 | time_wok me:     22m24.5\n","data 14-12-2022 16:39 | Work :  \t  104.087 GiB / 1.979 TiB, 5%, 85.314 MiB/s, ETA 6h24m39 | peredano :  0 / 20, 0 | time_wok me:     22m29.0\n","data 14-12-2022 16:39 | Work :  \t  104.463 GiB / 1.979 TiB, 5%, 84.873 MiB/s, ETA 6h26m34 | peredano :  0 / 20, 0 | time_wok me:     22m33.5\n","data 14-12-2022 16:39 | Work :  \t  104.801 GiB / 1.979 TiB, 5%, 83.310 MiB/s, ETA 6h33m45 | peredano :  0 / 20, 0 | time_wok me:     22m38.0\n","data 14-12-2022 16:39 | Work :  \t  105.198 GiB / 1.979 TiB, 5%, 84.189 MiB/s, ETA 6h29m34 | peredano :  0 / 20, 0 | time_wok me:     22m42.5\n","data 14-12-2022 16:39 | Work :  \t  105.540 GiB / 1.979 TiB, 5%, 83.388 MiB/s, ETA 6h33m14 | peredano :  0 / 20, 0 | time_wok me:     22m46.5\n","data 14-12-2022 16:39 | Work :  \t  105.905 GiB / 1.979 TiB, 5%, 84.035 MiB/s, ETA 6h30m8 | peredano :  0 / 20, 0 | time_wok me:     22m51.0\n","data 14-12-2022 16:39 | Work :  \t  106.265 GiB / 1.979 TiB, 5%, 83.008 MiB/s, ETA 6h34m53 | peredano :  0 / 20, 0 | time_wok me:     22m55.5\n","data 14-12-2022 16:39 | Work :  \t  106.595 GiB / 1.979 TiB, 5%, 83.491 MiB/s, ETA 6h32m32 | peredano :  0 / 20, 0 | time_wok me:      23m0.0\n","data 14-12-2022 16:39 | Work :  \t  106.936 GiB / 1.979 TiB, 5%, 83.239 MiB/s, ETA 6h33m39 | peredano :  0 / 20, 0 | time_wok me:      23m4.5\n","data 14-12-2022 16:39 | Work :  \t  107.336 GiB / 1.979 TiB, 5%, 84.234 MiB/s, ETA 6h28m55 | peredano :  0 / 20, 0 | time_wok me:      23m9.0\n","data 14-12-2022 16:39 | Work :  \t  107.717 GiB / 1.979 TiB, 5%, 84.224 MiB/s, ETA 6h28m53 | peredano :  0 / 20, 0 | time_wok me:     23m13.5\n","data 14-12-2022 16:39 | Work :  \t  108.038 GiB / 1.979 TiB, 5%, 81.977 MiB/s, ETA 6h39m29 | peredano :  0 / 20, 0 | time_wok me:     23m18.0\n","data 14-12-2022 16:40 | Work :  \t  108.441 GiB / 1.979 TiB, 5%, 82.950 MiB/s, ETA 6h34m43 | peredano :  0 / 20, 0 | time_wok me:     23m22.5\n","data 14-12-2022 16:40 | Work :  \t  108.806 GiB / 1.979 TiB, 5%, 84.017 MiB/s, ETA 6h29m37 | peredano :  0 / 20, 0 | time_wok me:     23m26.5\n","data 14-12-2022 16:40 | Work :  \t  109.183 GiB / 1.979 TiB, 5%, 83.172 MiB/s, ETA 6h33m30 | peredano :  0 / 20, 0 | time_wok me:     23m31.0\n","data 14-12-2022 16:40 | Work :  \t  109.555 GiB / 1.979 TiB, 5%, 84.752 MiB/s, ETA 6h26m6 | peredano :  0 / 20, 0 | time_wok me:     23m35.5\n","data 14-12-2022 16:40 | Work :  \t  109.871 GiB / 1.979 TiB, 5%, 84.396 MiB/s, ETA 6h27m40 | peredano :  0 / 20, 0 | time_wok me:     23m40.0\n","data 14-12-2022 16:40 | Work :  \t  110.252 GiB / 1.979 TiB, 5%, 82.987 MiB/s, ETA 6h34m10 | peredano :  0 / 20, 0 | time_wok me:     23m44.5\n","data 14-12-2022 16:40 | Work :  \t  110.637 GiB / 1.979 TiB, 5%, 85.829 MiB/s, ETA 6h21m2 | peredano :  0 / 20, 0 | time_wok me:     23m49.0\n","data 14-12-2022 16:40 | Work :  \t  110.984 GiB / 1.979 TiB, 5%, 84.985 MiB/s, ETA 6h24m45 | peredano :  0 / 20, 0 | time_wok me:     23m53.5\n","data 14-12-2022 16:40 | Work :  \t  111.336 GiB / 1.979 TiB, 5%, 83.097 MiB/s, ETA 6h33m25 | peredano :  0 / 20, 0 | time_wok me:     23m58.0\n","data 14-12-2022 16:40 | Work :  \t  111.745 GiB / 1.979 TiB, 6%, 84.409 MiB/s, ETA 6h27m13 | peredano :  0 / 20, 0 | time_wok me:      24m2.5\n","data 14-12-2022 16:40 | Work :  \t  112.096 GiB / 1.979 TiB, 6%, 83.897 MiB/s, ETA 6h29m31 | peredano :  0 / 20, 0 | time_wok me:      24m6.5\n","data 14-12-2022 16:40 | Work :  \t  112.473 GiB / 1.979 TiB, 6%, 85.475 MiB/s, ETA 6h22m15 | peredano :  0 / 20, 0 | time_wok me:     24m11.0\n","data 14-12-2022 16:40 | Work :  \t  112.853 GiB / 1.979 TiB, 6%, 84.242 MiB/s, ETA 6h27m46 | peredano :  0 / 20, 0 | time_wok me:     24m15.5\n","data 14-12-2022 16:41 | Work :  \t  113.207 GiB / 1.979 TiB, 6%, 86.680 MiB/s, ETA 6h16m47 | peredano :  0 / 20, 0 | time_wok me:     24m20.0\n","data 14-12-2022 16:41 | Work :  \t  113.568 GiB / 1.979 TiB, 6%, 85.389 MiB/s, ETA 6h22m25 | peredano :  0 / 20, 0 | time_wok me:     24m24.5\n","data 14-12-2022 16:41 | Work :  \t  113.900 GiB / 1.979 TiB, 6%, 82.163 MiB/s, ETA 6h37m21 | peredano :  0 / 20, 0 | time_wok me:     24m29.0\n","data 14-12-2022 16:41 | Work :  \t  114.277 GiB / 1.979 TiB, 6%, 83.548 MiB/s, ETA 6h30m42 | peredano :  0 / 20, 0 | time_wok me:     24m33.5\n","data 14-12-2022 16:41 | Work :  \t  114.649 GiB / 1.979 TiB, 6%, 83.742 MiB/s, ETA 6h29m43 | peredano :  0 / 20, 0 | time_wok me:     24m38.0\n","data 14-12-2022 16:41 | Work :  \t  114.996 GiB / 1.979 TiB, 6%, 83.405 MiB/s, ETA 6h31m13 | peredano :  0 / 20, 0 | time_wok me:     24m42.5\n","data 14-12-2022 16:41 | Work :  \t  115.343 GiB / 1.979 TiB, 6%, 81.394 MiB/s, ETA 6h40m48 | peredano :  0 / 20, 0 | time_wok me:     24m46.5\n","data 14-12-2022 16:41 | Work :  \t  115.678 GiB / 1.979 TiB, 6%, 79.895 MiB/s, ETA 6h48m16 | peredano :  0 / 20, 0 | time_wok me:     24m51.0\n","data 14-12-2022 16:41 | Work :  \t  116.015 GiB / 1.979 TiB, 6%, 79.425 MiB/s, ETA 6h50m36 | peredano :  0 / 20, 0 | time_wok me:     24m55.5\n","data 14-12-2022 16:41 | Work :  \t  116.363 GiB / 1.979 TiB, 6%, 81.708 MiB/s, ETA 6h39m3 | peredano :  0 / 20, 0 | time_wok me:      25m0.0\n","data 14-12-2022 16:41 | Work :  \t  116.747 GiB / 1.979 TiB, 6%, 83.146 MiB/s, ETA 6h32m5 | peredano :  0 / 20, 0 | time_wok me:      25m4.5\n","data 14-12-2022 16:41 | Work :  \t  117.132 GiB / 1.979 TiB, 6%, 85.171 MiB/s, ETA 6h22m41 | peredano :  0 / 20, 0 | time_wok me:      25m9.0\n","data 14-12-2022 16:41 | Work :  \t  117.479 GiB / 1.979 TiB, 6%, 83.358 MiB/s, ETA 6h30m56 | peredano :  0 / 20, 0 | time_wok me:     25m13.5\n","data 14-12-2022 16:41 | Work :  \t  117.837 GiB / 1.979 TiB, 6%, 82.863 MiB/s, ETA 6h33m11 | peredano :  0 / 20, 0 | time_wok me:     25m18.0\n","data 14-12-2022 16:42 | Work :  \t  118.206 GiB / 1.979 TiB, 6%, 83.607 MiB/s, ETA 6h29m37 | peredano :  0 / 20, 0 | time_wok me:     25m22.5\n","data 14-12-2022 16:42 | Work :  \t  118.587 GiB / 1.979 TiB, 6%, 83.761 MiB/s, ETA 6h28m49 | peredano :  0 / 20, 0 | time_wok me:     25m26.5\n","data 14-12-2022 16:42 | Work :  \t  118.941 GiB / 1.979 TiB, 6%, 82.483 MiB/s, ETA 6h34m46 | peredano :  0 / 20, 0 | time_wok me:     25m31.0\n","data 14-12-2022 16:42 | Work :  \t  119.285 GiB / 1.979 TiB, 6%, 81.883 MiB/s, ETA 6h37m36 | peredano :  0 / 20, 0 | time_wok me:     25m35.5\n","data 14-12-2022 16:42 | Work :  \t  119.633 GiB / 1.979 TiB, 6%, 83.675 MiB/s, ETA 6h29 | peredano :  0 / 20, 0 | time_wok me:     25m40.0\n","data 14-12-2022 16:42 | Work :  \t  120.022 GiB / 1.979 TiB, 6%, 84.138 MiB/s, ETA 6h26m47 | peredano :  0 / 20, 0 | time_wok me:     25m44.5\n","data 14-12-2022 16:42 | Work :  \t  120.385 GiB / 1.979 TiB, 6%, 84.491 MiB/s, ETA 6h25m6 | peredano :  0 / 20, 0 | time_wok me:     25m49.0\n","data 14-12-2022 16:42 | Work :  \t  120.784 GiB / 1.979 TiB, 6%, 85.389 MiB/s, ETA 6h20m58 | peredano :  0 / 20, 0 | time_wok me:     25m53.5\n","data 14-12-2022 16:42 | Work :  \t  121.144 GiB / 1.979 TiB, 6%, 85.707 MiB/s, ETA 6h19m29 | peredano :  0 / 20, 0 | time_wok me:     25m58.0\n","data 14-12-2022 16:42 | Work :  \t  121.512 GiB / 1.979 TiB, 6%, 85.763 MiB/s, ETA 6h19m10 | peredano :  0 / 20, 0 | time_wok me:      26m2.5\n","data 14-12-2022 16:42 | Work :  \t  121.868 GiB / 1.979 TiB, 6%, 83.554 MiB/s, ETA 6h29m7 | peredano :  0 / 20, 0 | time_wok me:      26m6.5\n","data 14-12-2022 16:42 | Work :  \t  122.230 GiB / 1.979 TiB, 6%, 84.198 MiB/s, ETA 6h26m4 | peredano :  0 / 20, 0 | time_wok me:     26m11.0\n","data 14-12-2022 16:42 | Work :  \t  122.597 GiB / 1.979 TiB, 6%, 83.012 MiB/s, ETA 6h31m30 | peredano :  0 / 20, 0 | time_wok me:     26m15.5\n","data 14-12-2022 16:43 | Work :  \t  122.922 GiB / 1.979 TiB, 6%, 83.364 MiB/s, ETA 6h29m47 | peredano :  0 / 20, 0 | time_wok me:     26m20.0\n","data 14-12-2022 16:43 | Work :  \t  123.288 GiB / 1.979 TiB, 6%, 82.726 MiB/s, ETA 6h32m43 | peredano :  0 / 20, 0 | time_wok me:     26m24.5\n","data 14-12-2022 16:43 | Work :  \t  123.670 GiB / 1.979 TiB, 6%, 84.479 MiB/s, ETA 6h24m29 | peredano :  0 / 20, 0 | time_wok me:     26m29.0\n","data 14-12-2022 16:43 | Work :  \t  124.080 GiB / 1.979 TiB, 6%, 85.559 MiB/s, ETA 6h19m33 | peredano :  0 / 20, 0 | time_wok me:     26m33.5\n","data 14-12-2022 16:43 | Work :  \t  124.406 GiB / 1.979 TiB, 6%, 84.508 MiB/s, ETA 6h24m13 | peredano :  0 / 20, 0 | time_wok me:     26m38.0\n","data 14-12-2022 16:43 | Work :  \t  124.784 GiB / 1.979 TiB, 6%, 83.017 MiB/s, ETA 6h31m2 | peredano :  0 / 20, 0 | time_wok me:     26m42.5\n","data 14-12-2022 16:43 | Work :  \t  125.133 GiB / 1.979 TiB, 6%, 82.924 MiB/s, ETA 6h31m24 | peredano :  0 / 20, 0 | time_wok me:     26m46.5\n","data 14-12-2022 16:43 | Work :  \t  125.508 GiB / 1.979 TiB, 6%, 83.191 MiB/s, ETA 6h30m4 | peredano :  0 / 20, 0 | time_wok me:     26m51.0\n","data 14-12-2022 16:43 | Work :  \t  125.872 GiB / 1.979 TiB, 6%, 83.905 MiB/s, ETA 6h26m40 | peredano :  0 / 20, 0 | time_wok me:     26m55.5\n","data 14-12-2022 16:43 | Work :  \t  126.194 GiB / 1.979 TiB, 6%, 83.300 MiB/s, ETA 6h29m25 | peredano :  0 / 20, 0 | time_wok me:      27m0.0\n","data 14-12-2022 16:43 | Work :  \t  126.581 GiB / 1.979 TiB, 6%, 82.967 MiB/s, ETA 6h30m54 | peredano :  0 / 20, 0 | time_wok me:      27m4.5\n","data 14-12-2022 16:43 | Work :  \t  126.953 GiB / 1.979 TiB, 6%, 84.423 MiB/s, ETA 6h24m5 | peredano :  0 / 20, 0 | time_wok me:      27m9.0\n","data 14-12-2022 16:43 | Work :  \t  127.311 GiB / 1.979 TiB, 6%, 83.026 MiB/s, ETA 6h30m28 | peredano :  0 / 20, 0 | time_wok me:     27m13.5\n","data 14-12-2022 16:43 | Work :  \t  127.674 GiB / 1.979 TiB, 6%, 83.837 MiB/s, ETA 6h26m37 | peredano :  0 / 20, 0 | time_wok me:     27m18.0\n","data 14-12-2022 16:44 | Work :  \t  128.038 GiB / 1.979 TiB, 6%, 82.871 MiB/s, ETA 6h31m3 | peredano :  0 / 20, 0 | time_wok me:     27m22.5\n","data 14-12-2022 16:44 | Work :  \t  128.430 GiB / 1.979 TiB, 6%, 84.692 MiB/s, ETA 6h22m34 | peredano :  0 / 20, 0 | time_wok me:     27m26.5\n","data 14-12-2022 16:44 | Work :  \t  128.787 GiB / 1.979 TiB, 6%, 84.925 MiB/s, ETA 6h21m27 | peredano :  0 / 20, 0 | time_wok me:     27m31.0\n","data 14-12-2022 16:44 | Work :  \t  129.198 GiB / 1.979 TiB, 6%, 86.052 MiB/s, ETA 6h16m22 | peredano :  0 / 20, 0 | time_wok me:     27m35.5\n","data 14-12-2022 16:44 | Work :  \t  129.503 GiB / 1.979 TiB, 6%, 85.046 MiB/s, ETA 6h20m45 | peredano :  0 / 20, 0 | time_wok me:     27m40.0\n","data 14-12-2022 16:44 | Work :  \t  129.879 GiB / 1.979 TiB, 6%, 85.177 MiB/s, ETA 6h20m6 | peredano :  0 / 20, 0 | time_wok me:     27m44.5\n","data 14-12-2022 16:44 | Work :  \t  130.281 GiB / 1.979 TiB, 6%, 86.161 MiB/s, ETA 6h15m41 | peredano :  0 / 20, 0 | time_wok me:     27m49.0\n","data 14-12-2022 16:44 | Work :  \t  130.625 GiB / 1.979 TiB, 6%, 86.452 MiB/s, ETA 6h14m21 | peredano :  0 / 20, 0 | time_wok me:     27m53.5\n","data 14-12-2022 16:44 | Work :  \t  131.024 GiB / 1.979 TiB, 6%, 85.389 MiB/s, ETA 6h18m55 | peredano :  0 / 20, 0 | time_wok me:     27m58.0\n","data 14-12-2022 16:44 | Work :  \t  131.386 GiB / 1.979 TiB, 6%, 86.384 MiB/s, ETA 6h14m29 | peredano :  0 / 20, 0 | time_wok me:      28m2.5\n","data 14-12-2022 16:44 | Work :  \t  131.770 GiB / 1.979 TiB, 7%, 85.434 MiB/s, ETA 6h18m34 | peredano :  0 / 20, 0 | time_wok me:      28m6.5\n","data 14-12-2022 16:44 | Work :  \t  132.138 GiB / 1.979 TiB, 7%, 85.651 MiB/s, ETA 6h17m33 | peredano :  0 / 20, 0 | time_wok me:     28m11.0\n","data 14-12-2022 16:44 | Work :  \t  132.507 GiB / 1.979 TiB, 7%, 84.554 MiB/s, ETA 6h22m22 | peredano :  0 / 20, 0 | time_wok me:     28m15.5\n","data 14-12-2022 16:45 | Work :  \t  132.860 GiB / 1.979 TiB, 7%, 86.041 MiB/s, ETA 6h15m41 | peredano :  0 / 20, 0 | time_wok me:     28m20.0\n","data 14-12-2022 16:45 | Work :  \t  133.218 GiB / 1.979 TiB, 7%, 84.355 MiB/s, ETA 6h23m7 | peredano :  0 / 20, 0 | time_wok me:     28m24.5\n","data 14-12-2022 16:45 | Work :  \t  133.614 GiB / 1.979 TiB, 7%, 85.953 MiB/s, ETA 6h15m55 | peredano :  0 / 20, 0 | time_wok me:     28m29.0\n","data 14-12-2022 16:45 | Work :  \t  133.946 GiB / 1.979 TiB, 7%, 84.275 MiB/s, ETA 6h23m20 | peredano :  0 / 20, 0 | time_wok me:     28m33.5\n","data 14-12-2022 16:45 | Work :  \t  134.342 GiB / 1.979 TiB, 7%, 84.908 MiB/s, ETA 6h20m24 | peredano :  0 / 20, 0 | time_wok me:     28m38.0\n","data 14-12-2022 16:45 | Work :  \t  134.684 GiB / 1.979 TiB, 7%, 83.905 MiB/s, ETA 6h24m53 | peredano :  0 / 20, 0 | time_wok me:     28m42.5\n","data 14-12-2022 16:45 | Work :  \t  135.056 GiB / 1.979 TiB, 7%, 83.533 MiB/s, ETA 6h26m31 | peredano :  0 / 20, 0 | time_wok me:     28m46.5\n","data 14-12-2022 16:45 | Work :  \t  135.423 GiB / 1.979 TiB, 7%, 84.283 MiB/s, ETA 6h23 | peredano :  0 / 20, 0 | time_wok me:     28m51.0\n","data 14-12-2022 16:45 | Work :  \t  135.792 GiB / 1.979 TiB, 7%, 83.701 MiB/s, ETA 6h25m35 | peredano :  0 / 20, 0 | time_wok me:     28m55.5\n","data 14-12-2022 16:45 | Work :  \t  136.115 GiB / 1.979 TiB, 7%, 83.589 MiB/s, ETA 6h26m3 | peredano :  0 / 20, 0 | time_wok me:      29m0.0\n","data 14-12-2022 16:45 | Work :  \t  136.474 GiB / 1.979 TiB, 7%, 84.118 MiB/s, ETA 6h23m33 | peredano :  0 / 20, 0 | time_wok me:      29m4.5\n","data 14-12-2022 16:45 | Work :  \t  136.864 GiB / 1.979 TiB, 7%, 84.537 MiB/s, ETA 6h21m34 | peredano :  0 / 20, 0 | time_wok me:      29m9.0\n","data 14-12-2022 16:45 | Work :  \t  137.208 GiB / 1.979 TiB, 7%, 84.682 MiB/s, ETA 6h20m51 | peredano :  0 / 20, 0 | time_wok me:     29m13.5\n","data 14-12-2022 16:45 | Work :  \t  137.574 GiB / 1.979 TiB, 7%, 83.637 MiB/s, ETA 6h25m31 | peredano :  0 / 20, 0 | time_wok me:     29m18.0\n","data 14-12-2022 16:46 | Work :  \t  137.960 GiB / 1.979 TiB, 7%, 83.291 MiB/s, ETA 6h27m3 | peredano :  0 / 20, 0 | time_wok me:     29m22.5\n","data 14-12-2022 16:46 | Work :  \t  138.303 GiB / 1.979 TiB, 7%, 83.242 MiB/s, ETA 6h27m12 | peredano :  0 / 20, 0 | time_wok me:     29m26.5\n","data 14-12-2022 16:46 | Work :  \t  138.674 GiB / 1.979 TiB, 7%, 83.969 MiB/s, ETA 6h23m47 | peredano :  0 / 20, 0 | time_wok me:     29m31.0\n","data 14-12-2022 16:46 | Work :  \t  139.048 GiB / 1.979 TiB, 7%, 83.052 MiB/s, ETA 6h27m56 | peredano :  0 / 20, 0 | time_wok me:     29m35.5\n","data 14-12-2022 16:46 | Work :  \t  139.382 GiB / 1.979 TiB, 7%, 83.510 MiB/s, ETA 6h25m44 | peredano :  0 / 20, 0 | time_wok me:     29m40.0\n","data 14-12-2022 16:46 | Work :  \t  139.753 GiB / 1.979 TiB, 7%, 82.786 MiB/s, ETA 6h29m2 | peredano :  0 / 20, 0 | time_wok me:     29m44.5\n","data 14-12-2022 16:46 | Work :  \t  140.112 GiB / 1.979 TiB, 7%, 83.639 MiB/s, ETA 6h25 | peredano :  0 / 20, 0 | time_wok me:     29m49.0\n","data 14-12-2022 16:46 | Work :  \t  140.472 GiB / 1.979 TiB, 7%, 83.463 MiB/s, ETA 6h25m44 | peredano :  0 / 20, 0 | time_wok me:     29m53.5\n","data 14-12-2022 16:46 | Work :  \t  140.822 GiB / 1.979 TiB, 7%, 81.631 MiB/s, ETA 6h34m19 | peredano :  0 / 20, 0 | time_wok me:     29m58.0\n","data 14-12-2022 16:46 | Work :  \t  141.188 GiB / 1.979 TiB, 7%, 82.456 MiB/s, ETA 6h30m18 | peredano :  0 / 20, 0 | time_wok me:      30m2.5\n","data 14-12-2022 16:46 | Work :  \t  141.527 GiB / 1.979 TiB, 7%, 80.970 MiB/s, ETA 6h37m23 | peredano :  0 / 20, 0 | time_wok me:      30m6.5\n","data 14-12-2022 16:46 | Work :  \t  141.914 GiB / 1.979 TiB, 7%, 83.115 MiB/s, ETA 6h27m3 | peredano :  0 / 20, 0 | time_wok me:     30m11.0\n","data 14-12-2022 16:46 | Work :  \t  142.280 GiB / 1.979 TiB, 7%, 82.560 MiB/s, ETA 6h29m35 | peredano :  0 / 20, 0 | time_wok me:     30m15.5\n","data 14-12-2022 16:47 | Work :  \t  142.593 GiB / 1.979 TiB, 7%, 82.072 MiB/s, ETA 6h31m50 | peredano :  0 / 20, 0 | time_wok me:     30m20.0\n","data 14-12-2022 16:47 | Work :  \t  142.989 GiB / 1.979 TiB, 7%, 83.199 MiB/s, ETA 6h26m27 | peredano :  0 / 20, 0 | time_wok me:     30m24.5\n","data 14-12-2022 16:47 | Work :  \t  143.335 GiB / 1.979 TiB, 7%, 83.365 MiB/s, ETA 6h25m36 | peredano :  0 / 20, 0 | time_wok me:     30m29.0\n","data 14-12-2022 16:47 | Work :  \t  143.738 GiB / 1.979 TiB, 7%, 84.538 MiB/s, ETA 6h20m10 | peredano :  0 / 20, 0 | time_wok me:     30m33.5\n","data 14-12-2022 16:47 | Work :  \t  144.132 GiB / 1.979 TiB, 7%, 86.051 MiB/s, ETA 6h13m25 | peredano :  0 / 20, 0 | time_wok me:     30m38.0\n","data 14-12-2022 16:47 | Work :  \t  144.518 GiB / 1.979 TiB, 7%, 86.930 MiB/s, ETA 6h9m34 | peredano :  0 / 20, 0 | time_wok me:     30m42.5\n","data 14-12-2022 16:47 | Work :  \t  144.871 GiB / 1.979 TiB, 7%, 85.530 MiB/s, ETA 6h15m32 | peredano :  0 / 20, 0 | time_wok me:     30m46.5\n","data 14-12-2022 16:47 | Work :  \t  145.238 GiB / 1.979 TiB, 7%, 84.748 MiB/s, ETA 6h18m56 | peredano :  0 / 20, 0 | time_wok me:     30m51.0\n","data 14-12-2022 16:47 | Work :  \t  145.643 GiB / 1.979 TiB, 7%, 86.282 MiB/s, ETA 6h12m7 | peredano :  0 / 20, 0 | time_wok me:     30m55.5\n","data 14-12-2022 16:47 | Work :  \t  145.961 GiB / 1.979 TiB, 7%, 85.986 MiB/s, ETA 6h13m20 | peredano :  0 / 20, 0 | time_wok me:      31m0.0\n","data 14-12-2022 16:47 | Work :  \t  146.316 GiB / 1.979 TiB, 7%, 84.878 MiB/s, ETA 6h18m8 | peredano :  0 / 20, 0 | time_wok me:      31m4.5\n","data 14-12-2022 16:47 | Work :  \t  146.686 GiB / 1.979 TiB, 7%, 83.129 MiB/s, ETA 6h26m1 | peredano :  0 / 20, 0 | time_wok me:      31m9.0\n","data 14-12-2022 16:47 | Work :  \t  147.051 GiB / 1.979 TiB, 7%, 83.454 MiB/s, ETA 6h24m26 | peredano :  0 / 20, 0 | time_wok me:     31m13.5\n","data 14-12-2022 16:47 | Work :  \t  147.432 GiB / 1.979 TiB, 7%, 84.574 MiB/s, ETA 6h19m16 | peredano :  0 / 20, 0 | time_wok me:     31m18.0\n","data 14-12-2022 16:48 | Work :  \t  147.793 GiB / 1.979 TiB, 7%, 85.294 MiB/s, ETA 6h15m59 | peredano :  0 / 20, 0 | time_wok me:     31m22.5\n","data 14-12-2022 16:48 | Work :  \t  148.185 GiB / 1.979 TiB, 7%, 84.942 MiB/s, ETA 6h17m28 | peredano :  0 / 20, 0 | time_wok me:     31m26.5\n","data 14-12-2022 16:48 | Work :  \t  148.544 GiB / 1.979 TiB, 7%, 84.632 MiB/s, ETA 6h18m47 | peredano :  0 / 20, 0 | time_wok me:     31m31.0\n","data 14-12-2022 16:48 | Work :  \t  148.907 GiB / 1.979 TiB, 7%, 84.415 MiB/s, ETA 6h19m41 | peredano :  0 / 20, 0 | time_wok me:     31m35.5\n","data 14-12-2022 16:48 | Work :  \t  149.234 GiB / 1.979 TiB, 7%, 83.744 MiB/s, ETA 6h22m39 | peredano :  0 / 20, 0 | time_wok me:     31m40.0\n","data 14-12-2022 16:48 | Work :  \t  149.610 GiB / 1.979 TiB, 7%, 83.290 MiB/s, ETA 6h24m40 | peredano :  0 / 20, 0 | time_wok me:     31m44.5\n","data 14-12-2022 16:48 | Work :  \t  149.966 GiB / 1.979 TiB, 7%, 83.319 MiB/s, ETA 6h24m27 | peredano :  0 / 20, 0 | time_wok me:     31m49.0\n","data 14-12-2022 16:48 | Work :  \t  150.359 GiB / 1.979 TiB, 7%, 83.230 MiB/s, ETA 6h24m47 | peredano :  0 / 20, 0 | time_wok me:     31m53.5\n","data 14-12-2022 16:48 | Work :  \t  150.700 GiB / 1.979 TiB, 7%, 83.291 MiB/s, ETA 6h24m26 | peredano :  0 / 20, 0 | time_wok me:     31m58.0\n","data 14-12-2022 16:48 | Work :  \t  151.068 GiB / 1.979 TiB, 7%, 83.302 MiB/s, ETA 6h24m19 | peredano :  0 / 20, 0 | time_wok me:      32m2.5\n","data 14-12-2022 16:48 | Work :  \t  151.442 GiB / 1.979 TiB, 7%, 83.554 MiB/s, ETA 6h23m5 | peredano :  0 / 20, 0 | time_wok me:      32m6.5\n","data 14-12-2022 16:48 | Work :  \t  151.784 GiB / 1.979 TiB, 7%, 82.278 MiB/s, ETA 6h28m57 | peredano :  0 / 20, 0 | time_wok me:     32m11.0\n","data 14-12-2022 16:48 | Work :  \t  152.174 GiB / 1.979 TiB, 8%, 83.532 MiB/s, ETA 6h23m1 | peredano :  0 / 20, 0 | time_wok me:     32m15.5\n","data 14-12-2022 16:49 | Work :  \t  152.494 GiB / 1.979 TiB, 8%, 83.329 MiB/s, ETA 6h23m54 | peredano :  0 / 20, 0 | time_wok me:     32m20.0\n","data 14-12-2022 16:49 | Work :  \t  152.850 GiB / 1.979 TiB, 8%, 82.373 MiB/s, ETA 6h28m17 | peredano :  0 / 20, 0 | time_wok me:     32m24.5\n","data 14-12-2022 16:49 | Work :  \t  153.207 GiB / 1.979 TiB, 8%, 83.006 MiB/s, ETA 6h25m15 | peredano :  0 / 20, 0 | time_wok me:     32m29.0\n","data 14-12-2022 16:49 | Work :  \t  153.566 GiB / 1.979 TiB, 8%, 82.175 MiB/s, ETA 6h29m4 | peredano :  0 / 20, 0 | time_wok me:     32m33.5\n","data 14-12-2022 16:49 | Work :  \t  153.969 GiB / 1.979 TiB, 8%, 84.150 MiB/s, ETA 6h19m51 | peredano :  0 / 20, 0 | time_wok me:     32m38.0\n","data 14-12-2022 16:49 | Work :  \t  154.335 GiB / 1.979 TiB, 8%, 84.552 MiB/s, ETA 6h17m58 | peredano :  0 / 20, 0 | time_wok me:     32m42.5\n","data 14-12-2022 16:49 | Work :  \t  154.697 GiB / 1.979 TiB, 8%, 83.750 MiB/s, ETA 6h21m31 | peredano :  0 / 20, 0 | time_wok me:     32m46.5\n","data 14-12-2022 16:49 | Work :  \t  155.063 GiB / 1.979 TiB, 8%, 83.432 MiB/s, ETA 6h22m54 | peredano :  0 / 20, 0 | time_wok me:     32m51.0\n","data 14-12-2022 16:49 | Work :  \t  155.401 GiB / 1.979 TiB, 8%, 81.898 MiB/s, ETA 6h30 | peredano :  0 / 20, 0 | time_wok me:     32m55.5\n","data 14-12-2022 16:49 | Work :  \t  155.750 GiB / 1.979 TiB, 8%, 83.631 MiB/s, ETA 6h21m51 | peredano :  0 / 20, 0 | time_wok me:      33m0.0\n","data 14-12-2022 16:49 | Work :  \t  156.088 GiB / 1.979 TiB, 8%, 82.217 MiB/s, ETA 6h28m20 | peredano :  0 / 20, 0 | time_wok me:      33m4.5\n","data 14-12-2022 16:49 | Work :  \t  156.478 GiB / 1.979 TiB, 8%, 83.696 MiB/s, ETA 6h21m24 | peredano :  0 / 20, 0 | time_wok me:      33m9.0\n","data 14-12-2022 16:49 | Work :  \t  156.853 GiB / 1.979 TiB, 8%, 84.209 MiB/s, ETA 6h19 | peredano :  0 / 20, 0 | time_wok me:     33m13.5\n","data 14-12-2022 16:49 | Work :  \t  157.208 GiB / 1.979 TiB, 8%, 83.985 MiB/s, ETA 6h19m56 | peredano :  0 / 20, 0 | time_wok me:     33m18.0\n","data 14-12-2022 16:50 | Work :  \t  157.591 GiB / 1.979 TiB, 8%, 84.172 MiB/s, ETA 6h19m1 | peredano :  0 / 20, 0 | time_wok me:     33m22.5\n","data 14-12-2022 16:50 | Work :  \t  157.971 GiB / 1.979 TiB, 8%, 85.147 MiB/s, ETA 6h14m36 | peredano :  0 / 20, 0 | time_wok me:     33m26.5\n","data 14-12-2022 16:50 | Work :  \t  158.331 GiB / 1.979 TiB, 8%, 85.345 MiB/s, ETA 6h13m39 | peredano :  0 / 20, 0 | time_wok me:     33m31.0\n","data 14-12-2022 16:50 | Work :  \t  158.731 GiB / 1.979 TiB, 8%, 85.611 MiB/s, ETA 6h12m25 | peredano :  0 / 20, 0 | time_wok me:     33m35.5\n","data 14-12-2022 16:50 | Work :  \t  159.041 GiB / 1.979 TiB, 8%, 84.615 MiB/s, ETA 6h16m44 | peredano :  0 / 20, 0 | time_wok me:     33m40.0\n","data 14-12-2022 16:50 | Work :  \t  159.422 GiB / 1.979 TiB, 8%, 83.804 MiB/s, ETA 6h20m19 | peredano :  0 / 20, 0 | time_wok me:     33m44.5\n","data 14-12-2022 16:50 | Work :  \t  159.786 GiB / 1.979 TiB, 8%, 84.090 MiB/s, ETA 6h18m56 | peredano :  0 / 20, 0 | time_wok me:     33m49.0\n","data 14-12-2022 16:50 | Work :  \t  160.176 GiB / 1.979 TiB, 8%, 83.879 MiB/s, ETA 6h19m49 | peredano :  0 / 20, 0 | time_wok me:     33m53.5\n","data 14-12-2022 16:50 | Work :  \t  160.545 GiB / 1.979 TiB, 8%, 85.728 MiB/s, ETA 6h11m33 | peredano :  0 / 20, 0 | time_wok me:     33m58.0\n","data 14-12-2022 16:50 | Work :  \t  160.902 GiB / 1.979 TiB, 8%, 84.441 MiB/s, ETA 6h17m8 | peredano :  0 / 20, 0 | time_wok me:      34m2.5\n","data 14-12-2022 16:50 | Work :  \t  161.259 GiB / 1.979 TiB, 8%, 83.795 MiB/s, ETA 6h19m59 | peredano :  0 / 20, 0 | time_wok me:      34m6.5\n","data 14-12-2022 16:50 | Work :  \t  161.649 GiB / 1.979 TiB, 8%, 84.601 MiB/s, ETA 6h16m17 | peredano :  0 / 20, 0 | time_wok me:     34m11.0\n","data 14-12-2022 16:50 | Work :  \t  162.011 GiB / 1.979 TiB, 8%, 83.952 MiB/s, ETA 6h19m7 | peredano :  0 / 20, 0 | time_wok me:     34m15.5\n","data 14-12-2022 16:51 | Work :  \t  162.320 GiB / 1.979 TiB, 8%, 82.237 MiB/s, ETA 6h26m57 | peredano :  0 / 20, 0 | time_wok me:     34m20.0\n","data 14-12-2022 16:51 | Work :  \t  162.706 GiB / 1.979 TiB, 8%, 82.894 MiB/s, ETA 6h23m48 | peredano :  0 / 20, 0 | time_wok me:     34m24.5\n","data 14-12-2022 16:51 | Work :  \t  163.067 GiB / 1.979 TiB, 8%, 83.946 MiB/s, ETA 6h18m55 | peredano :  0 / 20, 0 | time_wok me:     34m29.0\n","data 14-12-2022 16:51 | Work :  \t  163.422 GiB / 1.979 TiB, 8%, 82.391 MiB/s, ETA 6h26 | peredano :  0 / 20, 0 | time_wok me:     34m33.5\n","data 14-12-2022 16:51 | Work :  \t  163.787 GiB / 1.979 TiB, 8%, 82.946 MiB/s, ETA 6h23m21 | peredano :  0 / 20, 0 | time_wok me:     34m38.0\n","data 14-12-2022 16:51 | Work :  \t  164.137 GiB / 1.979 TiB, 8%, 83.147 MiB/s, ETA 6h22m21 | peredano :  0 / 20, 0 | time_wok me:     34m42.5\n","data 14-12-2022 16:51 | Work :  \t  164.511 GiB / 1.979 TiB, 8%, 82.827 MiB/s, ETA 6h23m45 | peredano :  0 / 20, 0 | time_wok me:     34m46.5\n","data 14-12-2022 16:51 | Work :  \t  164.887 GiB / 1.979 TiB, 8%, 83.464 MiB/s, ETA 6h20m44 | peredano :  0 / 20, 0 | time_wok me:     34m51.0\n","data 14-12-2022 16:51 | Work :  \t  165.276 GiB / 1.979 TiB, 8%, 84.668 MiB/s, ETA 6h15m15 | peredano :  0 / 20, 0 | time_wok me:     34m55.5\n","data 14-12-2022 16:51 | Work :  \t  165.584 GiB / 1.979 TiB, 8%, 83.870 MiB/s, ETA 6h18m45 | peredano :  0 / 20, 0 | time_wok me:      35m0.0\n","data 14-12-2022 16:51 | Work :  \t  165.981 GiB / 1.979 TiB, 8%, 84.842 MiB/s, ETA 6h14m20 | peredano :  0 / 20, 0 | time_wok me:      35m4.5\n","data 14-12-2022 16:51 | Work :  \t  166.345 GiB / 1.979 TiB, 8%, 84.982 MiB/s, ETA 6h13m39 | peredano :  0 / 20, 0 | time_wok me:      35m9.0\n","data 14-12-2022 16:51 | Work :  \t  166.733 GiB / 1.979 TiB, 8%, 85.760 MiB/s, ETA 6h10m11 | peredano :  0 / 20, 0 | time_wok me:     35m13.5\n","data 14-12-2022 16:51 | Work :  \t  167.064 GiB / 1.979 TiB, 8%, 82.869 MiB/s, ETA 6h23m1 | peredano :  0 / 20, 0 | time_wok me:     35m18.0\n","data 14-12-2022 16:52 | Work :  \t  167.401 GiB / 1.979 TiB, 8%, 81.854 MiB/s, ETA 6h27m42 | peredano :  0 / 20, 0 | time_wok me:     35m22.5\n","data 14-12-2022 16:52 | Work :  \t  167.721 GiB / 1.979 TiB, 8%, 79.790 MiB/s, ETA 6h37m40 | peredano :  0 / 20, 0 | time_wok me:     35m26.5\n","data 14-12-2022 16:52 | Work :  \t  168.127 GiB / 1.979 TiB, 8%, 81.633 MiB/s, ETA 6h28m36 | peredano :  0 / 20, 0 | time_wok me:     35m31.0\n","data 14-12-2022 16:52 | Work :  \t  168.455 GiB / 1.979 TiB, 8%, 79.812 MiB/s, ETA 6h37m24 | peredano :  0 / 20, 0 | time_wok me:     35m35.5\n","data 14-12-2022 16:52 | Work :  \t  168.787 GiB / 1.979 TiB, 8%, 81.407 MiB/s, ETA 6h29m33 | peredano :  0 / 20, 0 | time_wok me:     35m40.0\n","data 14-12-2022 16:52 | Work :  \t  169.178 GiB / 1.979 TiB, 8%, 83.168 MiB/s, ETA 6h21m13 | peredano :  0 / 20, 0 | time_wok me:     35m44.5\n","data 14-12-2022 16:52 | Work :  \t  169.536 GiB / 1.979 TiB, 8%, 83.267 MiB/s, ETA 6h20m41 | peredano :  0 / 20, 0 | time_wok me:     35m49.0\n","data 14-12-2022 16:52 | Work :  \t  169.886 GiB / 1.979 TiB, 8%, 83.228 MiB/s, ETA 6h20m48 | peredano :  0 / 20, 0 | time_wok me:     35m53.5\n","data 14-12-2022 16:52 | Work :  \t  170.287 GiB / 1.979 TiB, 8%, 84.110 MiB/s, ETA 6h16m43 | peredano :  0 / 20, 0 | time_wok me:     35m58.0\n","data 14-12-2022 16:52 | Work :  \t  170.613 GiB / 1.979 TiB, 8%, 82.668 MiB/s, ETA 6h23m13 | peredano :  0 / 20, 0 | time_wok me:      36m2.5\n","data 14-12-2022 16:52 | Work :  \t  171.009 GiB / 1.979 TiB, 8%, 83.423 MiB/s, ETA 6h19m41 | peredano :  0 / 20, 0 | time_wok me:      36m6.5\n","data 14-12-2022 16:52 | Work :  \t  171.352 GiB / 1.979 TiB, 8%, 83.569 MiB/s, ETA 6h18m56 | peredano :  0 / 20, 0 | time_wok me:     36m11.0\n","data 14-12-2022 16:52 | Work :  \t  171.740 GiB / 1.979 TiB, 8%, 83.520 MiB/s, ETA 6h19m5 | peredano :  0 / 20, 0 | time_wok me:     36m15.5\n","data 14-12-2022 16:53 | Work :  \t  172.057 GiB / 1.979 TiB, 8%, 83.879 MiB/s, ETA 6h17m24 | peredano :  0 / 20, 0 | time_wok me:     36m20.0\n","data 14-12-2022 16:53 | Work :  \t  172.395 GiB / 1.979 TiB, 9%, 82.521 MiB/s, ETA 6h23m32 | peredano :  0 / 20, 0 | time_wok me:     36m24.5\n","data 14-12-2022 16:53 | Work :  \t  172.796 GiB / 1.979 TiB, 9%, 83.611 MiB/s, ETA 6h18m27 | peredano :  0 / 20, 0 | time_wok me:     36m29.0\n","data 14-12-2022 16:53 | Work :  \t  173.146 GiB / 1.979 TiB, 9%, 82.898 MiB/s, ETA 6h21m38 | peredano :  0 / 20, 0 | time_wok me:     36m33.5\n","data 14-12-2022 16:53 | Work :  \t  173.529 GiB / 1.979 TiB, 9%, 83.809 MiB/s, ETA 6h17m25 | peredano :  0 / 20, 0 | time_wok me:     36m38.0\n","data 14-12-2022 16:53 | Work :  \t  173.865 GiB / 1.979 TiB, 9%, 82.823 MiB/s, ETA 6h21m50 | peredano :  0 / 20, 0 | time_wok me:     36m42.5\n","data 14-12-2022 16:53 | Work :  \t  174.216 GiB / 1.979 TiB, 9%, 81.590 MiB/s, ETA 6h27m32 | peredano :  0 / 20, 0 | time_wok me:     36m46.5\n","data 14-12-2022 16:53 | Work :  \t  174.577 GiB / 1.979 TiB, 9%, 82.850 MiB/s, ETA 6h21m34 | peredano :  0 / 20, 0 | time_wok me:     36m51.0\n","data 14-12-2022 16:53 | Work :  \t  174.951 GiB / 1.979 TiB, 9%, 82.010 MiB/s, ETA 6h25m24 | peredano :  0 / 20, 0 | time_wok me:     36m55.5\n","data 14-12-2022 16:53 | Work :  \t  175.302 GiB / 1.979 TiB, 9%, 83.835 MiB/s, ETA 6h16m56 | peredano :  0 / 20, 0 | time_wok me:      37m0.0\n","data 14-12-2022 16:53 | Work :  \t  175.652 GiB / 1.979 TiB, 9%, 84.486 MiB/s, ETA 6h13m57 | peredano :  0 / 20, 0 | time_wok me:      37m4.5\n","data 14-12-2022 16:53 | Work :  \t  176.036 GiB / 1.979 TiB, 9%, 83.600 MiB/s, ETA 6h17m51 | peredano :  0 / 20, 0 | time_wok me:      37m9.0\n","data 14-12-2022 16:53 | Work :  \t  176.402 GiB / 1.979 TiB, 9%, 83.921 MiB/s, ETA 6h16m19 | peredano :  0 / 20, 0 | time_wok me:     37m13.5\n","data 14-12-2022 16:53 | Work :  \t  176.786 GiB / 1.979 TiB, 9%, 84.940 MiB/s, ETA 6h11m44 | peredano :  0 / 20, 0 | time_wok me:     37m18.0\n","data 14-12-2022 16:54 | Work :  \t  177.148 GiB / 1.979 TiB, 9%, 84.899 MiB/s, ETA 6h11m50 | peredano :  0 / 20, 0 | time_wok me:     37m22.5\n","data 14-12-2022 16:54 | Work :  \t  177.496 GiB / 1.979 TiB, 9%, 82.969 MiB/s, ETA 6h20m25 | peredano :  0 / 20, 0 | time_wok me:     37m26.5\n","data 14-12-2022 16:54 | Work :  \t  177.856 GiB / 1.979 TiB, 9%, 82.965 MiB/s, ETA 6h20m22 | peredano :  0 / 20, 0 | time_wok me:     37m31.0\n","data 14-12-2022 16:54 | Work :  \t  178.224 GiB / 1.979 TiB, 9%, 83.091 MiB/s, ETA 6h19m42 | peredano :  0 / 20, 0 | time_wok me:     37m35.5\n","data 14-12-2022 16:54 | Work :  \t  178.558 GiB / 1.979 TiB, 9%, 83.513 MiB/s, ETA 6h17m43 | peredano :  0 / 20, 0 | time_wok me:     37m40.0\n","data 14-12-2022 16:54 | Work :  \t  178.948 GiB / 1.979 TiB, 9%, 85.297 MiB/s, ETA 6h9m45 | peredano :  0 / 20, 0 | time_wok me:     37m44.5\n","data 14-12-2022 16:54 | Work :  \t  179.302 GiB / 1.979 TiB, 9%, 82.890 MiB/s, ETA 6h20m25 | peredano :  0 / 20, 0 | time_wok me:     37m49.0\n","data 14-12-2022 16:54 | Work :  \t  179.666 GiB / 1.979 TiB, 9%, 83.799 MiB/s, ETA 6h16m12 | peredano :  0 / 20, 0 | time_wok me:     37m53.5\n","data 14-12-2022 16:54 | Work :  \t  180.031 GiB / 1.979 TiB, 9%, 83.087 MiB/s, ETA 6h19m21 | peredano :  0 / 20, 0 | time_wok me:     37m58.0\n","data 14-12-2022 16:54 | Work :  \t  180.421 GiB / 1.979 TiB, 9%, 84.799 MiB/s, ETA 6h11m37 | peredano :  0 / 20, 0 | time_wok me:      38m2.5\n","data 14-12-2022 16:54 | Work :  \t  180.755 GiB / 1.979 TiB, 9%, 82.957 MiB/s, ETA 6h19m48 | peredano :  0 / 20, 0 | time_wok me:      38m6.5\n","data 14-12-2022 16:54 | Work :  \t  181.143 GiB / 1.979 TiB, 9%, 84.211 MiB/s, ETA 6h14m4 | peredano :  0 / 20, 0 | time_wok me:     38m11.0\n","data 14-12-2022 16:54 | Work :  \t  181.475 GiB / 1.979 TiB, 9%, 81.772 MiB/s, ETA 6h25m9 | peredano :  0 / 20, 0 | time_wok me:     38m15.5\n","data 14-12-2022 16:55 | Work :  \t  181.811 GiB / 1.979 TiB, 9%, 82.207 MiB/s, ETA 6h23m3 | peredano :  0 / 20, 0 | time_wok me:     38m20.0\n","data 14-12-2022 16:55 | Work :  \t  182.128 GiB / 1.979 TiB, 9%, 80.170 MiB/s, ETA 6h32m43 | peredano :  0 / 20, 0 | time_wok me:     38m24.5\n","data 14-12-2022 16:55 | Work :  \t  182.483 GiB / 1.979 TiB, 9%, 80.251 MiB/s, ETA 6h32m14 | peredano :  0 / 20, 0 | time_wok me:     38m29.0\n","data 14-12-2022 16:55 | Work :  \t  182.809 GiB / 1.979 TiB, 9%, 80.249 MiB/s, ETA 6h32m11 | peredano :  0 / 20, 0 | time_wok me:     38m33.5\n","data 14-12-2022 16:55 | Work :  \t  183.144 GiB / 1.979 TiB, 9%, 77.689 MiB/s, ETA 6h45m2 | peredano :  0 / 20, 0 | time_wok me:     38m38.0\n","data 14-12-2022 16:55 | Work :  \t  183.545 GiB / 1.979 TiB, 9%, 79.720 MiB/s, ETA 6h34m38 | peredano :  0 / 20, 0 | time_wok me:     38m42.5\n","data 14-12-2022 16:55 | Work :  \t  183.902 GiB / 1.979 TiB, 9%, 81.782 MiB/s, ETA 6h24m36 | peredano :  0 / 20, 0 | time_wok me:     38m46.5\n","data 14-12-2022 16:55 | Work :  \t  184.265 GiB / 1.979 TiB, 9%, 81.859 MiB/s, ETA 6h24m10 | peredano :  0 / 20, 0 | time_wok me:     38m51.0\n","data 14-12-2022 16:55 | Work :  \t  184.651 GiB / 1.979 TiB, 9%, 83.303 MiB/s, ETA 6h17m26 | peredano :  0 / 20, 0 | time_wok me:     38m55.5\n","data 14-12-2022 16:55 | Work :  \t  184.976 GiB / 1.979 TiB, 9%, 83.190 MiB/s, ETA 6h17m52 | peredano :  0 / 20, 0 | time_wok me:      39m0.0\n","data 14-12-2022 16:55 | Work :  \t  185.315 GiB / 1.979 TiB, 9%, 83.263 MiB/s, ETA 6h17m28 | peredano :  0 / 20, 0 | time_wok me:      39m4.5\n","data 14-12-2022 16:55 | Work :  \t  185.662 GiB / 1.979 TiB, 9%, 80.854 MiB/s, ETA 6h28m39 | peredano :  0 / 20, 0 | time_wok me:      39m9.0\n","data 14-12-2022 16:55 | Work :  \t  186.041 GiB / 1.979 TiB, 9%, 81.896 MiB/s, ETA 6h23m37 | peredano :  0 / 20, 0 | time_wok me:     39m13.5\n","data 14-12-2022 16:55 | Work :  \t  186.393 GiB / 1.979 TiB, 9%, 81.716 MiB/s, ETA 6h24m24 | peredano :  0 / 20, 0 | time_wok me:     39m18.0\n","data 14-12-2022 16:56 | Work :  \t  186.803 GiB / 1.979 TiB, 9%, 83.500 MiB/s, ETA 6h16m6 | peredano :  0 / 20, 0 | time_wok me:     39m22.5\n","data 14-12-2022 16:56 | Work :  \t  187.167 GiB / 1.979 TiB, 9%, 84.099 MiB/s, ETA 6h13m21 | peredano :  0 / 20, 0 | time_wok me:     39m26.5\n","data 14-12-2022 16:56 | Work :  \t  187.541 GiB / 1.979 TiB, 9%, 85.589 MiB/s, ETA 6h6m46 | peredano :  0 / 20, 0 | time_wok me:     39m31.0\n","data 14-12-2022 16:56 | Work :  \t  187.916 GiB / 1.979 TiB, 9%, 84.376 MiB/s, ETA 6h11m58 | peredano :  0 / 20, 0 | time_wok me:     39m35.5\n","data 14-12-2022 16:56 | Work :  \t  188.259 GiB / 1.979 TiB, 9%, 85.580 MiB/s, ETA 6h6m40 | peredano :  0 / 20, 0 | time_wok me:     39m40.0\n","data 14-12-2022 16:56 | Work :  \t  188.623 GiB / 1.979 TiB, 9%, 86.177 MiB/s, ETA 6h4m3 | peredano :  0 / 20, 0 | time_wok me:     39m44.5\n","data 14-12-2022 16:56 | Work :  \t  189.008 GiB / 1.979 TiB, 9%, 85.079 MiB/s, ETA 6h8m40 | peredano :  0 / 20, 0 | time_wok me:     39m49.0\n","data 14-12-2022 16:56 | Work :  \t  189.387 GiB / 1.979 TiB, 9%, 86.115 MiB/s, ETA 6h4m10 | peredano :  0 / 20, 0 | time_wok me:     39m53.5\n","data 14-12-2022 16:56 | Work :  \t  189.743 GiB / 1.979 TiB, 9%, 83.758 MiB/s, ETA 6h14m20 | peredano :  0 / 20, 0 | time_wok me:     39m58.0\n","data 14-12-2022 16:56 | Work :  \t  190.094 GiB / 1.979 TiB, 9%, 84.264 MiB/s, ETA 6h12m1 | peredano :  0 / 20, 0 | time_wok me:      40m2.5\n","data 14-12-2022 16:56 | Work :  \t  190.475 GiB / 1.979 TiB, 9%, 83.427 MiB/s, ETA 6h15m40 | peredano :  0 / 20, 0 | time_wok me:      40m6.5\n","data 14-12-2022 16:56 | Work :  \t  190.867 GiB / 1.979 TiB, 9%, 85.133 MiB/s, ETA 6h8m4 | peredano :  0 / 20, 0 | time_wok me:     40m11.0\n","data 14-12-2022 16:56 | Work :  \t  191.261 GiB / 1.979 TiB, 9%, 86.483 MiB/s, ETA 6h2m15 | peredano :  0 / 20, 0 | time_wok me:     40m15.5\n","data 14-12-2022 16:57 | Work :  \t  191.559 GiB / 1.979 TiB, 9%, 83.879 MiB/s, ETA 6h13m26 | peredano :  0 / 20, 0 | time_wok me:     40m20.0\n","data 14-12-2022 16:57 | Work :  \t  191.947 GiB / 1.979 TiB, 9%, 84.172 MiB/s, ETA 6h12m3 | peredano :  0 / 20, 0 | time_wok me:     40m24.5\n","data 14-12-2022 16:57 | Work :  \t  192.320 GiB / 1.979 TiB, 9%, 85.197 MiB/s, ETA 6h7m30 | peredano :  0 / 20, 0 | time_wok me:     40m29.0\n","data 14-12-2022 16:57 | Work :  \t  192.676 GiB / 1.979 TiB, 10%, 83.268 MiB/s, ETA 6h15m56 | peredano :  0 / 20, 0 | time_wok me:     40m33.5\n","data 14-12-2022 16:57 | Work :  \t  193.066 GiB / 1.979 TiB, 10%, 84.665 MiB/s, ETA 6h9m40 | peredano :  0 / 20, 0 | time_wok me:     40m38.0\n","data 14-12-2022 16:57 | Work :  \t  193.414 GiB / 1.979 TiB, 10%, 85.024 MiB/s, ETA 6h8m2 | peredano :  0 / 20, 0 | time_wok me:     40m42.5\n","data 14-12-2022 16:57 | Work :  \t  193.812 GiB / 1.979 TiB, 10%, 85.163 MiB/s, ETA 6h7m21 | peredano :  0 / 20, 0 | time_wok me:     40m46.5\n","data 14-12-2022 16:57 | Work :  \t  194.180 GiB / 1.979 TiB, 10%, 85.575 MiB/s, ETA 6h5m30 | peredano :  0 / 20, 0 | time_wok me:     40m51.0\n","data 14-12-2022 16:57 | Work :  \t  194.554 GiB / 1.979 TiB, 10%, 84.578 MiB/s, ETA 6h9m44 | peredano :  0 / 20, 0 | time_wok me:     40m55.5\n","data 14-12-2022 16:57 | Work :  \t  194.880 GiB / 1.979 TiB, 10%, 84.500 MiB/s, ETA 6h10m1 | peredano :  0 / 20, 0 | time_wok me:      41m0.0\n","data 14-12-2022 16:57 | Work :  \t  195.236 GiB / 1.979 TiB, 10%, 82.478 MiB/s, ETA 6h19m1 | peredano :  0 / 20, 0 | time_wok me:      41m4.5\n","data 14-12-2022 16:57 | Work :  \t  195.626 GiB / 1.979 TiB, 10%, 85.228 MiB/s, ETA 6h6m42 | peredano :  0 / 20, 0 | time_wok me:      41m9.0\n","data 14-12-2022 16:57 | Work :  \t  195.967 GiB / 1.979 TiB, 10%, 83.635 MiB/s, ETA 6h13m37 | peredano :  0 / 20, 0 | time_wok me:     41m13.5\n","data 14-12-2022 16:57 | Work :  \t  196.370 GiB / 1.979 TiB, 10%, 84.901 MiB/s, ETA 6h7m58 | peredano :  0 / 20, 0 | time_wok me:     41m18.0\n","data 14-12-2022 16:58 | Work :  \t  196.721 GiB / 1.979 TiB, 10%, 84.644 MiB/s, ETA 6h9m1 | peredano :  0 / 20, 0 | time_wok me:     41m22.5\n","data 14-12-2022 16:58 | Work :  \t  197.079 GiB / 1.979 TiB, 10%, 82.579 MiB/s, ETA 6h18m10 | peredano :  0 / 20, 0 | time_wok me:     41m26.5\n","data 14-12-2022 16:58 | Work :  \t  197.485 GiB / 1.979 TiB, 10%, 84.693 MiB/s, ETA 6h8m39 | peredano :  0 / 20, 0 | time_wok me:     41m31.0\n","data 14-12-2022 16:58 | Work :  \t  197.821 GiB / 1.979 TiB, 10%, 83.351 MiB/s, ETA 6h14m31 | peredano :  0 / 20, 0 | time_wok me:     41m35.5\n","data 14-12-2022 16:58 | Work :  \t  198.147 GiB / 1.979 TiB, 10%, 83.260 MiB/s, ETA 6h14m51 | peredano :  0 / 20, 0 | time_wok me:     41m40.0\n","data 14-12-2022 16:58 | Work :  \t  198.514 GiB / 1.979 TiB, 10%, 82.887 MiB/s, ETA 6h16m28 | peredano :  0 / 20, 0 | time_wok me:     41m44.5\n","data 14-12-2022 16:58 | Work :  \t  198.858 GiB / 1.979 TiB, 10%, 82.570 MiB/s, ETA 6h17m50 | peredano :  0 / 20, 0 | time_wok me:     41m49.0\n","data 14-12-2022 16:58 | Work :  \t  199.221 GiB / 1.979 TiB, 10%, 82.392 MiB/s, ETA 6h18m35 | peredano :  0 / 20, 0 | time_wok me:     41m53.5\n","data 14-12-2022 16:58 | Work :  \t  199.595 GiB / 1.979 TiB, 10%, 82.846 MiB/s, ETA 6h16m26 | peredano :  0 / 20, 0 | time_wok me:     41m58.0\n","data 14-12-2022 16:58 | Work :  \t  199.974 GiB / 1.979 TiB, 10%, 83.654 MiB/s, ETA 6h12m43 | peredano :  0 / 20, 0 | time_wok me:      42m2.5\n","data 14-12-2022 16:58 | Work :  \t  200.337 GiB / 1.979 TiB, 10%, 83.661 MiB/s, ETA 6h12m37 | peredano :  0 / 20, 0 | time_wok me:      42m6.5\n","data 14-12-2022 16:58 | Work :  \t  200.696 GiB / 1.979 TiB, 10%, 83.618 MiB/s, ETA 6h12m44 | peredano :  0 / 20, 0 | time_wok me:     42m11.0\n","data 14-12-2022 16:58 | Work :  \t  201.096 GiB / 1.979 TiB, 10%, 84.898 MiB/s, ETA 6h7m2 | peredano :  0 / 20, 0 | time_wok me:     42m15.5\n","data 14-12-2022 16:59 | Work :  \t  201.384 GiB / 1.979 TiB, 10%, 82.721 MiB/s, ETA 6h16m38 | peredano :  0 / 20, 0 | time_wok me:     42m20.0\n","data 14-12-2022 16:59 | Work :  \t  201.780 GiB / 1.979 TiB, 10%, 83.626 MiB/s, ETA 6h12m28 | peredano :  0 / 20, 0 | time_wok me:     42m24.5\n","data 14-12-2022 16:59 | Work :  \t  202.125 GiB / 1.979 TiB, 10%, 84.088 MiB/s, ETA 6h10m21 | peredano :  0 / 20, 0 | time_wok me:     42m29.0\n","data 14-12-2022 16:59 | Work :  \t  202.456 GiB / 1.979 TiB, 10%, 82.350 MiB/s, ETA 6h18m6 | peredano :  0 / 20, 0 | time_wok me:     42m33.5\n","data 14-12-2022 16:59 | Work :  \t  202.845 GiB / 1.979 TiB, 10%, 82.606 MiB/s, ETA 6h16m51 | peredano :  0 / 20, 0 | time_wok me:     42m38.0\n","data 14-12-2022 16:59 | Work :  \t  203.169 GiB / 1.979 TiB, 10%, 81.427 MiB/s, ETA 6h22m14 | peredano :  0 / 20, 0 | time_wok me:     42m42.5\n","data 14-12-2022 16:59 | Work :  \t  203.560 GiB / 1.979 TiB, 10%, 81.947 MiB/s, ETA 6h19m44 | peredano :  0 / 20, 0 | time_wok me:     42m46.5\n","data 14-12-2022 16:59 | Work :  \t  203.925 GiB / 1.979 TiB, 10%, 82.944 MiB/s, ETA 6h15m6 | peredano :  0 / 20, 0 | time_wok me:     42m51.0\n","data 14-12-2022 16:59 | Work :  \t  204.299 GiB / 1.979 TiB, 10%, 82.848 MiB/s, ETA 6h15m27 | peredano :  0 / 20, 0 | time_wok me:     42m55.5\n","data 14-12-2022 16:59 | Work :  \t  204.630 GiB / 1.979 TiB, 10%, 83.680 MiB/s, ETA 6h11m39 | peredano :  0 / 20, 0 | time_wok me:      43m0.0\n","data 14-12-2022 16:59 | Work :  \t  204.993 GiB / 1.979 TiB, 10%, 83.646 MiB/s, ETA 6h11m44 | peredano :  0 / 20, 0 | time_wok me:      43m4.5\n","data 14-12-2022 16:59 | Work :  \t  205.354 GiB / 1.979 TiB, 10%, 82.629 MiB/s, ETA 6h16m14 | peredano :  0 / 20, 0 | time_wok me:      43m9.0\n","data 14-12-2022 16:59 | Work :  \t  205.668 GiB / 1.979 TiB, 10%, 81.794 MiB/s, ETA 6h20 | peredano :  0 / 20, 0 | time_wok me:     43m13.5\n","data 14-12-2022 16:59 | Work :  \t  206.036 GiB / 1.979 TiB, 10%, 80.672 MiB/s, ETA 6h25m13 | peredano :  0 / 20, 0 | time_wok me:     43m18.0\n","data 14-12-2022 17:00 | Work :  \t  206.420 GiB / 1.979 TiB, 10%, 82.237 MiB/s, ETA 6h17m48 | peredano :  0 / 20, 0 | time_wok me:     43m22.5\n","data 14-12-2022 17:00 | Work :  \t  206.786 GiB / 1.979 TiB, 10%, 82.497 MiB/s, ETA 6h16m32 | peredano :  0 / 20, 0 | time_wok me:     43m26.5\n","data 14-12-2022 17:00 | Work :  \t  207.148 GiB / 1.979 TiB, 10%, 83.230 MiB/s, ETA 6h13m9 | peredano :  0 / 20, 0 | time_wok me:     43m31.0\n","data 14-12-2022 17:00 | Work :  \t  207.528 GiB / 1.979 TiB, 10%, 83.404 MiB/s, ETA 6h12m17 | peredano :  0 / 20, 0 | time_wok me:     43m35.5\n","data 14-12-2022 17:00 | Work :  \t  207.838 GiB / 1.979 TiB, 10%, 82.633 MiB/s, ETA 6h15m42 | peredano :  0 / 20, 0 | time_wok me:     43m40.0\n","data 14-12-2022 17:00 | Work :  \t  208.217 GiB / 1.979 TiB, 10%, 83.252 MiB/s, ETA 6h12m49 | peredano :  0 / 20, 0 | time_wok me:     43m44.5\n","data 14-12-2022 17:00 | Work :  \t  208.575 GiB / 1.979 TiB, 10%, 82.999 MiB/s, ETA 6h13m53 | peredano :  0 / 20, 0 | time_wok me:     43m49.0\n","data 14-12-2022 17:00 | Work :  \t  208.921 GiB / 1.979 TiB, 10%, 82.565 MiB/s, ETA 6h15m47 | peredano :  0 / 20, 0 | time_wok me:     43m53.5\n","data 14-12-2022 17:00 | Work :  \t  209.303 GiB / 1.979 TiB, 10%, 82.943 MiB/s, ETA 6h14 | peredano :  0 / 20, 0 | time_wok me:     43m58.0\n","data 14-12-2022 17:00 | Work :  \t  209.588 GiB / 1.979 TiB, 10%, 78.797 MiB/s, ETA 6h33m37 | peredano :  0 / 20, 0 | time_wok me:      44m2.5\n","data 14-12-2022 17:00 | Work :  \t  209.943 GiB / 1.979 TiB, 10%, 79.135 MiB/s, ETA 6h31m51 | peredano :  0 / 20, 0 | time_wok me:      44m6.5\n","data 14-12-2022 17:00 | Work :  \t  210.306 GiB / 1.979 TiB, 10%, 80.291 MiB/s, ETA 6h26m8 | peredano :  0 / 20, 0 | time_wok me:     44m11.0\n","data 14-12-2022 17:00 | Work :  \t  210.673 GiB / 1.979 TiB, 10%, 81.051 MiB/s, ETA 6h22m26 | peredano :  0 / 20, 0 | time_wok me:     44m15.5\n","data 14-12-2022 17:01 | Work :  \t  210.987 GiB / 1.979 TiB, 10%, 81.494 MiB/s, ETA 6h20m17 | peredano :  0 / 20, 0 | time_wok me:     44m20.0\n","data 14-12-2022 17:01 | Work :  \t  211.380 GiB / 1.979 TiB, 10%, 82.220 MiB/s, ETA 6h16m51 | peredano :  0 / 20, 0 | time_wok me:     44m24.5\n","data 14-12-2022 17:01 | Work :  \t  211.750 GiB / 1.979 TiB, 10%, 83.391 MiB/s, ETA 6h11m29 | peredano :  0 / 20, 0 | time_wok me:     44m29.0\n","data 14-12-2022 17:01 | Work :  \t  212.096 GiB / 1.979 TiB, 10%, 82.259 MiB/s, ETA 6h16m31 | peredano :  0 / 20, 0 | time_wok me:     44m33.5\n","data 14-12-2022 17:01 | Work :  \t  212.449 GiB / 1.979 TiB, 10%, 82.206 MiB/s, ETA 6h16m42 | peredano :  0 / 20, 0 | time_wok me:     44m38.0\n","data 14-12-2022 17:01 | Work :  \t  212.786 GiB / 1.979 TiB, 10%, 81.770 MiB/s, ETA 6h18m38 | peredano :  0 / 20, 0 | time_wok me:     44m42.5\n","data 14-12-2022 17:01 | Work :  \t  213.156 GiB / 1.979 TiB, 11%, 80.964 MiB/s, ETA 6h22m19 | peredano :  0 / 20, 0 | time_wok me:     44m46.5\n","data 14-12-2022 17:01 | Work :  \t  213.527 GiB / 1.979 TiB, 11%, 83.006 MiB/s, ETA 6h12m50 | peredano :  0 / 20, 0 | time_wok me:     44m51.0\n","data 14-12-2022 17:01 | Work :  \t  213.902 GiB / 1.979 TiB, 11%, 82.965 MiB/s, ETA 6h12m57 | peredano :  0 / 20, 0 | time_wok me:     44m55.5\n","data 14-12-2022 17:01 | Work :  \t  214.242 GiB / 1.979 TiB, 11%, 83.616 MiB/s, ETA 6h9m58 | peredano :  0 / 20, 0 | time_wok me:      45m0.0\n","data 14-12-2022 17:01 | Work :  \t  214.622 GiB / 1.979 TiB, 11%, 83.525 MiB/s, ETA 6h10m18 | peredano :  0 / 20, 0 | time_wok me:      45m4.5\n","data 14-12-2022 17:01 | Work :  \t  214.979 GiB / 1.979 TiB, 11%, 84.038 MiB/s, ETA 6h7m58 | peredano :  0 / 20, 0 | time_wok me:      45m9.0\n","data 14-12-2022 17:01 | Work :  \t  215.332 GiB / 1.979 TiB, 11%, 83.982 MiB/s, ETA 6h8m8 | peredano :  0 / 20, 0 | time_wok me:     45m13.5\n","data 14-12-2022 17:01 | Work :  \t  215.732 GiB / 1.979 TiB, 11%, 85.155 MiB/s, ETA 6h2m59 | peredano :  0 / 20, 0 | time_wok me:     45m18.0\n","data 14-12-2022 17:02 | Work :  \t  216.092 GiB / 1.979 TiB, 11%, 84.576 MiB/s, ETA 6h5m24 | peredano :  0 / 20, 0 | time_wok me:     45m22.5\n","data 14-12-2022 17:02 | Work :  \t  216.476 GiB / 1.979 TiB, 11%, 85.241 MiB/s, ETA 6h2m28 | peredano :  0 / 20, 0 | time_wok me:     45m26.5\n","data 14-12-2022 17:02 | Work :  \t  216.853 GiB / 1.979 TiB, 11%, 86.327 MiB/s, ETA 5h57m50 | peredano :  0 / 20, 0 | time_wok me:     45m31.0\n","data 14-12-2022 17:02 | Work :  \t  217.206 GiB / 1.979 TiB, 11%, 83.462 MiB/s, ETA 6h10m3 | peredano :  0 / 20, 0 | time_wok me:     45m35.5\n","data 14-12-2022 17:02 | Work :  \t  217.534 GiB / 1.979 TiB, 11%, 83.724 MiB/s, ETA 6h8m49 | peredano :  0 / 20, 0 | time_wok me:     45m40.0\n","data 14-12-2022 17:02 | Work :  \t  217.887 GiB / 1.979 TiB, 11%, 84.314 MiB/s, ETA 6h6m10 | peredano :  0 / 20, 0 | time_wok me:     45m44.5\n","data 14-12-2022 17:02 | Work :  \t  218.259 GiB / 1.979 TiB, 11%, 83.259 MiB/s, ETA 6h10m44 | peredano :  0 / 20, 0 | time_wok me:     45m49.0\n","data 14-12-2022 17:02 | Work :  \t  218.628 GiB / 1.979 TiB, 11%, 82.379 MiB/s, ETA 6h14m37 | peredano :  0 / 20, 0 | time_wok me:     45m53.5\n","data 14-12-2022 17:02 | Work :  \t  218.958 GiB / 1.979 TiB, 11%, 81.230 MiB/s, ETA 6h19m51 | peredano :  0 / 20, 0 | time_wok me:     45m58.0\n","data 14-12-2022 17:02 | Work :  \t  219.293 GiB / 1.979 TiB, 11%, 80.901 MiB/s, ETA 6h21m19 | peredano :  0 / 20, 0 | time_wok me:      46m2.5\n","data 14-12-2022 17:02 | Work :  \t  219.626 GiB / 1.979 TiB, 11%, 79.012 MiB/s, ETA 6h30m22 | peredano :  0 / 20, 0 | time_wok me:      46m6.5\n","data 14-12-2022 17:02 | Work :  \t  219.985 GiB / 1.979 TiB, 11%, 78.533 MiB/s, ETA 6h32m40 | peredano :  0 / 20, 0 | time_wok me:     46m11.0\n","data 14-12-2022 17:02 | Work :  \t  220.347 GiB / 1.979 TiB, 11%, 80.825 MiB/s, ETA 6h21m27 | peredano :  0 / 20, 0 | time_wok me:     46m15.5\n","data 14-12-2022 17:03 | Work :  \t  220.643 GiB / 1.979 TiB, 11%, 79.219 MiB/s, ETA 6h29m8 | peredano :  0 / 20, 0 | time_wok me:     46m20.0\n","data 14-12-2022 17:03 | Work :  \t  221.007 GiB / 1.979 TiB, 11%, 79.827 MiB/s, ETA 6h26m5 | peredano :  0 / 20, 0 | time_wok me:     46m24.5\n","data 14-12-2022 17:03 | Work :  \t  221.401 GiB / 1.979 TiB, 11%, 82.937 MiB/s, ETA 6h11m32 | peredano :  0 / 20, 0 | time_wok me:     46m29.0\n","data 14-12-2022 17:03 | Work :  \t  221.740 GiB / 1.979 TiB, 11%, 82.812 MiB/s, ETA 6h12m1 | peredano :  0 / 20, 0 | time_wok me:     46m33.5\n","data 14-12-2022 17:03 | Work :  \t  222.092 GiB / 1.979 TiB, 11%, 80.908 MiB/s, ETA 6h20m42 | peredano :  0 / 20, 0 | time_wok me:     46m38.0\n","data 14-12-2022 17:03 | Work :  \t  222.473 GiB / 1.979 TiB, 11%, 82.274 MiB/s, ETA 6h14m18 | peredano :  0 / 20, 0 | time_wok me:     46m42.5\n","data 14-12-2022 17:03 | Work :  \t  222.841 GiB / 1.979 TiB, 11%, 82.367 MiB/s, ETA 6h13m48 | peredano :  0 / 20, 0 | time_wok me:     46m46.5\n","data 14-12-2022 17:03 | Work :  \t  223.186 GiB / 1.979 TiB, 11%, 81.242 MiB/s, ETA 6h18m54 | peredano :  0 / 20, 0 | time_wok me:     46m51.0\n","data 14-12-2022 17:03 | Work :  \t  223.548 GiB / 1.979 TiB, 11%, 81.675 MiB/s, ETA 6h16m49 | peredano :  0 / 20, 0 | time_wok me:     46m55.5\n","data 14-12-2022 17:03 | Work :  \t  223.888 GiB / 1.979 TiB, 11%, 83.075 MiB/s, ETA 6h10m24 | peredano :  0 / 20, 0 | time_wok me:      47m0.0\n","data 14-12-2022 17:03 | Work :  \t  224.246 GiB / 1.979 TiB, 11%, 82.534 MiB/s, ETA 6h12m45 | peredano :  0 / 20, 0 | time_wok me:      47m4.5\n","data 14-12-2022 17:03 | Work :  \t  224.609 GiB / 1.979 TiB, 11%, 83.198 MiB/s, ETA 6h9m42 | peredano :  0 / 20, 0 | time_wok me:      47m9.0\n","data 14-12-2022 17:03 | Work :  \t  224.983 GiB / 1.979 TiB, 11%, 83.159 MiB/s, ETA 6h9m48 | peredano :  0 / 20, 0 | time_wok me:     47m13.5\n","data 14-12-2022 17:03 | Work :  \t  225.335 GiB / 1.979 TiB, 11%, 82.996 MiB/s, ETA 6h10m27 | peredano :  0 / 20, 0 | time_wok me:     47m18.0\n","data 14-12-2022 17:04 | Work :  \t  225.709 GiB / 1.979 TiB, 11%, 84.053 MiB/s, ETA 6h5m43 | peredano :  0 / 20, 0 | time_wok me:     47m22.5\n","data 14-12-2022 17:04 | Work :  \t  226.053 GiB / 1.979 TiB, 11%, 81.604 MiB/s, ETA 6h16m37 | peredano :  0 / 20, 0 | time_wok me:     47m26.5\n","data 14-12-2022 17:04 | Work :  \t  226.454 GiB / 1.979 TiB, 11%, 84.124 MiB/s, ETA 6h5m16 | peredano :  0 / 20, 0 | time_wok me:     47m31.0\n","data 14-12-2022 17:04 | Work :  \t  226.810 GiB / 1.979 TiB, 11%, 83.387 MiB/s, ETA 6h8m25 | peredano :  0 / 20, 0 | time_wok me:     47m35.5\n","data 14-12-2022 17:04 | Work :  \t  227.145 GiB / 1.979 TiB, 11%, 83.524 MiB/s, ETA 6h7m45 | peredano :  0 / 20, 0 | time_wok me:     47m40.0\n","data 14-12-2022 17:04 | Work :  \t  227.514 GiB / 1.979 TiB, 11%, 83.291 MiB/s, ETA 6h8m42 | peredano :  0 / 20, 0 | time_wok me:     47m44.5\n","data 14-12-2022 17:04 | Work :  \t  227.895 GiB / 1.979 TiB, 11%, 83.965 MiB/s, ETA 6h5m40 | peredano :  0 / 20, 0 | time_wok me:     47m49.0\n","data 14-12-2022 17:04 | Work :  \t  228.253 GiB / 1.979 TiB, 11%, 85.285 MiB/s, ETA 5h59m56 | peredano :  0 / 20, 0 | time_wok me:     47m53.5\n","data 14-12-2022 17:04 | Work :  \t  228.646 GiB / 1.979 TiB, 11%, 84.879 MiB/s, ETA 6h1m34 | peredano :  0 / 20, 0 | time_wok me:     47m58.0\n","data 14-12-2022 17:04 | Work :  \t  229.006 GiB / 1.979 TiB, 11%, 83.284 MiB/s, ETA 6h8m25 | peredano :  0 / 20, 0 | time_wok me:      48m2.5\n","data 14-12-2022 17:04 | Work :  \t  229.311 GiB / 1.979 TiB, 11%, 80.887 MiB/s, ETA 6h19m16 | peredano :  0 / 20, 0 | time_wok me:      48m6.5\n","data 14-12-2022 17:04 | Work :  \t  229.652 GiB / 1.979 TiB, 11%, 80.924 MiB/s, ETA 6h19m2 | peredano :  0 / 20, 0 | time_wok me:     48m11.0\n","data 14-12-2022 17:04 | Work :  \t  230.017 GiB / 1.979 TiB, 11%, 80.496 MiB/s, ETA 6h20m58 | peredano :  0 / 20, 0 | time_wok me:     48m15.5\n","data 14-12-2022 17:05 | Work :  \t  230.335 GiB / 1.979 TiB, 11%, 81.072 MiB/s, ETA 6h18m12 | peredano :  0 / 20, 0 | time_wok me:     48m20.0\n","data 14-12-2022 17:05 | Work :  \t  230.706 GiB / 1.979 TiB, 11%, 80.830 MiB/s, ETA 6h19m15 | peredano :  0 / 20, 0 | time_wok me:     48m24.5\n","data 14-12-2022 17:05 | Work :  \t  231.090 GiB / 1.979 TiB, 11%, 83.027 MiB/s, ETA 6h9m8 | peredano :  0 / 20, 0 | time_wok me:     48m29.0\n","data 14-12-2022 17:05 | Work :  \t  231.434 GiB / 1.979 TiB, 11%, 83.258 MiB/s, ETA 6h8m2 | peredano :  0 / 20, 0 | time_wok me:     48m33.5\n","data 14-12-2022 17:05 | Work :  \t  231.831 GiB / 1.979 TiB, 11%, 84.086 MiB/s, ETA 6h4m20 | peredano :  0 / 20, 0 | time_wok me:     48m38.0\n","data 14-12-2022 17:05 | Work :  \t  232.187 GiB / 1.979 TiB, 11%, 84.458 MiB/s, ETA 6h2m40 | peredano :  0 / 20, 0 | time_wok me:     48m42.5\n","data 14-12-2022 17:05 | Work :  \t  232.577 GiB / 1.979 TiB, 11%, 84.654 MiB/s, ETA 6h1m44 | peredano :  0 / 20, 0 | time_wok me:     48m46.5\n","data 14-12-2022 17:05 | Work :  \t  232.899 GiB / 1.979 TiB, 11%, 82.970 MiB/s, ETA 6h9m1 | peredano :  0 / 20, 0 | time_wok me:     48m51.0\n","data 14-12-2022 17:05 | Work :  \t  233.264 GiB / 1.979 TiB, 12%, 81.735 MiB/s, ETA 6h14m31 | peredano :  0 / 20, 0 | time_wok me:     48m55.5\n","data 14-12-2022 17:05 | Work :  \t  233.582 GiB / 1.979 TiB, 12%, 81.857 MiB/s, ETA 6h13m53 | peredano :  0 / 20, 0 | time_wok me:      49m0.0\n","data 14-12-2022 17:05 | Work :  \t  233.927 GiB / 1.979 TiB, 12%, 80.697 MiB/s, ETA 6h19m12 | peredano :  0 / 20, 0 | time_wok me:      49m4.5\n","data 14-12-2022 17:05 | Work :  \t  234.288 GiB / 1.979 TiB, 12%, 81.844 MiB/s, ETA 6h13m48 | peredano :  0 / 20, 0 | time_wok me:      49m9.0\n","data 14-12-2022 17:05 | Work :  \t  234.676 GiB / 1.979 TiB, 12%, 82.940 MiB/s, ETA 6h8m47 | peredano :  0 / 20, 0 | time_wok me:     49m13.5\n","data 14-12-2022 17:05 | Work :  \t  235.041 GiB / 1.979 TiB, 12%, 83.661 MiB/s, ETA 6h5m32 | peredano :  0 / 20, 0 | time_wok me:     49m18.0\n","data 14-12-2022 17:06 | Work :  \t  235.391 GiB / 1.979 TiB, 12%, 83.658 MiB/s, ETA 6h5m28 | peredano :  0 / 20, 0 | time_wok me:     49m22.5\n","data 14-12-2022 17:06 | Work :  \t  235.771 GiB / 1.979 TiB, 12%, 82.893 MiB/s, ETA 6h8m46 | peredano :  0 / 20, 0 | time_wok me:     49m26.5\n","data 14-12-2022 17:06 | Work :  \t  236.157 GiB / 1.979 TiB, 12%, 84.904 MiB/s, ETA 5h59m57 | peredano :  0 / 20, 0 | time_wok me:     49m31.0\n","data 14-12-2022 17:06 | Work :  \t  236.516 GiB / 1.979 TiB, 12%, 83.524 MiB/s, ETA 6h5m50 | peredano :  0 / 20, 0 | time_wok me:     49m35.5\n","data 14-12-2022 17:06 | Work :  \t  236.847 GiB / 1.979 TiB, 12%, 83.514 MiB/s, ETA 6h5m48 | peredano :  0 / 20, 0 | time_wok me:     49m40.0\n","data 14-12-2022 17:06 | Work :  \t  237.188 GiB / 1.979 TiB, 12%, 83.135 MiB/s, ETA 6h7m24 | peredano :  0 / 20, 0 | time_wok me:     49m44.5\n","data 14-12-2022 17:06 | Work :  \t  237.508 GiB / 1.979 TiB, 12%, 80.122 MiB/s, ETA 6h21m9 | peredano :  0 / 20, 0 | time_wok me:     49m49.0\n","data 14-12-2022 17:06 | Work :  \t  237.896 GiB / 1.979 TiB, 12%, 82.110 MiB/s, ETA 6h11m51 | peredano :  0 / 20, 0 | time_wok me:     49m53.5\n","data 14-12-2022 17:06 | Work :  \t  238.241 GiB / 1.979 TiB, 12%, 81.297 MiB/s, ETA 6h15m29 | peredano :  0 / 20, 0 | time_wok me:     49m58.0\n","data 14-12-2022 17:06 | Work :  \t  238.598 GiB / 1.979 TiB, 12%, 81.574 MiB/s, ETA 6h14m8 | peredano :  0 / 20, 0 | time_wok me:      50m2.5\n","data 14-12-2022 17:06 | Work :  \t  238.931 GiB / 1.979 TiB, 12%, 79.691 MiB/s, ETA 6h22m54 | peredano :  0 / 20, 0 | time_wok me:      50m6.5\n","data 14-12-2022 17:06 | Work :  \t  239.308 GiB / 1.979 TiB, 12%, 80.312 MiB/s, ETA 6h19m52 | peredano :  0 / 20, 0 | time_wok me:     50m11.0\n","data 14-12-2022 17:06 | Work :  \t  239.655 GiB / 1.979 TiB, 12%, 81.129 MiB/s, ETA 6h15m58 | peredano :  0 / 20, 0 | time_wok me:     50m15.5\n","data 14-12-2022 17:07 | Work :  \t  239.996 GiB / 1.979 TiB, 12%, 82.424 MiB/s, ETA 6h10 | peredano :  0 / 20, 0 | time_wok me:     50m20.0\n","data 14-12-2022 17:07 | Work :  \t  240.357 GiB / 1.979 TiB, 12%, 82.171 MiB/s, ETA 6h11m3 | peredano :  0 / 20, 0 | time_wok me:     50m24.5\n","data 14-12-2022 17:07 | Work :  \t  240.712 GiB / 1.979 TiB, 12%, 81.543 MiB/s, ETA 6h13m50 | peredano :  0 / 20, 0 | time_wok me:     50m29.0\n","data 14-12-2022 17:07 | Work :  \t  241.072 GiB / 1.979 TiB, 12%, 82.578 MiB/s, ETA 6h9m5 | peredano :  0 / 20, 0 | time_wok me:     50m33.5\n","data 14-12-2022 17:07 | Work :  \t  241.404 GiB / 1.979 TiB, 12%, 80.877 MiB/s, ETA 6h16m46 | peredano :  0 / 20, 0 | time_wok me:     50m38.0\n","data 14-12-2022 17:07 | Work :  \t  241.801 GiB / 1.979 TiB, 12%, 80.927 MiB/s, ETA 6h16m27 | peredano :  0 / 20, 0 | time_wok me:     50m42.5\n","data 14-12-2022 17:07 | Work :  \t  242.134 GiB / 1.979 TiB, 12%, 81.170 MiB/s, ETA 6h15m16 | peredano :  0 / 20, 0 | time_wok me:     50m46.5\n","data 14-12-2022 17:07 | Work :  \t  242.521 GiB / 1.979 TiB, 12%, 81.920 MiB/s, ETA 6h11m44 | peredano :  0 / 20, 0 | time_wok me:     50m51.0\n","data 14-12-2022 17:07 | Work :  \t  242.896 GiB / 1.979 TiB, 12%, 83.333 MiB/s, ETA 6h5m22 | peredano :  0 / 20, 0 | time_wok me:     50m55.5\n","data 14-12-2022 17:07 | Work :  \t  243.209 GiB / 1.979 TiB, 12%, 82.826 MiB/s, ETA 6h7m32 | peredano :  0 / 20, 0 | time_wok me:      51m0.0\n","data 14-12-2022 17:07 | Work :  \t  243.556 GiB / 1.979 TiB, 12%, 82.048 MiB/s, ETA 6h10m57 | peredano :  0 / 20, 0 | time_wok me:      51m4.5\n","data 14-12-2022 17:07 | Work :  \t  243.928 GiB / 1.979 TiB, 12%, 82.903 MiB/s, ETA 6h7m3 | peredano :  0 / 20, 0 | time_wok me:      51m9.0\n","data 14-12-2022 17:07 | Work :  \t  244.318 GiB / 1.979 TiB, 12%, 83.743 MiB/s, ETA 6h3m17 | peredano :  0 / 20, 0 | time_wok me:     51m13.5\n","data 14-12-2022 17:07 | Work :  \t  244.665 GiB / 1.979 TiB, 12%, 83.218 MiB/s, ETA 6h5m30 | peredano :  0 / 20, 0 | time_wok me:     51m18.0\n","data 14-12-2022 17:08 | Work :  \t  245.018 GiB / 1.979 TiB, 12%, 81.028 MiB/s, ETA 6h15m19 | peredano :  0 / 20, 0 | time_wok me:     51m22.5\n","data 14-12-2022 17:08 | Work :  \t  245.401 GiB / 1.979 TiB, 12%, 83.541 MiB/s, ETA 6h3m56 | peredano :  0 / 20, 0 | time_wok me:     51m26.5\n","data 14-12-2022 17:08 | Work :  \t  245.744 GiB / 1.979 TiB, 12%, 83.597 MiB/s, ETA 6h3m38 | peredano :  0 / 20, 0 | time_wok me:     51m31.0\n","data 14-12-2022 17:08 | Work :  \t  246.141 GiB / 1.979 TiB, 12%, 83.484 MiB/s, ETA 6h4m2 | peredano :  0 / 20, 0 | time_wok me:     51m35.5\n","data 14-12-2022 17:08 | Work :  \t  246.444 GiB / 1.979 TiB, 12%, 82.331 MiB/s, ETA 6h9m4 | peredano :  0 / 20, 0 | time_wok me:     51m40.0\n","data 14-12-2022 17:08 | Work :  \t  246.817 GiB / 1.979 TiB, 12%, 81.547 MiB/s, ETA 6h12m32 | peredano :  0 / 20, 0 | time_wok me:     51m44.5\n","data 14-12-2022 17:08 | Work :  \t  247.181 GiB / 1.979 TiB, 12%, 83.517 MiB/s, ETA 6h3m41 | peredano :  0 / 20, 0 | time_wok me:     51m49.0\n","data 14-12-2022 17:08 | Work :  \t  247.499 GiB / 1.979 TiB, 12%, 81.499 MiB/s, ETA 6h12m37 | peredano :  0 / 20, 0 | time_wok me:     51m53.5\n","data 14-12-2022 17:08 | Work :  \t  247.857 GiB / 1.979 TiB, 12%, 81.203 MiB/s, ETA 6h13m54 | peredano :  0 / 20, 0 | time_wok me:     51m58.0\n","data 14-12-2022 17:08 | Work :  \t  248.215 GiB / 1.979 TiB, 12%, 80.873 MiB/s, ETA 6h15m21 | peredano :  0 / 20, 0 | time_wok me:      52m2.5\n","data 14-12-2022 17:08 | Work :  \t  248.559 GiB / 1.979 TiB, 12%, 81.053 MiB/s, ETA 6h14m27 | peredano :  0 / 20, 0 | time_wok me:      52m6.5\n","data 14-12-2022 17:08 | Work :  \t  248.916 GiB / 1.979 TiB, 12%, 81.363 MiB/s, ETA 6h12m57 | peredano :  0 / 20, 0 | time_wok me:     52m11.0\n","data 14-12-2022 17:08 | Work :  \t  249.285 GiB / 1.979 TiB, 12%, 81.262 MiB/s, ETA 6h13m20 | peredano :  0 / 20, 0 | time_wok me:     52m15.5\n","data 14-12-2022 17:09 | Work :  \t  249.611 GiB / 1.979 TiB, 12%, 81.426 MiB/s, ETA 6h12m31 | peredano :  0 / 20, 0 | time_wok me:     52m20.0\n","data 14-12-2022 17:09 | Work :  \t  249.987 GiB / 1.979 TiB, 12%, 83.494 MiB/s, ETA 6h3m12 | peredano :  0 / 20, 0 | time_wok me:     52m24.5\n","data 14-12-2022 17:09 | Work :  \t  250.346 GiB / 1.979 TiB, 12%, 81.617 MiB/s, ETA 6h11m29 | peredano :  0 / 20, 0 | time_wok me:     52m29.0\n","data 14-12-2022 17:09 | Work :  \t  250.728 GiB / 1.979 TiB, 12%, 82.554 MiB/s, ETA 6h7m12 | peredano :  0 / 20, 0 | time_wok me:     52m33.5\n","data 14-12-2022 17:09 | Work :  \t  251.076 GiB / 1.979 TiB, 12%, 82.979 MiB/s, ETA 6h5m14 | peredano :  0 / 20, 0 | time_wok me:     52m38.0\n","data 14-12-2022 17:09 | Work :  \t  251.423 GiB / 1.979 TiB, 12%, 80.639 MiB/s, ETA 6h15m46 | peredano :  0 / 20, 0 | time_wok me:     52m42.5\n","data 14-12-2022 17:09 | Work :  \t  251.788 GiB / 1.979 TiB, 12%, 82.442 MiB/s, ETA 6h7m28 | peredano :  0 / 20, 0 | time_wok me:     52m46.5\n","data 14-12-2022 17:09 | Work :  \t  252.153 GiB / 1.979 TiB, 12%, 83.255 MiB/s, ETA 6h3m48 | peredano :  0 / 20, 0 | time_wok me:     52m51.0\n","data 14-12-2022 17:09 | Work :  \t  252.469 GiB / 1.979 TiB, 12%, 80.365 MiB/s, ETA 6h16m49 | peredano :  0 / 20, 0 | time_wok me:     52m55.5\n","data 14-12-2022 17:09 | Work :  \t  252.764 GiB / 1.979 TiB, 12%, 77.752 MiB/s, ETA 6h29m25 | peredano :  0 / 20, 0 | time_wok me:      53m0.0\n","data 14-12-2022 17:09 | Work :  \t  253.117 GiB / 1.979 TiB, 12%, 77.296 MiB/s, ETA 6h31m38 | peredano :  0 / 20, 0 | time_wok me:      53m4.5\n","data 14-12-2022 17:09 | Work :  \t  253.422 GiB / 1.979 TiB, 13%, 76.933 MiB/s, ETA 6h33m25 | peredano :  0 / 20, 0 | time_wok me:      53m9.0\n","data 14-12-2022 17:09 | Work :  \t  253.814 GiB / 1.979 TiB, 13%, 78.743 MiB/s, ETA 6h24m18 | peredano :  0 / 20, 0 | time_wok me:     53m13.5\n","data 14-12-2022 17:09 | Work :  \t  254.150 GiB / 1.979 TiB, 13%, 78.614 MiB/s, ETA 6h24m51 | peredano :  0 / 20, 0 | time_wok me:     53m18.0\n","data 14-12-2022 17:10 | Work :  \t  254.534 GiB / 1.979 TiB, 13%, 80.950 MiB/s, ETA 6h13m40 | peredano :  0 / 20, 0 | time_wok me:     53m22.5\n","data 14-12-2022 17:10 | Work :  \t  254.876 GiB / 1.979 TiB, 13%, 79.864 MiB/s, ETA 6h18m40 | peredano :  0 / 20, 0 | time_wok me:     53m26.5\n","data 14-12-2022 17:10 | Work :  \t  255.271 GiB / 1.979 TiB, 13%, 81.724 MiB/s, ETA 6h9m58 | peredano :  0 / 20, 0 | time_wok me:     53m31.0\n","data 14-12-2022 17:10 | Work :  \t  255.607 GiB / 1.979 TiB, 13%, 81.772 MiB/s, ETA 6h9m41 | peredano :  0 / 20, 0 | time_wok me:     53m35.5\n","data 14-12-2022 17:10 | Work :  \t  255.952 GiB / 1.979 TiB, 13%, 82.449 MiB/s, ETA 6h6m35 | peredano :  0 / 20, 0 | time_wok me:     53m40.0\n","data 14-12-2022 17:10 | Work :  \t  256.338 GiB / 1.979 TiB, 13%, 83.544 MiB/s, ETA 6h1m42 | peredano :  0 / 20, 0 | time_wok me:     53m44.5\n","data 14-12-2022 17:10 | Work :  \t  256.704 GiB / 1.979 TiB, 13%, 83.391 MiB/s, ETA 6h2m17 | peredano :  0 / 20, 0 | time_wok me:     53m49.0\n","data 14-12-2022 17:10 | Work :  \t  257.068 GiB / 1.979 TiB, 13%, 82.354 MiB/s, ETA 6h6m46 | peredano :  0 / 20, 0 | time_wok me:     53m53.5\n","data 14-12-2022 17:10 | Work :  \t  257.413 GiB / 1.979 TiB, 13%, 82.180 MiB/s, ETA 6h7m28 | peredano :  0 / 20, 0 | time_wok me:     53m58.0\n","data 14-12-2022 17:10 | Work :  \t  257.784 GiB / 1.979 TiB, 13%, 83.232 MiB/s, ETA 6h2m45 | peredano :  0 / 20, 0 | time_wok me:      54m2.5\n","data 14-12-2022 17:10 | Work :  \t  258.130 GiB / 1.979 TiB, 13%, 81.648 MiB/s, ETA 6h9m43 | peredano :  0 / 20, 0 | time_wok me:      54m6.5\n","data 14-12-2022 17:10 | Work :  \t  258.530 GiB / 1.979 TiB, 13%, 83.325 MiB/s, ETA 6h2m12 | peredano :  0 / 20, 0 | time_wok me:     54m11.0\n","data 14-12-2022 17:10 | Work :  \t  258.881 GiB / 1.979 TiB, 13%, 83.378 MiB/s, ETA 6h1m53 | peredano :  0 / 20, 0 | time_wok me:     54m15.5\n","data 14-12-2022 17:11 | Work :  \t  259.180 GiB / 1.979 TiB, 13%, 81.227 MiB/s, ETA 6h11m25 | peredano :  0 / 20, 0 | time_wok me:     54m20.0\n","data 14-12-2022 17:11 | Work :  \t  259.554 GiB / 1.979 TiB, 13%, 81.851 MiB/s, ETA 6h8m30 | peredano :  0 / 20, 0 | time_wok me:     54m24.5\n","data 14-12-2022 17:11 | Work :  \t  259.931 GiB / 1.979 TiB, 13%, 83.154 MiB/s, ETA 6h2m39 | peredano :  0 / 20, 0 | time_wok me:     54m29.0\n","data 14-12-2022 17:11 | Work :  \t  260.310 GiB / 1.979 TiB, 13%, 83.436 MiB/s, ETA 6h1m21 | peredano :  0 / 20, 0 | time_wok me:     54m33.5\n","data 14-12-2022 17:11 | Work :  \t  260.625 GiB / 1.979 TiB, 13%, 82.044 MiB/s, ETA 6h7m25 | peredano :  0 / 20, 0 | time_wok me:     54m38.0\n","data 14-12-2022 17:11 | Work :  \t  261.002 GiB / 1.979 TiB, 13%, 81.606 MiB/s, ETA 6h9m18 | peredano :  0 / 20, 0 | time_wok me:     54m42.5\n","data 14-12-2022 17:11 | Work :  \t  261.331 GiB / 1.979 TiB, 13%, 80.688 MiB/s, ETA 6h13m26 | peredano :  0 / 20, 0 | time_wok me:     54m46.5\n","data 14-12-2022 17:11 | Work :  \t  261.666 GiB / 1.979 TiB, 13%, 80.882 MiB/s, ETA 6h12m28 | peredano :  0 / 20, 0 | time_wok me:     54m51.0\n","data 14-12-2022 17:11 | Work :  \t  262.035 GiB / 1.979 TiB, 13%, 80.099 MiB/s, ETA 6h16m2 | peredano :  0 / 20, 0 | time_wok me:     54m55.5\n","data 14-12-2022 17:11 | Work :  \t  262.360 GiB / 1.979 TiB, 13%, 81.373 MiB/s, ETA 6h10m5 | peredano :  0 / 20, 0 | time_wok me:      55m0.0\n","data 14-12-2022 17:11 | Work :  \t  262.737 GiB / 1.979 TiB, 13%, 80.769 MiB/s, ETA 6h12m46 | peredano :  0 / 20, 0 | time_wok me:      55m4.5\n","data 14-12-2022 17:11 | Work :  \t  263.105 GiB / 1.979 TiB, 13%, 82.583 MiB/s, ETA 6h4m30 | peredano :  0 / 20, 0 | time_wok me:      55m9.0\n","data 14-12-2022 17:11 | Work :  \t  263.452 GiB / 1.979 TiB, 13%, 80.457 MiB/s, ETA 6h14m4 | peredano :  0 / 20, 0 | time_wok me:     55m13.5\n","data 14-12-2022 17:11 | Work :  \t  263.825 GiB / 1.979 TiB, 13%, 83.092 MiB/s, ETA 6h2m7 | peredano :  0 / 20, 0 | time_wok me:     55m18.0\n","data 14-12-2022 17:12 | Work :  \t  264.220 GiB / 1.979 TiB, 13%, 83.407 MiB/s, ETA 6h40 | peredano :  0 / 20, 0 | time_wok me:     55m22.5\n","data 14-12-2022 17:12 | Work :  \t  264.570 GiB / 1.979 TiB, 13%, 83.748 MiB/s, ETA 5h59m8 | peredano :  0 / 20, 0 | time_wok me:     55m26.5\n","data 14-12-2022 17:12 | Work :  \t  264.942 GiB / 1.979 TiB, 13%, 82.961 MiB/s, ETA 6h2m28 | peredano :  0 / 20, 0 | time_wok me:     55m31.0\n","data 14-12-2022 17:12 | Work :  \t  265.293 GiB / 1.979 TiB, 13%, 82.461 MiB/s, ETA 6h4m35 | peredano :  0 / 20, 0 | time_wok me:     55m35.5\n","data 14-12-2022 17:12 | Work :  \t  265.627 GiB / 1.979 TiB, 13%, 83.014 MiB/s, ETA 6h2m6 | peredano :  0 / 20, 0 | time_wok me:     55m40.0\n","data 14-12-2022 17:12 | Work :  \t  265.987 GiB / 1.979 TiB, 13%, 83.294 MiB/s, ETA 6h48 | peredano :  0 / 20, 0 | time_wok me:     55m44.5\n","data 14-12-2022 17:12 | Work :  \t  266.353 GiB / 1.979 TiB, 13%, 83.271 MiB/s, ETA 6h50 | peredano :  0 / 20, 0 | time_wok me:     55m49.0\n","data 14-12-2022 17:12 | Work :  \t  266.715 GiB / 1.979 TiB, 13%, 82.949 MiB/s, ETA 6h2m9 | peredano :  0 / 20, 0 | time_wok me:     55m53.5\n","data 14-12-2022 17:12 | Work :  \t  267.079 GiB / 1.979 TiB, 13%, 82.872 MiB/s, ETA 6h2m25 | peredano :  0 / 20, 0 | time_wok me:     55m58.0\n","data 14-12-2022 17:12 | Work :  \t  267.453 GiB / 1.979 TiB, 13%, 82.845 MiB/s, ETA 6h2m27 | peredano :  0 / 20, 0 | time_wok me:      56m2.5\n","data 14-12-2022 17:12 | Work :  \t  267.828 GiB / 1.979 TiB, 13%, 84.470 MiB/s, ETA 5h55m24 | peredano :  0 / 20, 0 | time_wok me:      56m6.5\n","data 14-12-2022 17:12 | Work :  \t  268.181 GiB / 1.979 TiB, 13%, 83.348 MiB/s, ETA 6h7 | peredano :  0 / 20, 0 | time_wok me:     56m11.0\n","data 14-12-2022 17:12 | Work :  \t  268.479 GiB / 1.979 TiB, 13%, 79.213 MiB/s, ETA 6h18m51 | peredano :  0 / 20, 0 | time_wok me:     56m15.5\n","data 14-12-2022 17:13 | Work :  \t  268.771 GiB / 1.979 TiB, 13%, 78.798 MiB/s, ETA 6h20m47 | peredano :  0 / 20, 0 | time_wok me:     56m20.0\n"]}]}],"metadata":{"colab":{"name":"Rclone.ipynb","provenance":[{"file_id":"https://github.com/TheCaduceus/Multi-Cloud-Transfer-Tool/blob/main/Rclone.ipynb","timestamp":1671011055945}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"TPU"},"nbformat":4,"nbformat_minor":0}